
UART_Communication_CAN_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800386c  0800386c  0000486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038e0  080038e0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e0  080038e0  000048e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038e4  080038e4  000048e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080038e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000238  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000294  20000294  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009329  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000179c  00000000  00000000  0000e3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0000fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005db  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020693  00000000  00000000  000108e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008ae1  00000000  00000000  00030f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c52bf  00000000  00000000  00039a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fed16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000242c  00000000  00000000  000fed5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00101188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003854 	.word	0x08003854

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003854 	.word	0x08003854

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800057a:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800057c:	2100      	movs	r1, #0
 800057e:	480b      	ldr	r0, [pc, #44]	@ (80005ac <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000580:	f000 fdd0 	bl	8001124 <HAL_CAN_GetRxMessage>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
        Error_Handler();
 800058a:	f000 f9c7 	bl	800091c <Error_Handler>
    }

    if (RxHeader.DLC == 4) {
 800058e:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000590:	691b      	ldr	r3, [r3, #16]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d102      	bne.n	800059c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
        datacheck = 1;
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000598:	2201      	movs	r2, #1
 800059a:	601a      	str	r2, [r3, #0]
    }
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000104 	.word	0x20000104
 80005a8:	200000e8 	.word	0x200000e8
 80005ac:	20000078 	.word	0x20000078
 80005b0:	20000140 	.word	0x20000140

080005b4 <send_UART_message>:


void send_UART_message(uint16_t ppm, uint16_t adcValue) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	80fb      	strh	r3, [r7, #6]
 80005c0:	4613      	mov	r3, r2
 80005c2:	80bb      	strh	r3, [r7, #4]
    snprintf(uartMessage, sizeof(uartMessage),
 80005c4:	88fa      	ldrh	r2, [r7, #6]
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	4613      	mov	r3, r2
 80005cc:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <send_UART_message+0x40>)
 80005ce:	2132      	movs	r1, #50	@ 0x32
 80005d0:	4809      	ldr	r0, [pc, #36]	@ (80005f8 <send_UART_message+0x44>)
 80005d2:	f002 fc8b 	bl	8002eec <sniprintf>
             "MQ-135 Data: PPM: %d, ADC: %d\r\n", ppm, adcValue);
    HAL_UART_Transmit(&huart2, (uint8_t *)uartMessage, strlen(uartMessage), HAL_MAX_DELAY);
 80005d6:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <send_UART_message+0x44>)
 80005d8:	f7ff fdfa 	bl	80001d0 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e4:	4904      	ldr	r1, [pc, #16]	@ (80005f8 <send_UART_message+0x44>)
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <send_UART_message+0x48>)
 80005e8:	f002 f8c4 	bl	8002774 <HAL_UART_Transmit>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	0800386c 	.word	0x0800386c
 80005f8:	2000010c 	.word	0x2000010c
 80005fc:	200000a0 	.word	0x200000a0

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fafb 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f83b 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f925 	bl	800085c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000612:	f000 f8a1 	bl	8000758 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000616:	f000 f8f7 	bl	8000808 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800061a:	4817      	ldr	r0, [pc, #92]	@ (8000678 <main+0x78>)
 800061c:	f000 fd3e 	bl	800109c <HAL_CAN_Start>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <main+0x2a>
          Error_Handler();
 8000626:	f000 f979 	bl	800091c <Error_Handler>
      }

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800062a:	2102      	movs	r1, #2
 800062c:	4812      	ldr	r0, [pc, #72]	@ (8000678 <main+0x78>)
 800062e:	f000 fe9b 	bl	8001368 <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (datacheck) {
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <main+0x7c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0fb      	beq.n	8000632 <main+0x32>
	              uint16_t ppm = (RxData[0] << 8) | RxData[1];  // Extract gas concentration (PPM)
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <main+0x80>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	021b      	lsls	r3, r3, #8
 8000640:	b21a      	sxth	r2, r3
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <main+0x80>)
 8000644:	785b      	ldrb	r3, [r3, #1]
 8000646:	b21b      	sxth	r3, r3
 8000648:	4313      	orrs	r3, r2
 800064a:	b21b      	sxth	r3, r3
 800064c:	80fb      	strh	r3, [r7, #6]
	              uint16_t adcValue = (RxData[2] << 8) | RxData[3];  // Extract ADC value
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <main+0x80>)
 8000650:	789b      	ldrb	r3, [r3, #2]
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <main+0x80>)
 8000658:	78db      	ldrb	r3, [r3, #3]
 800065a:	b21b      	sxth	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b21b      	sxth	r3, r3
 8000660:	80bb      	strh	r3, [r7, #4]

	              send_UART_message(ppm, adcValue);  // Send to UART
 8000662:	88ba      	ldrh	r2, [r7, #4]
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffa3 	bl	80005b4 <send_UART_message>
	              datacheck = 0;
 800066e:	4b03      	ldr	r3, [pc, #12]	@ (800067c <main+0x7c>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
	  if (datacheck) {
 8000674:	e7dd      	b.n	8000632 <main+0x32>
 8000676:	bf00      	nop
 8000678:	20000078 	.word	0x20000078
 800067c:	20000140 	.word	0x20000140
 8000680:	20000104 	.word	0x20000104

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	@ 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	@ 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fc5e 	bl	8002f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	4a27      	ldr	r2, [pc, #156]	@ (8000750 <SystemClock_Config+0xcc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b8:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	@ (8000754 <SystemClock_Config+0xd0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f8:	2332      	movs	r3, #50	@ 0x32
 80006fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000700:	2307      	movs	r3, #7
 8000702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fb4b 	bl	8001da4 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000714:	f000 f902 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000724:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fdac 	bl	8002294 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000742:	f000 f8eb 	bl	800091c <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	@ 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800075e:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <MX_CAN1_Init+0xa8>)
 8000760:	4a28      	ldr	r2, [pc, #160]	@ (8000804 <MX_CAN1_Init+0xac>)
 8000762:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <MX_CAN1_Init+0xa8>)
 8000766:	2215      	movs	r2, #21
 8000768:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800076a:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <MX_CAN1_Init+0xa8>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000770:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <MX_CAN1_Init+0xa8>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000776:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_CAN1_Init+0xa8>)
 8000778:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800077c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <MX_CAN1_Init+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000784:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <MX_CAN1_Init+0xa8>)
 8000786:	2200      	movs	r2, #0
 8000788:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_CAN1_Init+0xa8>)
 800078c:	2200      	movs	r2, #0
 800078e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <MX_CAN1_Init+0xa8>)
 8000792:	2200      	movs	r2, #0
 8000794:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_CAN1_Init+0xa8>)
 8000798:	2200      	movs	r2, #0
 800079a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_CAN1_Init+0xa8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007a2:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_CAN1_Init+0xa8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007a8:	4815      	ldr	r0, [pc, #84]	@ (8000800 <MX_CAN1_Init+0xa8>)
 80007aa:	f000 fa9b 	bl	8000ce4 <HAL_CAN_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 f8b2 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
      canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
      canfilterconfig.FilterBank = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
      canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
      canfilterconfig.FilterIdHigh = 0x123 << 5;
 80007c4:	f242 4360 	movw	r3, #9312	@ 0x2460
 80007c8:	603b      	str	r3, [r7, #0]
      canfilterconfig.FilterIdLow = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
      canfilterconfig.FilterMaskIdHigh = 0x103 << 5;
 80007ce:	f242 0360 	movw	r3, #8288	@ 0x2060
 80007d2:	60bb      	str	r3, [r7, #8]
      canfilterconfig.FilterMaskIdLow = 0x0000;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007dc:	2301      	movs	r3, #1
 80007de:	61fb      	str	r3, [r7, #28]
      canfilterconfig.SlaveStartFilterBank = 14;
 80007e0:	230e      	movs	r3, #14
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24

      if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK) {
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_CAN1_Init+0xa8>)
 80007ea:	f000 fb77 	bl	8000edc <HAL_CAN_ConfigFilter>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_CAN1_Init+0xa0>
          Error_Handler();
 80007f4:	f000 f892 	bl	800091c <Error_Handler>
      }
  }
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000078 	.word	0x20000078
 8000804:	40006400 	.word	0x40006400

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f001 ff48 	bl	80026d4 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f867 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000a0 	.word	0x200000a0
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <MX_GPIO_Init+0xb8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a26      	ldr	r2, [pc, #152]	@ (8000914 <MX_GPIO_Init+0xb8>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <MX_GPIO_Init+0xb8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <MX_GPIO_Init+0xb8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a1f      	ldr	r2, [pc, #124]	@ (8000914 <MX_GPIO_Init+0xb8>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_GPIO_Init+0xb8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <MX_GPIO_Init+0xb8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a18      	ldr	r2, [pc, #96]	@ (8000914 <MX_GPIO_Init+0xb8>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_GPIO_Init+0xb8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_GPIO_Init+0xb8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a11      	ldr	r2, [pc, #68]	@ (8000914 <MX_GPIO_Init+0xb8>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_GPIO_Init+0xb8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <MX_GPIO_Init+0xbc>)
 80008ea:	f001 fa41 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_GPIO_Init+0xbc>)
 8000908:	f001 f896 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40020c00 	.word	0x40020c00

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	@ (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000966:	2007      	movs	r0, #7
 8000968:	f001 f824 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1d      	ldr	r2, [pc, #116]	@ (8000a0c <HAL_CAN_MspInit+0x94>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d134      	bne.n	8000a04 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <HAL_CAN_MspInit+0x98>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <HAL_CAN_MspInit+0x98>)
 80009a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <HAL_CAN_MspInit+0x98>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <HAL_CAN_MspInit+0x98>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a14      	ldr	r2, [pc, #80]	@ (8000a10 <HAL_CAN_MspInit+0x98>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_CAN_MspInit+0x98>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009e4:	2309      	movs	r3, #9
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <HAL_CAN_MspInit+0x9c>)
 80009f0:	f001 f822 	bl	8001a38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2014      	movs	r0, #20
 80009fa:	f000 ffe6 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009fe:	2014      	movs	r0, #20
 8000a00:	f000 ffff 	bl	8001a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40006400 	.word	0x40006400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <HAL_UART_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12b      	bne.n	8000a92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a10      	ldr	r2, [pc, #64]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a72:	230c      	movs	r3, #12
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a82:	2307      	movs	r3, #7
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <HAL_UART_MspInit+0x8c>)
 8000a8e:	f000 ffd3 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	@ 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f8d1 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <CAN1_RX0_IRQHandler+0x10>)
 8000b0e:	f000 fc51 	bl	80013b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000078 	.word	0x20000078

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f002 fa0a 	bl	8002f64 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20020000 	.word	0x20020000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	20000144 	.word	0x20000144
 8000b84:	20000298 	.word	0x20000298

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bb0:	f7ff ffea 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	@ (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 f9c9 	bl	8002f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fd0f 	bl	8000600 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bf0:	080038e8 	.word	0x080038e8
  ldr r2, =_sbss
 8000bf4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bf8:	20000294 	.word	0x20000294

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 fec3 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe78 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fedb 	bl	8001a1e <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c80:	f000 fea3 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	@ (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000148 	.word	0x20000148

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000148 	.word	0x20000148

08000ce4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e0ed      	b.n	8000ed2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fe38 	bl	8000978 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d18:	f7ff ffd8 	bl	8000ccc <HAL_GetTick>
 8000d1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d1e:	e012      	b.n	8000d46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d20:	f7ff ffd4 	bl	8000ccc <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b0a      	cmp	r3, #10
 8000d2c:	d90b      	bls.n	8000d46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2205      	movs	r2, #5
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0c5      	b.n	8000ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0e5      	beq.n	8000d20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0202 	bic.w	r2, r2, #2
 8000d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d64:	f7ff ffb2 	bl	8000ccc <HAL_GetTick>
 8000d68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d6a:	e012      	b.n	8000d92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d6c:	f7ff ffae 	bl	8000ccc <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d90b      	bls.n	8000d92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2205      	movs	r2, #5
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e09f      	b.n	8000ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e5      	bne.n	8000d6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7e1b      	ldrb	r3, [r3, #24]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d108      	bne.n	8000dba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e007      	b.n	8000dca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7e5b      	ldrb	r3, [r3, #25]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d108      	bne.n	8000de4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7e9b      	ldrb	r3, [r3, #26]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d108      	bne.n	8000e0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0220 	orr.w	r2, r2, #32
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e007      	b.n	8000e1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0220 	bic.w	r2, r2, #32
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7edb      	ldrb	r3, [r3, #27]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0210 	bic.w	r2, r2, #16
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e007      	b.n	8000e48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0210 	orr.w	r2, r2, #16
 8000e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7f1b      	ldrb	r3, [r3, #28]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d108      	bne.n	8000e62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0208 	orr.w	r2, r2, #8
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e007      	b.n	8000e72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0208 	bic.w	r2, r2, #8
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7f5b      	ldrb	r3, [r3, #29]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0204 	orr.w	r2, r2, #4
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e007      	b.n	8000e9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0204 	bic.w	r2, r2, #4
 8000e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	ea42 0103 	orr.w	r1, r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef4:	7cfb      	ldrb	r3, [r7, #19]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d003      	beq.n	8000f02 <HAL_CAN_ConfigFilter+0x26>
 8000efa:	7cfb      	ldrb	r3, [r7, #19]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	f040 80be 	bne.w	800107e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f02:	4b65      	ldr	r3, [pc, #404]	@ (8001098 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f04:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f0c:	f043 0201 	orr.w	r2, r3, #1
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f1c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	431a      	orrs	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	2201      	movs	r2, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	401a      	ands	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d123      	bne.n	8000fac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3248      	adds	r2, #72	@ 0x48
 8000f8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fa2:	6979      	ldr	r1, [r7, #20]
 8000fa4:	3348      	adds	r3, #72	@ 0x48
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d122      	bne.n	8000ffa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3248      	adds	r2, #72	@ 0x48
 8000fda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ff0:	6979      	ldr	r1, [r7, #20]
 8000ff2:	3348      	adds	r3, #72	@ 0x48
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d109      	bne.n	8001016 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43db      	mvns	r3, r3
 800100c:	401a      	ands	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001014:	e007      	b.n	8001026 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	431a      	orrs	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	401a      	ands	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001040:	e007      	b.n	8001052 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	431a      	orrs	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d107      	bne.n	800106a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	431a      	orrs	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001070:	f023 0201 	bic.w	r2, r3, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e006      	b.n	800108c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001082:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
  }
}
 800108c:	4618      	mov	r0, r3
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40006400 	.word	0x40006400

0800109c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d12e      	bne.n	800110e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2202      	movs	r2, #2
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010c8:	f7ff fe00 	bl	8000ccc <HAL_GetTick>
 80010cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010ce:	e012      	b.n	80010f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d0:	f7ff fdfc 	bl	8000ccc <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b0a      	cmp	r3, #10
 80010dc:	d90b      	bls.n	80010f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2205      	movs	r2, #5
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e012      	b.n	800111c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1e5      	bne.n	80010d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e006      	b.n	800111c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001138:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d003      	beq.n	8001148 <HAL_CAN_GetRxMessage+0x24>
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b02      	cmp	r3, #2
 8001144:	f040 8103 	bne.w	800134e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10e      	bne.n	800116c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d116      	bne.n	800118a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001160:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0f7      	b.n	800135c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d107      	bne.n	800118a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0e8      	b.n	800135c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	331b      	adds	r3, #27
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0204 	and.w	r2, r3, #4
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10c      	bne.n	80011c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	331b      	adds	r3, #27
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	0d5b      	lsrs	r3, r3, #21
 80011b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e00b      	b.n	80011da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	331b      	adds	r3, #27
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	4413      	add	r3, r2
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	08db      	lsrs	r3, r3, #3
 80011d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	331b      	adds	r3, #27
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0202 	and.w	r2, r3, #2
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	331b      	adds	r3, #27
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	3304      	adds	r3, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2208      	movs	r2, #8
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	e00b      	b.n	8001228 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	331b      	adds	r3, #27
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	4413      	add	r3, r2
 800121c:	3304      	adds	r3, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 020f 	and.w	r2, r3, #15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	331b      	adds	r3, #27
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	3304      	adds	r3, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	b2da      	uxtb	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	331b      	adds	r3, #27
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	3304      	adds	r3, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0c1b      	lsrs	r3, r3, #16
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4413      	add	r3, r2
 8001262:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	4413      	add	r3, r2
 8001278:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0a1a      	lsrs	r2, r3, #8
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	4413      	add	r3, r2
 8001292:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0c1a      	lsrs	r2, r3, #16
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3302      	adds	r3, #2
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	0e1a      	lsrs	r2, r3, #24
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3303      	adds	r3, #3
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	3304      	adds	r3, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	0a1a      	lsrs	r2, r3, #8
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	3305      	adds	r3, #5
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0c1a      	lsrs	r2, r3, #16
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3306      	adds	r3, #6
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0e1a      	lsrs	r2, r3, #24
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3307      	adds	r3, #7
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d108      	bne.n	800133a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0220 	orr.w	r2, r2, #32
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	e007      	b.n	800134a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0220 	orr.w	r2, r2, #32
 8001348:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e006      	b.n	800135c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
  }
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001378:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d002      	beq.n	8001386 <HAL_CAN_ActivateNotification+0x1e>
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d109      	bne.n	800139a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6959      	ldr	r1, [r3, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e006      	b.n	80013a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
  }
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d07c      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d023      	beq.n	800144c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f983 	bl	8001722 <HAL_CAN_TxMailbox0CompleteCallback>
 800141c:	e016      	b.n	800144c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001430:	e00c      	b.n	800144c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
 8001444:	e002      	b.n	800144c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f989 	bl	800175e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d024      	beq.n	80014a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800145e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f963 	bl	8001736 <HAL_CAN_TxMailbox1CompleteCallback>
 8001470:	e016      	b.n	80014a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
 8001484:	e00c      	b.n	80014a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
 8001498:	e002      	b.n	80014a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f969 	bl	8001772 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d024      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f943 	bl	800174a <HAL_CAN_TxMailbox2CompleteCallback>
 80014c4:	e016      	b.n	80014f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d8:	e00c      	b.n	80014f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ec:	e002      	b.n	80014f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f949 	bl	8001786 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2210      	movs	r2, #16
 8001516:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2208      	movs	r2, #8
 8001532:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f930 	bl	800179a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d009      	beq.n	8001558 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff f80c 	bl	8000570 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00c      	beq.n	800157c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2210      	movs	r2, #16
 800157a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2208      	movs	r2, #8
 8001596:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f912 	bl	80017c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d009      	beq.n	80015bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8f9 	bl	80017ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2210      	movs	r2, #16
 80015d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8fc 	bl	80017d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00b      	beq.n	8001600 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2208      	movs	r2, #8
 80015f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8f5 	bl	80017ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d07b      	beq.n	8001702 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d072      	beq.n	80016fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800166e:	2b00      	cmp	r3, #0
 8001670:	d043      	beq.n	80016fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001678:	2b00      	cmp	r3, #0
 800167a:	d03e      	beq.n	80016fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001682:	2b60      	cmp	r3, #96	@ 0x60
 8001684:	d02b      	beq.n	80016de <HAL_CAN_IRQHandler+0x32a>
 8001686:	2b60      	cmp	r3, #96	@ 0x60
 8001688:	d82e      	bhi.n	80016e8 <HAL_CAN_IRQHandler+0x334>
 800168a:	2b50      	cmp	r3, #80	@ 0x50
 800168c:	d022      	beq.n	80016d4 <HAL_CAN_IRQHandler+0x320>
 800168e:	2b50      	cmp	r3, #80	@ 0x50
 8001690:	d82a      	bhi.n	80016e8 <HAL_CAN_IRQHandler+0x334>
 8001692:	2b40      	cmp	r3, #64	@ 0x40
 8001694:	d019      	beq.n	80016ca <HAL_CAN_IRQHandler+0x316>
 8001696:	2b40      	cmp	r3, #64	@ 0x40
 8001698:	d826      	bhi.n	80016e8 <HAL_CAN_IRQHandler+0x334>
 800169a:	2b30      	cmp	r3, #48	@ 0x30
 800169c:	d010      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x30c>
 800169e:	2b30      	cmp	r3, #48	@ 0x30
 80016a0:	d822      	bhi.n	80016e8 <HAL_CAN_IRQHandler+0x334>
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d002      	beq.n	80016ac <HAL_CAN_IRQHandler+0x2f8>
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	d005      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80016aa:	e01d      	b.n	80016e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016b4:	e019      	b.n	80016ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016be:	e014      	b.n	80016ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	f043 0320 	orr.w	r3, r3, #32
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016c8:	e00f      	b.n	80016ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016d2:	e00a      	b.n	80016ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016dc:	e005      	b.n	80016ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016e6:	e000      	b.n	80016ea <HAL_CAN_IRQHandler+0x336>
            break;
 80016e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80016f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2204      	movs	r2, #4
 8001700:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f872 	bl	80017fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	@ (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	@ (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	@ (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	@ 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff29 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff3e 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff31 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	@ 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e16b      	b.n	8001d2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 815a 	bne.w	8001d26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d005      	beq.n	8001a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d130      	bne.n	8001aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0201 	and.w	r2, r3, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d017      	beq.n	8001b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80b4 	beq.w	8001d26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b60      	ldr	r3, [pc, #384]	@ (8001d44 <HAL_GPIO_Init+0x30c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8001d44 <HAL_GPIO_Init+0x30c>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bce:	4b5d      	ldr	r3, [pc, #372]	@ (8001d44 <HAL_GPIO_Init+0x30c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bda:	4a5b      	ldr	r2, [pc, #364]	@ (8001d48 <HAL_GPIO_Init+0x310>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a52      	ldr	r2, [pc, #328]	@ (8001d4c <HAL_GPIO_Init+0x314>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02b      	beq.n	8001c5e <HAL_GPIO_Init+0x226>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a51      	ldr	r2, [pc, #324]	@ (8001d50 <HAL_GPIO_Init+0x318>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d025      	beq.n	8001c5a <HAL_GPIO_Init+0x222>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a50      	ldr	r2, [pc, #320]	@ (8001d54 <HAL_GPIO_Init+0x31c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01f      	beq.n	8001c56 <HAL_GPIO_Init+0x21e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	@ (8001d58 <HAL_GPIO_Init+0x320>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x21a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4e      	ldr	r2, [pc, #312]	@ (8001d5c <HAL_GPIO_Init+0x324>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x216>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4d      	ldr	r2, [pc, #308]	@ (8001d60 <HAL_GPIO_Init+0x328>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x212>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	@ (8001d64 <HAL_GPIO_Init+0x32c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	@ (8001d68 <HAL_GPIO_Init+0x330>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x20a>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00e      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4935      	ldr	r1, [pc, #212]	@ (8001d48 <HAL_GPIO_Init+0x310>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca2:	4a32      	ldr	r2, [pc, #200]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca8:	4b30      	ldr	r3, [pc, #192]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ccc:	4a27      	ldr	r2, [pc, #156]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d20:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f ae90 	bls.w	8001a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3724      	adds	r7, #36	@ 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40013800 	.word	0x40013800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40021400 	.word	0x40021400
 8001d64:	40021800 	.word	0x40021800
 8001d68:	40021c00 	.word	0x40021c00
 8001d6c:	40013c00 	.word	0x40013c00

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e267      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d075      	beq.n	8001eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dc2:	4b88      	ldr	r3, [pc, #544]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d00c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dce:	4b85      	ldr	r3, [pc, #532]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d112      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dda:	4b82      	ldr	r3, [pc, #520]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001de6:	d10b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d05b      	beq.n	8001eac <HAL_RCC_OscConfig+0x108>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d157      	bne.n	8001eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e242      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e08:	d106      	bne.n	8001e18 <HAL_RCC_OscConfig+0x74>
 8001e0a:	4b76      	ldr	r3, [pc, #472]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a75      	ldr	r2, [pc, #468]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e01d      	b.n	8001e54 <HAL_RCC_OscConfig+0xb0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x98>
 8001e22:	4b70      	ldr	r3, [pc, #448]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a6f      	ldr	r2, [pc, #444]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a6c      	ldr	r2, [pc, #432]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0xb0>
 8001e3c:	4b69      	ldr	r3, [pc, #420]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a68      	ldr	r2, [pc, #416]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b66      	ldr	r3, [pc, #408]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a65      	ldr	r2, [pc, #404]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe ff36 	bl	8000ccc <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7fe ff32 	bl	8000ccc <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	@ 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e207      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0xc0>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe ff22 	bl	8000ccc <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7fe ff1e 	bl	8000ccc <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	@ 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1f3      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	4b51      	ldr	r3, [pc, #324]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0xe8>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d063      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001eba:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec6:	4b47      	ldr	r3, [pc, #284]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d11c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed2:	4b44      	ldr	r3, [pc, #272]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d116      	bne.n	8001f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ede:	4b41      	ldr	r3, [pc, #260]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x152>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e1c7      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4937      	ldr	r1, [pc, #220]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	e03a      	b.n	8001f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f14:	4b34      	ldr	r3, [pc, #208]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7fe fed7 	bl	8000ccc <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f22:	f7fe fed3 	bl	8000ccc <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e1a8      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4925      	ldr	r1, [pc, #148]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
 8001f54:	e015      	b.n	8001f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f56:	4b24      	ldr	r3, [pc, #144]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7fe feb6 	bl	8000ccc <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f64:	f7fe feb2 	bl	8000ccc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e187      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d036      	beq.n	8001ffc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d016      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f96:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <HAL_RCC_OscConfig+0x248>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7fe fe96 	bl	8000ccc <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa4:	f7fe fe92 	bl	8000ccc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e167      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x200>
 8001fc2:	e01b      	b.n	8001ffc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_RCC_OscConfig+0x248>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe fe7f 	bl	8000ccc <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	e00e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd2:	f7fe fe7b 	bl	8000ccc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d907      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e150      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	42470000 	.word	0x42470000
 8001fec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	4b88      	ldr	r3, [pc, #544]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ea      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 8097 	beq.w	8002138 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200e:	4b81      	ldr	r3, [pc, #516]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10f      	bne.n	800203a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b7d      	ldr	r3, [pc, #500]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	4a7c      	ldr	r2, [pc, #496]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	@ 0x40
 800202a:	4b7a      	ldr	r3, [pc, #488]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b77      	ldr	r3, [pc, #476]	@ (8002218 <HAL_RCC_OscConfig+0x474>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b74      	ldr	r3, [pc, #464]	@ (8002218 <HAL_RCC_OscConfig+0x474>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a73      	ldr	r2, [pc, #460]	@ (8002218 <HAL_RCC_OscConfig+0x474>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7fe fe3b 	bl	8000ccc <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7fe fe37 	bl	8000ccc <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e10c      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b6a      	ldr	r3, [pc, #424]	@ (8002218 <HAL_RCC_OscConfig+0x474>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x2ea>
 8002080:	4b64      	ldr	r3, [pc, #400]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	4a63      	ldr	r2, [pc, #396]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6713      	str	r3, [r2, #112]	@ 0x70
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x324>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x30c>
 8002096:	4b5f      	ldr	r3, [pc, #380]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	4a5e      	ldr	r2, [pc, #376]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0x324>
 80020b0:	4b58      	ldr	r3, [pc, #352]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b4:	4a57      	ldr	r2, [pc, #348]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80020bc:	4b55      	ldr	r3, [pc, #340]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c0:	4a54      	ldr	r2, [pc, #336]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80020c2:	f023 0304 	bic.w	r3, r3, #4
 80020c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe fdfc 	bl	8000ccc <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fdf8 	bl	8000ccc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e0cb      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	4b49      	ldr	r3, [pc, #292]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0ee      	beq.n	80020d8 <HAL_RCC_OscConfig+0x334>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fc:	f7fe fde6 	bl	8000ccc <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	e00a      	b.n	800211a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7fe fde2 	bl	8000ccc <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0b5      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211a:	4b3e      	ldr	r3, [pc, #248]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ee      	bne.n	8002104 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212c:	4b39      	ldr	r3, [pc, #228]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	4a38      	ldr	r2, [pc, #224]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8002132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002136:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a1 	beq.w	8002284 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002142:	4b34      	ldr	r3, [pc, #208]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b08      	cmp	r3, #8
 800214c:	d05c      	beq.n	8002208 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d141      	bne.n	80021da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b31      	ldr	r3, [pc, #196]	@ (800221c <HAL_RCC_OscConfig+0x478>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fdb6 	bl	8000ccc <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fdb2 	bl	8000ccc <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e087      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	4b27      	ldr	r3, [pc, #156]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	3b01      	subs	r3, #1
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	061b      	lsls	r3, r3, #24
 80021a6:	491b      	ldr	r1, [pc, #108]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <HAL_RCC_OscConfig+0x478>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fd8b 	bl	8000ccc <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe fd87 	bl	8000ccc <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e05c      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x416>
 80021d8:	e054      	b.n	8002284 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b10      	ldr	r3, [pc, #64]	@ (800221c <HAL_RCC_OscConfig+0x478>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fd74 	bl	8000ccc <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fd70 	bl	8000ccc <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e045      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_RCC_OscConfig+0x470>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x444>
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d107      	bne.n	8002220 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e038      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
 8002214:	40023800 	.word	0x40023800
 8002218:	40007000 	.word	0x40007000
 800221c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002220:	4b1b      	ldr	r3, [pc, #108]	@ (8002290 <HAL_RCC_OscConfig+0x4ec>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d028      	beq.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d121      	bne.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d11a      	bne.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002250:	4013      	ands	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002258:	4293      	cmp	r3, r2
 800225a:	d111      	bne.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	3b01      	subs	r3, #1
 800226a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0cc      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a8:	4b68      	ldr	r3, [pc, #416]	@ (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d90c      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b65      	ldr	r3, [pc, #404]	@ (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b63      	ldr	r3, [pc, #396]	@ (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b8      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a58      	ldr	r2, [pc, #352]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800230a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b50      	ldr	r3, [pc, #320]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	494d      	ldr	r1, [pc, #308]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d044      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d119      	bne.n	8002372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d003      	beq.n	8002352 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234e:	2b03      	cmp	r3, #3
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002352:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e06f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e067      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002372:	4b37      	ldr	r3, [pc, #220]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f023 0203 	bic.w	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4934      	ldr	r1, [pc, #208]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002384:	f7fe fca2 	bl	8000ccc <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238c:	f7fe fc9e 	bl	8000ccc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e04f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 020c 	and.w	r2, r3, #12
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1eb      	bne.n	800238c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b4:	4b25      	ldr	r3, [pc, #148]	@ (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d20c      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b22      	ldr	r3, [pc, #136]	@ (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e032      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4916      	ldr	r1, [pc, #88]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	490e      	ldr	r1, [pc, #56]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241a:	f000 f821 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	490a      	ldr	r1, [pc, #40]	@ (8002454 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a09      	ldr	r2, [pc, #36]	@ (8002458 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fc02 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00
 8002450:	40023800 	.word	0x40023800
 8002454:	0800388c 	.word	0x0800388c
 8002458:	20000000 	.word	0x20000000
 800245c:	20000004 	.word	0x20000004

08002460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002464:	b094      	sub	sp, #80	@ 0x50
 8002466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002478:	4b79      	ldr	r3, [pc, #484]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x200>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d00d      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002484:	2b08      	cmp	r3, #8
 8002486:	f200 80e1 	bhi.w	800264c <HAL_RCC_GetSysClockFreq+0x1ec>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x34>
 800248e:	2b04      	cmp	r3, #4
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x3a>
 8002492:	e0db      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002494:	4b73      	ldr	r3, [pc, #460]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x204>)
 8002496:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002498:	e0db      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800249a:	4b73      	ldr	r3, [pc, #460]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x208>)
 800249c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800249e:	e0d8      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d063      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	2200      	movs	r2, #0
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ca:	2300      	movs	r3, #0
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024d2:	4622      	mov	r2, r4
 80024d4:	462b      	mov	r3, r5
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	0159      	lsls	r1, r3, #5
 80024e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e4:	0150      	lsls	r0, r2, #5
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4621      	mov	r1, r4
 80024ec:	1a51      	subs	r1, r2, r1
 80024ee:	6139      	str	r1, [r7, #16]
 80024f0:	4629      	mov	r1, r5
 80024f2:	eb63 0301 	sbc.w	r3, r3, r1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002504:	4659      	mov	r1, fp
 8002506:	018b      	lsls	r3, r1, #6
 8002508:	4651      	mov	r1, sl
 800250a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800250e:	4651      	mov	r1, sl
 8002510:	018a      	lsls	r2, r1, #6
 8002512:	4651      	mov	r1, sl
 8002514:	ebb2 0801 	subs.w	r8, r2, r1
 8002518:	4659      	mov	r1, fp
 800251a:	eb63 0901 	sbc.w	r9, r3, r1
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800252a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800252e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002532:	4690      	mov	r8, r2
 8002534:	4699      	mov	r9, r3
 8002536:	4623      	mov	r3, r4
 8002538:	eb18 0303 	adds.w	r3, r8, r3
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	462b      	mov	r3, r5
 8002540:	eb49 0303 	adc.w	r3, r9, r3
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002552:	4629      	mov	r1, r5
 8002554:	024b      	lsls	r3, r1, #9
 8002556:	4621      	mov	r1, r4
 8002558:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800255c:	4621      	mov	r1, r4
 800255e:	024a      	lsls	r2, r1, #9
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002566:	2200      	movs	r2, #0
 8002568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800256a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800256c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002570:	f7fd fe86 	bl	8000280 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4613      	mov	r3, r2
 800257a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800257c:	e058      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x200>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	099b      	lsrs	r3, r3, #6
 8002584:	2200      	movs	r2, #0
 8002586:	4618      	mov	r0, r3
 8002588:	4611      	mov	r1, r2
 800258a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
 8002594:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002598:	4642      	mov	r2, r8
 800259a:	464b      	mov	r3, r9
 800259c:	f04f 0000 	mov.w	r0, #0
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	0159      	lsls	r1, r3, #5
 80025a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025aa:	0150      	lsls	r0, r2, #5
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4641      	mov	r1, r8
 80025b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80025b6:	4649      	mov	r1, r9
 80025b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025d0:	ebb2 040a 	subs.w	r4, r2, sl
 80025d4:	eb63 050b 	sbc.w	r5, r3, fp
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	00eb      	lsls	r3, r5, #3
 80025e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e6:	00e2      	lsls	r2, r4, #3
 80025e8:	4614      	mov	r4, r2
 80025ea:	461d      	mov	r5, r3
 80025ec:	4643      	mov	r3, r8
 80025ee:	18e3      	adds	r3, r4, r3
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	464b      	mov	r3, r9
 80025f4:	eb45 0303 	adc.w	r3, r5, r3
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002606:	4629      	mov	r1, r5
 8002608:	028b      	lsls	r3, r1, #10
 800260a:	4621      	mov	r1, r4
 800260c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002610:	4621      	mov	r1, r4
 8002612:	028a      	lsls	r2, r1, #10
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800261a:	2200      	movs	r2, #0
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	61fa      	str	r2, [r7, #28]
 8002620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002624:	f7fd fe2c 	bl	8000280 <__aeabi_uldivmod>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4613      	mov	r3, r2
 800262e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x200>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002640:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x204>)
 800264e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002654:	4618      	mov	r0, r3
 8002656:	3750      	adds	r7, #80	@ 0x50
 8002658:	46bd      	mov	sp, r7
 800265a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	00f42400 	.word	0x00f42400
 8002668:	007a1200 	.word	0x007a1200

0800266c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002670:	4b03      	ldr	r3, [pc, #12]	@ (8002680 <HAL_RCC_GetHCLKFreq+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000000 	.word	0x20000000

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002688:	f7ff fff0 	bl	800266c <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	0a9b      	lsrs	r3, r3, #10
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4903      	ldr	r1, [pc, #12]	@ (80026a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40023800 	.word	0x40023800
 80026a8:	0800389c 	.word	0x0800389c

080026ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026b0:	f7ff ffdc 	bl	800266c <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0b5b      	lsrs	r3, r3, #13
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	@ (80026d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	0800389c 	.word	0x0800389c

080026d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e042      	b.n	800276c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe f98c 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	@ 0x24
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f973 	bl	8002a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800272c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800273c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800274c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	@ 0x28
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	d175      	bne.n	8002880 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_UART_Transmit+0x2c>
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e06e      	b.n	8002882 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2221      	movs	r2, #33	@ 0x21
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b2:	f7fe fa8b 	bl	8000ccc <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027cc:	d108      	bne.n	80027e0 <HAL_UART_Transmit+0x6c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e003      	b.n	80027e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027e8:	e02e      	b.n	8002848 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f848 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e03a      	b.n	8002882 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10b      	bne.n	800282a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	3302      	adds	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	e007      	b.n	800283a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3301      	adds	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1cb      	bne.n	80027ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2140      	movs	r1, #64	@ 0x40
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f814 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e006      	b.n	8002882 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289a:	e03b      	b.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028a2:	d037      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a4:	f7fe fa12 	bl	8000ccc <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	6a3a      	ldr	r2, [r7, #32]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d302      	bcc.n	80028ba <UART_WaitOnFlagUntilTimeout+0x30>
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e03a      	b.n	8002934 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b80      	cmp	r3, #128	@ 0x80
 80028d0:	d020      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b40      	cmp	r3, #64	@ 0x40
 80028d6:	d01d      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d116      	bne.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f81d 	bl	800293c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2208      	movs	r2, #8
 8002906:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e00f      	b.n	8002934 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4013      	ands	r3, r2
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	429a      	cmp	r2, r3
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	429a      	cmp	r2, r3
 8002930:	d0b4      	beq.n	800289c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800293c:	b480      	push	{r7}
 800293e:	b095      	sub	sp, #84	@ 0x54
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800295a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002964:	643a      	str	r2, [r7, #64]	@ 0x40
 8002966:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002968:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800296a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800296c:	e841 2300 	strex	r3, r2, [r1]
 8002970:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e5      	bne.n	8002944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3314      	adds	r3, #20
 800297e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	e853 3f00 	ldrex	r3, [r3]
 8002986:	61fb      	str	r3, [r7, #28]
   return(result);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3314      	adds	r3, #20
 8002996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002998:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800299a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800299e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e5      	bne.n	8002978 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d119      	bne.n	80029e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f023 0310 	bic.w	r3, r3, #16
 80029ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029d4:	61ba      	str	r2, [r7, #24]
 80029d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	6979      	ldr	r1, [r7, #20]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	e841 2300 	strex	r3, r2, [r1]
 80029e0:	613b      	str	r3, [r7, #16]
   return(result);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e5      	bne.n	80029b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029f6:	bf00      	nop
 80029f8:	3754      	adds	r7, #84	@ 0x54
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a08:	b0c0      	sub	sp, #256	@ 0x100
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a20:	68d9      	ldr	r1, [r3, #12]
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	ea40 0301 	orr.w	r3, r0, r1
 8002a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a5c:	f021 010c 	bic.w	r1, r1, #12
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7e:	6999      	ldr	r1, [r3, #24]
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	ea40 0301 	orr.w	r3, r0, r1
 8002a8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd0 <UART_SetConfig+0x2cc>)
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d005      	beq.n	8002aa4 <UART_SetConfig+0xa0>
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd4 <UART_SetConfig+0x2d0>)
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d104      	bne.n	8002aae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aa4:	f7ff fe02 	bl	80026ac <HAL_RCC_GetPCLK2Freq>
 8002aa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002aac:	e003      	b.n	8002ab6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aae:	f7ff fde9 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8002ab2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ac0:	f040 810c 	bne.w	8002cdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ace:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ad2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	462b      	mov	r3, r5
 8002ada:	1891      	adds	r1, r2, r2
 8002adc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ade:	415b      	adcs	r3, r3
 8002ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ae2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	eb12 0801 	adds.w	r8, r2, r1
 8002aec:	4629      	mov	r1, r5
 8002aee:	eb43 0901 	adc.w	r9, r3, r1
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b06:	4690      	mov	r8, r2
 8002b08:	4699      	mov	r9, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	eb18 0303 	adds.w	r3, r8, r3
 8002b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b14:	462b      	mov	r3, r5
 8002b16:	eb49 0303 	adc.w	r3, r9, r3
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b32:	460b      	mov	r3, r1
 8002b34:	18db      	adds	r3, r3, r3
 8002b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b38:	4613      	mov	r3, r2
 8002b3a:	eb42 0303 	adc.w	r3, r2, r3
 8002b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b48:	f7fd fb9a 	bl	8000280 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4b61      	ldr	r3, [pc, #388]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002b52:	fba3 2302 	umull	r2, r3, r3, r2
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	011c      	lsls	r4, r3, #4
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	1891      	adds	r1, r2, r2
 8002b72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b74:	415b      	adcs	r3, r3
 8002b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b82:	4649      	mov	r1, r9
 8002b84:	eb43 0b01 	adc.w	fp, r3, r1
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b9c:	4692      	mov	sl, r2
 8002b9e:	469b      	mov	fp, r3
 8002ba0:	4643      	mov	r3, r8
 8002ba2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002baa:	464b      	mov	r3, r9
 8002bac:	eb4b 0303 	adc.w	r3, fp, r3
 8002bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	18db      	adds	r3, r3, r3
 8002bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bce:	4613      	mov	r3, r2
 8002bd0:	eb42 0303 	adc.w	r3, r2, r3
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bde:	f7fd fb4f 	bl	8000280 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002bea:	fba3 2301 	umull	r2, r3, r3, r1
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2264      	movs	r2, #100	@ 0x64
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	1acb      	subs	r3, r1, r3
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bfe:	4b36      	ldr	r3, [pc, #216]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002c00:	fba3 2302 	umull	r2, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c0c:	441c      	add	r4, r3
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c30:	4641      	mov	r1, r8
 8002c32:	1851      	adds	r1, r2, r1
 8002c34:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c36:	4649      	mov	r1, r9
 8002c38:	414b      	adcs	r3, r1
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c48:	4659      	mov	r1, fp
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c52:	4651      	mov	r1, sl
 8002c54:	00ca      	lsls	r2, r1, #3
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c64:	464b      	mov	r3, r9
 8002c66:	460a      	mov	r2, r1
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c84:	460b      	mov	r3, r1
 8002c86:	18db      	adds	r3, r3, r3
 8002c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c9a:	f7fd faf1 	bl	8000280 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	2164      	movs	r1, #100	@ 0x64
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3332      	adds	r3, #50	@ 0x32
 8002cb6:	4a08      	ldr	r2, [pc, #32]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	f003 0207 	and.w	r2, r3, #7
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4422      	add	r2, r4
 8002cca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ccc:	e106      	b.n	8002edc <UART_SetConfig+0x4d8>
 8002cce:	bf00      	nop
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ce6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002cea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002cee:	4642      	mov	r2, r8
 8002cf0:	464b      	mov	r3, r9
 8002cf2:	1891      	adds	r1, r2, r2
 8002cf4:	6239      	str	r1, [r7, #32]
 8002cf6:	415b      	adcs	r3, r3
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cfe:	4641      	mov	r1, r8
 8002d00:	1854      	adds	r4, r2, r1
 8002d02:	4649      	mov	r1, r9
 8002d04:	eb43 0501 	adc.w	r5, r3, r1
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	00eb      	lsls	r3, r5, #3
 8002d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d16:	00e2      	lsls	r2, r4, #3
 8002d18:	4614      	mov	r4, r2
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	4643      	mov	r3, r8
 8002d1e:	18e3      	adds	r3, r4, r3
 8002d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d24:	464b      	mov	r3, r9
 8002d26:	eb45 0303 	adc.w	r3, r5, r3
 8002d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	008b      	lsls	r3, r1, #2
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d54:	4621      	mov	r1, r4
 8002d56:	008a      	lsls	r2, r1, #2
 8002d58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d5c:	f7fd fa90 	bl	8000280 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4b60      	ldr	r3, [pc, #384]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002d66:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	011c      	lsls	r4, r3, #4
 8002d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d80:	4642      	mov	r2, r8
 8002d82:	464b      	mov	r3, r9
 8002d84:	1891      	adds	r1, r2, r2
 8002d86:	61b9      	str	r1, [r7, #24]
 8002d88:	415b      	adcs	r3, r3
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d90:	4641      	mov	r1, r8
 8002d92:	1851      	adds	r1, r2, r1
 8002d94:	6139      	str	r1, [r7, #16]
 8002d96:	4649      	mov	r1, r9
 8002d98:	414b      	adcs	r3, r1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002da8:	4659      	mov	r1, fp
 8002daa:	00cb      	lsls	r3, r1, #3
 8002dac:	4651      	mov	r1, sl
 8002dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db2:	4651      	mov	r1, sl
 8002db4:	00ca      	lsls	r2, r1, #3
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	eb42 0303 	adc.w	r3, r2, r3
 8002dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002de8:	4649      	mov	r1, r9
 8002dea:	008b      	lsls	r3, r1, #2
 8002dec:	4641      	mov	r1, r8
 8002dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df2:	4641      	mov	r1, r8
 8002df4:	008a      	lsls	r2, r1, #2
 8002df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002dfa:	f7fd fa41 	bl	8000280 <__aeabi_uldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	4b38      	ldr	r3, [pc, #224]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002e06:	fba3 2301 	umull	r2, r3, r3, r1
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2264      	movs	r2, #100	@ 0x64
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	1acb      	subs	r3, r1, r3
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	3332      	adds	r3, #50	@ 0x32
 8002e18:	4a33      	ldr	r2, [pc, #204]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e24:	441c      	add	r4, r3
 8002e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e44:	4641      	mov	r1, r8
 8002e46:	1851      	adds	r1, r2, r1
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	414b      	adcs	r3, r1
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	00cb      	lsls	r3, r1, #3
 8002e60:	4651      	mov	r1, sl
 8002e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e66:	4651      	mov	r1, sl
 8002e68:	00ca      	lsls	r2, r1, #3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4642      	mov	r2, r8
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e76:	464b      	mov	r3, r9
 8002e78:	460a      	mov	r2, r1
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e98:	4649      	mov	r1, r9
 8002e9a:	008b      	lsls	r3, r1, #2
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	008a      	lsls	r2, r1, #2
 8002ea6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002eaa:	f7fd f9e9 	bl	8000280 <__aeabi_uldivmod>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	2164      	movs	r1, #100	@ 0x64
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	3332      	adds	r3, #50	@ 0x32
 8002ec6:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	f003 020f 	and.w	r2, r3, #15
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4422      	add	r2, r4
 8002eda:	609a      	str	r2, [r3, #8]
}
 8002edc:	bf00      	nop
 8002ede:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee8:	51eb851f 	.word	0x51eb851f

08002eec <sniprintf>:
 8002eec:	b40c      	push	{r2, r3}
 8002eee:	b530      	push	{r4, r5, lr}
 8002ef0:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <sniprintf+0x64>)
 8002ef2:	1e0c      	subs	r4, r1, #0
 8002ef4:	681d      	ldr	r5, [r3, #0]
 8002ef6:	b09d      	sub	sp, #116	@ 0x74
 8002ef8:	da08      	bge.n	8002f0c <sniprintf+0x20>
 8002efa:	238b      	movs	r3, #139	@ 0x8b
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f02:	b01d      	add	sp, #116	@ 0x74
 8002f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f08:	b002      	add	sp, #8
 8002f0a:	4770      	bx	lr
 8002f0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002f14:	bf14      	ite	ne
 8002f16:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8002f1a:	4623      	moveq	r3, r4
 8002f1c:	9304      	str	r3, [sp, #16]
 8002f1e:	9307      	str	r3, [sp, #28]
 8002f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f24:	9002      	str	r0, [sp, #8]
 8002f26:	9006      	str	r0, [sp, #24]
 8002f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002f2c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002f2e:	ab21      	add	r3, sp, #132	@ 0x84
 8002f30:	a902      	add	r1, sp, #8
 8002f32:	4628      	mov	r0, r5
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	f000 f995 	bl	8003264 <_svfiprintf_r>
 8002f3a:	1c43      	adds	r3, r0, #1
 8002f3c:	bfbc      	itt	lt
 8002f3e:	238b      	movlt	r3, #139	@ 0x8b
 8002f40:	602b      	strlt	r3, [r5, #0]
 8002f42:	2c00      	cmp	r4, #0
 8002f44:	d0dd      	beq.n	8002f02 <sniprintf+0x16>
 8002f46:	9b02      	ldr	r3, [sp, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e7d9      	b.n	8002f02 <sniprintf+0x16>
 8002f4e:	bf00      	nop
 8002f50:	2000000c 	.word	0x2000000c

08002f54 <memset>:
 8002f54:	4402      	add	r2, r0
 8002f56:	4603      	mov	r3, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memset+0xa>
 8002f5c:	4770      	bx	lr
 8002f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f62:	e7f9      	b.n	8002f58 <memset+0x4>

08002f64 <__errno>:
 8002f64:	4b01      	ldr	r3, [pc, #4]	@ (8002f6c <__errno+0x8>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	2000000c 	.word	0x2000000c

08002f70 <__libc_init_array>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	4d0d      	ldr	r5, [pc, #52]	@ (8002fa8 <__libc_init_array+0x38>)
 8002f74:	4c0d      	ldr	r4, [pc, #52]	@ (8002fac <__libc_init_array+0x3c>)
 8002f76:	1b64      	subs	r4, r4, r5
 8002f78:	10a4      	asrs	r4, r4, #2
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	42a6      	cmp	r6, r4
 8002f7e:	d109      	bne.n	8002f94 <__libc_init_array+0x24>
 8002f80:	4d0b      	ldr	r5, [pc, #44]	@ (8002fb0 <__libc_init_array+0x40>)
 8002f82:	4c0c      	ldr	r4, [pc, #48]	@ (8002fb4 <__libc_init_array+0x44>)
 8002f84:	f000 fc66 	bl	8003854 <_init>
 8002f88:	1b64      	subs	r4, r4, r5
 8002f8a:	10a4      	asrs	r4, r4, #2
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	42a6      	cmp	r6, r4
 8002f90:	d105      	bne.n	8002f9e <__libc_init_array+0x2e>
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f98:	4798      	blx	r3
 8002f9a:	3601      	adds	r6, #1
 8002f9c:	e7ee      	b.n	8002f7c <__libc_init_array+0xc>
 8002f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa2:	4798      	blx	r3
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	e7f2      	b.n	8002f8e <__libc_init_array+0x1e>
 8002fa8:	080038e0 	.word	0x080038e0
 8002fac:	080038e0 	.word	0x080038e0
 8002fb0:	080038e0 	.word	0x080038e0
 8002fb4:	080038e4 	.word	0x080038e4

08002fb8 <__retarget_lock_acquire_recursive>:
 8002fb8:	4770      	bx	lr

08002fba <__retarget_lock_release_recursive>:
 8002fba:	4770      	bx	lr

08002fbc <_free_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4605      	mov	r5, r0
 8002fc0:	2900      	cmp	r1, #0
 8002fc2:	d041      	beq.n	8003048 <_free_r+0x8c>
 8002fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc8:	1f0c      	subs	r4, r1, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bfb8      	it	lt
 8002fce:	18e4      	addlt	r4, r4, r3
 8002fd0:	f000 f8e0 	bl	8003194 <__malloc_lock>
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <_free_r+0x90>)
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	b933      	cbnz	r3, 8002fe8 <_free_r+0x2c>
 8002fda:	6063      	str	r3, [r4, #4]
 8002fdc:	6014      	str	r4, [r2, #0]
 8002fde:	4628      	mov	r0, r5
 8002fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fe4:	f000 b8dc 	b.w	80031a0 <__malloc_unlock>
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	d908      	bls.n	8002ffe <_free_r+0x42>
 8002fec:	6820      	ldr	r0, [r4, #0]
 8002fee:	1821      	adds	r1, r4, r0
 8002ff0:	428b      	cmp	r3, r1
 8002ff2:	bf01      	itttt	eq
 8002ff4:	6819      	ldreq	r1, [r3, #0]
 8002ff6:	685b      	ldreq	r3, [r3, #4]
 8002ff8:	1809      	addeq	r1, r1, r0
 8002ffa:	6021      	streq	r1, [r4, #0]
 8002ffc:	e7ed      	b.n	8002fda <_free_r+0x1e>
 8002ffe:	461a      	mov	r2, r3
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	b10b      	cbz	r3, 8003008 <_free_r+0x4c>
 8003004:	42a3      	cmp	r3, r4
 8003006:	d9fa      	bls.n	8002ffe <_free_r+0x42>
 8003008:	6811      	ldr	r1, [r2, #0]
 800300a:	1850      	adds	r0, r2, r1
 800300c:	42a0      	cmp	r0, r4
 800300e:	d10b      	bne.n	8003028 <_free_r+0x6c>
 8003010:	6820      	ldr	r0, [r4, #0]
 8003012:	4401      	add	r1, r0
 8003014:	1850      	adds	r0, r2, r1
 8003016:	4283      	cmp	r3, r0
 8003018:	6011      	str	r1, [r2, #0]
 800301a:	d1e0      	bne.n	8002fde <_free_r+0x22>
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	6053      	str	r3, [r2, #4]
 8003022:	4408      	add	r0, r1
 8003024:	6010      	str	r0, [r2, #0]
 8003026:	e7da      	b.n	8002fde <_free_r+0x22>
 8003028:	d902      	bls.n	8003030 <_free_r+0x74>
 800302a:	230c      	movs	r3, #12
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	e7d6      	b.n	8002fde <_free_r+0x22>
 8003030:	6820      	ldr	r0, [r4, #0]
 8003032:	1821      	adds	r1, r4, r0
 8003034:	428b      	cmp	r3, r1
 8003036:	bf04      	itt	eq
 8003038:	6819      	ldreq	r1, [r3, #0]
 800303a:	685b      	ldreq	r3, [r3, #4]
 800303c:	6063      	str	r3, [r4, #4]
 800303e:	bf04      	itt	eq
 8003040:	1809      	addeq	r1, r1, r0
 8003042:	6021      	streq	r1, [r4, #0]
 8003044:	6054      	str	r4, [r2, #4]
 8003046:	e7ca      	b.n	8002fde <_free_r+0x22>
 8003048:	bd38      	pop	{r3, r4, r5, pc}
 800304a:	bf00      	nop
 800304c:	20000290 	.word	0x20000290

08003050 <sbrk_aligned>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4e0f      	ldr	r6, [pc, #60]	@ (8003090 <sbrk_aligned+0x40>)
 8003054:	460c      	mov	r4, r1
 8003056:	6831      	ldr	r1, [r6, #0]
 8003058:	4605      	mov	r5, r0
 800305a:	b911      	cbnz	r1, 8003062 <sbrk_aligned+0x12>
 800305c:	f000 fba6 	bl	80037ac <_sbrk_r>
 8003060:	6030      	str	r0, [r6, #0]
 8003062:	4621      	mov	r1, r4
 8003064:	4628      	mov	r0, r5
 8003066:	f000 fba1 	bl	80037ac <_sbrk_r>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	d103      	bne.n	8003076 <sbrk_aligned+0x26>
 800306e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003072:	4620      	mov	r0, r4
 8003074:	bd70      	pop	{r4, r5, r6, pc}
 8003076:	1cc4      	adds	r4, r0, #3
 8003078:	f024 0403 	bic.w	r4, r4, #3
 800307c:	42a0      	cmp	r0, r4
 800307e:	d0f8      	beq.n	8003072 <sbrk_aligned+0x22>
 8003080:	1a21      	subs	r1, r4, r0
 8003082:	4628      	mov	r0, r5
 8003084:	f000 fb92 	bl	80037ac <_sbrk_r>
 8003088:	3001      	adds	r0, #1
 800308a:	d1f2      	bne.n	8003072 <sbrk_aligned+0x22>
 800308c:	e7ef      	b.n	800306e <sbrk_aligned+0x1e>
 800308e:	bf00      	nop
 8003090:	2000028c 	.word	0x2000028c

08003094 <_malloc_r>:
 8003094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003098:	1ccd      	adds	r5, r1, #3
 800309a:	f025 0503 	bic.w	r5, r5, #3
 800309e:	3508      	adds	r5, #8
 80030a0:	2d0c      	cmp	r5, #12
 80030a2:	bf38      	it	cc
 80030a4:	250c      	movcc	r5, #12
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	4606      	mov	r6, r0
 80030aa:	db01      	blt.n	80030b0 <_malloc_r+0x1c>
 80030ac:	42a9      	cmp	r1, r5
 80030ae:	d904      	bls.n	80030ba <_malloc_r+0x26>
 80030b0:	230c      	movs	r3, #12
 80030b2:	6033      	str	r3, [r6, #0]
 80030b4:	2000      	movs	r0, #0
 80030b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003190 <_malloc_r+0xfc>
 80030be:	f000 f869 	bl	8003194 <__malloc_lock>
 80030c2:	f8d8 3000 	ldr.w	r3, [r8]
 80030c6:	461c      	mov	r4, r3
 80030c8:	bb44      	cbnz	r4, 800311c <_malloc_r+0x88>
 80030ca:	4629      	mov	r1, r5
 80030cc:	4630      	mov	r0, r6
 80030ce:	f7ff ffbf 	bl	8003050 <sbrk_aligned>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	4604      	mov	r4, r0
 80030d6:	d158      	bne.n	800318a <_malloc_r+0xf6>
 80030d8:	f8d8 4000 	ldr.w	r4, [r8]
 80030dc:	4627      	mov	r7, r4
 80030de:	2f00      	cmp	r7, #0
 80030e0:	d143      	bne.n	800316a <_malloc_r+0xd6>
 80030e2:	2c00      	cmp	r4, #0
 80030e4:	d04b      	beq.n	800317e <_malloc_r+0xea>
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	4639      	mov	r1, r7
 80030ea:	4630      	mov	r0, r6
 80030ec:	eb04 0903 	add.w	r9, r4, r3
 80030f0:	f000 fb5c 	bl	80037ac <_sbrk_r>
 80030f4:	4581      	cmp	r9, r0
 80030f6:	d142      	bne.n	800317e <_malloc_r+0xea>
 80030f8:	6821      	ldr	r1, [r4, #0]
 80030fa:	1a6d      	subs	r5, r5, r1
 80030fc:	4629      	mov	r1, r5
 80030fe:	4630      	mov	r0, r6
 8003100:	f7ff ffa6 	bl	8003050 <sbrk_aligned>
 8003104:	3001      	adds	r0, #1
 8003106:	d03a      	beq.n	800317e <_malloc_r+0xea>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	442b      	add	r3, r5
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	f8d8 3000 	ldr.w	r3, [r8]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	bb62      	cbnz	r2, 8003170 <_malloc_r+0xdc>
 8003116:	f8c8 7000 	str.w	r7, [r8]
 800311a:	e00f      	b.n	800313c <_malloc_r+0xa8>
 800311c:	6822      	ldr	r2, [r4, #0]
 800311e:	1b52      	subs	r2, r2, r5
 8003120:	d420      	bmi.n	8003164 <_malloc_r+0xd0>
 8003122:	2a0b      	cmp	r2, #11
 8003124:	d917      	bls.n	8003156 <_malloc_r+0xc2>
 8003126:	1961      	adds	r1, r4, r5
 8003128:	42a3      	cmp	r3, r4
 800312a:	6025      	str	r5, [r4, #0]
 800312c:	bf18      	it	ne
 800312e:	6059      	strne	r1, [r3, #4]
 8003130:	6863      	ldr	r3, [r4, #4]
 8003132:	bf08      	it	eq
 8003134:	f8c8 1000 	streq.w	r1, [r8]
 8003138:	5162      	str	r2, [r4, r5]
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	4630      	mov	r0, r6
 800313e:	f000 f82f 	bl	80031a0 <__malloc_unlock>
 8003142:	f104 000b 	add.w	r0, r4, #11
 8003146:	1d23      	adds	r3, r4, #4
 8003148:	f020 0007 	bic.w	r0, r0, #7
 800314c:	1ac2      	subs	r2, r0, r3
 800314e:	bf1c      	itt	ne
 8003150:	1a1b      	subne	r3, r3, r0
 8003152:	50a3      	strne	r3, [r4, r2]
 8003154:	e7af      	b.n	80030b6 <_malloc_r+0x22>
 8003156:	6862      	ldr	r2, [r4, #4]
 8003158:	42a3      	cmp	r3, r4
 800315a:	bf0c      	ite	eq
 800315c:	f8c8 2000 	streq.w	r2, [r8]
 8003160:	605a      	strne	r2, [r3, #4]
 8003162:	e7eb      	b.n	800313c <_malloc_r+0xa8>
 8003164:	4623      	mov	r3, r4
 8003166:	6864      	ldr	r4, [r4, #4]
 8003168:	e7ae      	b.n	80030c8 <_malloc_r+0x34>
 800316a:	463c      	mov	r4, r7
 800316c:	687f      	ldr	r7, [r7, #4]
 800316e:	e7b6      	b.n	80030de <_malloc_r+0x4a>
 8003170:	461a      	mov	r2, r3
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	42a3      	cmp	r3, r4
 8003176:	d1fb      	bne.n	8003170 <_malloc_r+0xdc>
 8003178:	2300      	movs	r3, #0
 800317a:	6053      	str	r3, [r2, #4]
 800317c:	e7de      	b.n	800313c <_malloc_r+0xa8>
 800317e:	230c      	movs	r3, #12
 8003180:	6033      	str	r3, [r6, #0]
 8003182:	4630      	mov	r0, r6
 8003184:	f000 f80c 	bl	80031a0 <__malloc_unlock>
 8003188:	e794      	b.n	80030b4 <_malloc_r+0x20>
 800318a:	6005      	str	r5, [r0, #0]
 800318c:	e7d6      	b.n	800313c <_malloc_r+0xa8>
 800318e:	bf00      	nop
 8003190:	20000290 	.word	0x20000290

08003194 <__malloc_lock>:
 8003194:	4801      	ldr	r0, [pc, #4]	@ (800319c <__malloc_lock+0x8>)
 8003196:	f7ff bf0f 	b.w	8002fb8 <__retarget_lock_acquire_recursive>
 800319a:	bf00      	nop
 800319c:	20000288 	.word	0x20000288

080031a0 <__malloc_unlock>:
 80031a0:	4801      	ldr	r0, [pc, #4]	@ (80031a8 <__malloc_unlock+0x8>)
 80031a2:	f7ff bf0a 	b.w	8002fba <__retarget_lock_release_recursive>
 80031a6:	bf00      	nop
 80031a8:	20000288 	.word	0x20000288

080031ac <__ssputs_r>:
 80031ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031b0:	688e      	ldr	r6, [r1, #8]
 80031b2:	461f      	mov	r7, r3
 80031b4:	42be      	cmp	r6, r7
 80031b6:	680b      	ldr	r3, [r1, #0]
 80031b8:	4682      	mov	sl, r0
 80031ba:	460c      	mov	r4, r1
 80031bc:	4690      	mov	r8, r2
 80031be:	d82d      	bhi.n	800321c <__ssputs_r+0x70>
 80031c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031c8:	d026      	beq.n	8003218 <__ssputs_r+0x6c>
 80031ca:	6965      	ldr	r5, [r4, #20]
 80031cc:	6909      	ldr	r1, [r1, #16]
 80031ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031d2:	eba3 0901 	sub.w	r9, r3, r1
 80031d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031da:	1c7b      	adds	r3, r7, #1
 80031dc:	444b      	add	r3, r9
 80031de:	106d      	asrs	r5, r5, #1
 80031e0:	429d      	cmp	r5, r3
 80031e2:	bf38      	it	cc
 80031e4:	461d      	movcc	r5, r3
 80031e6:	0553      	lsls	r3, r2, #21
 80031e8:	d527      	bpl.n	800323a <__ssputs_r+0x8e>
 80031ea:	4629      	mov	r1, r5
 80031ec:	f7ff ff52 	bl	8003094 <_malloc_r>
 80031f0:	4606      	mov	r6, r0
 80031f2:	b360      	cbz	r0, 800324e <__ssputs_r+0xa2>
 80031f4:	6921      	ldr	r1, [r4, #16]
 80031f6:	464a      	mov	r2, r9
 80031f8:	f000 fae8 	bl	80037cc <memcpy>
 80031fc:	89a3      	ldrh	r3, [r4, #12]
 80031fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003206:	81a3      	strh	r3, [r4, #12]
 8003208:	6126      	str	r6, [r4, #16]
 800320a:	6165      	str	r5, [r4, #20]
 800320c:	444e      	add	r6, r9
 800320e:	eba5 0509 	sub.w	r5, r5, r9
 8003212:	6026      	str	r6, [r4, #0]
 8003214:	60a5      	str	r5, [r4, #8]
 8003216:	463e      	mov	r6, r7
 8003218:	42be      	cmp	r6, r7
 800321a:	d900      	bls.n	800321e <__ssputs_r+0x72>
 800321c:	463e      	mov	r6, r7
 800321e:	6820      	ldr	r0, [r4, #0]
 8003220:	4632      	mov	r2, r6
 8003222:	4641      	mov	r1, r8
 8003224:	f000 faa8 	bl	8003778 <memmove>
 8003228:	68a3      	ldr	r3, [r4, #8]
 800322a:	1b9b      	subs	r3, r3, r6
 800322c:	60a3      	str	r3, [r4, #8]
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	4433      	add	r3, r6
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	2000      	movs	r0, #0
 8003236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800323a:	462a      	mov	r2, r5
 800323c:	f000 fad4 	bl	80037e8 <_realloc_r>
 8003240:	4606      	mov	r6, r0
 8003242:	2800      	cmp	r0, #0
 8003244:	d1e0      	bne.n	8003208 <__ssputs_r+0x5c>
 8003246:	6921      	ldr	r1, [r4, #16]
 8003248:	4650      	mov	r0, sl
 800324a:	f7ff feb7 	bl	8002fbc <_free_r>
 800324e:	230c      	movs	r3, #12
 8003250:	f8ca 3000 	str.w	r3, [sl]
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003260:	e7e9      	b.n	8003236 <__ssputs_r+0x8a>
	...

08003264 <_svfiprintf_r>:
 8003264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003268:	4698      	mov	r8, r3
 800326a:	898b      	ldrh	r3, [r1, #12]
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	b09d      	sub	sp, #116	@ 0x74
 8003270:	4607      	mov	r7, r0
 8003272:	460d      	mov	r5, r1
 8003274:	4614      	mov	r4, r2
 8003276:	d510      	bpl.n	800329a <_svfiprintf_r+0x36>
 8003278:	690b      	ldr	r3, [r1, #16]
 800327a:	b973      	cbnz	r3, 800329a <_svfiprintf_r+0x36>
 800327c:	2140      	movs	r1, #64	@ 0x40
 800327e:	f7ff ff09 	bl	8003094 <_malloc_r>
 8003282:	6028      	str	r0, [r5, #0]
 8003284:	6128      	str	r0, [r5, #16]
 8003286:	b930      	cbnz	r0, 8003296 <_svfiprintf_r+0x32>
 8003288:	230c      	movs	r3, #12
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003290:	b01d      	add	sp, #116	@ 0x74
 8003292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003296:	2340      	movs	r3, #64	@ 0x40
 8003298:	616b      	str	r3, [r5, #20]
 800329a:	2300      	movs	r3, #0
 800329c:	9309      	str	r3, [sp, #36]	@ 0x24
 800329e:	2320      	movs	r3, #32
 80032a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80032a8:	2330      	movs	r3, #48	@ 0x30
 80032aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003448 <_svfiprintf_r+0x1e4>
 80032ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032b2:	f04f 0901 	mov.w	r9, #1
 80032b6:	4623      	mov	r3, r4
 80032b8:	469a      	mov	sl, r3
 80032ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032be:	b10a      	cbz	r2, 80032c4 <_svfiprintf_r+0x60>
 80032c0:	2a25      	cmp	r2, #37	@ 0x25
 80032c2:	d1f9      	bne.n	80032b8 <_svfiprintf_r+0x54>
 80032c4:	ebba 0b04 	subs.w	fp, sl, r4
 80032c8:	d00b      	beq.n	80032e2 <_svfiprintf_r+0x7e>
 80032ca:	465b      	mov	r3, fp
 80032cc:	4622      	mov	r2, r4
 80032ce:	4629      	mov	r1, r5
 80032d0:	4638      	mov	r0, r7
 80032d2:	f7ff ff6b 	bl	80031ac <__ssputs_r>
 80032d6:	3001      	adds	r0, #1
 80032d8:	f000 80a7 	beq.w	800342a <_svfiprintf_r+0x1c6>
 80032dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032de:	445a      	add	r2, fp
 80032e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80032e2:	f89a 3000 	ldrb.w	r3, [sl]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 809f 	beq.w	800342a <_svfiprintf_r+0x1c6>
 80032ec:	2300      	movs	r3, #0
 80032ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032f6:	f10a 0a01 	add.w	sl, sl, #1
 80032fa:	9304      	str	r3, [sp, #16]
 80032fc:	9307      	str	r3, [sp, #28]
 80032fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003302:	931a      	str	r3, [sp, #104]	@ 0x68
 8003304:	4654      	mov	r4, sl
 8003306:	2205      	movs	r2, #5
 8003308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800330c:	484e      	ldr	r0, [pc, #312]	@ (8003448 <_svfiprintf_r+0x1e4>)
 800330e:	f7fc ff67 	bl	80001e0 <memchr>
 8003312:	9a04      	ldr	r2, [sp, #16]
 8003314:	b9d8      	cbnz	r0, 800334e <_svfiprintf_r+0xea>
 8003316:	06d0      	lsls	r0, r2, #27
 8003318:	bf44      	itt	mi
 800331a:	2320      	movmi	r3, #32
 800331c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003320:	0711      	lsls	r1, r2, #28
 8003322:	bf44      	itt	mi
 8003324:	232b      	movmi	r3, #43	@ 0x2b
 8003326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800332a:	f89a 3000 	ldrb.w	r3, [sl]
 800332e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003330:	d015      	beq.n	800335e <_svfiprintf_r+0xfa>
 8003332:	9a07      	ldr	r2, [sp, #28]
 8003334:	4654      	mov	r4, sl
 8003336:	2000      	movs	r0, #0
 8003338:	f04f 0c0a 	mov.w	ip, #10
 800333c:	4621      	mov	r1, r4
 800333e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003342:	3b30      	subs	r3, #48	@ 0x30
 8003344:	2b09      	cmp	r3, #9
 8003346:	d94b      	bls.n	80033e0 <_svfiprintf_r+0x17c>
 8003348:	b1b0      	cbz	r0, 8003378 <_svfiprintf_r+0x114>
 800334a:	9207      	str	r2, [sp, #28]
 800334c:	e014      	b.n	8003378 <_svfiprintf_r+0x114>
 800334e:	eba0 0308 	sub.w	r3, r0, r8
 8003352:	fa09 f303 	lsl.w	r3, r9, r3
 8003356:	4313      	orrs	r3, r2
 8003358:	9304      	str	r3, [sp, #16]
 800335a:	46a2      	mov	sl, r4
 800335c:	e7d2      	b.n	8003304 <_svfiprintf_r+0xa0>
 800335e:	9b03      	ldr	r3, [sp, #12]
 8003360:	1d19      	adds	r1, r3, #4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	9103      	str	r1, [sp, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	bfbb      	ittet	lt
 800336a:	425b      	neglt	r3, r3
 800336c:	f042 0202 	orrlt.w	r2, r2, #2
 8003370:	9307      	strge	r3, [sp, #28]
 8003372:	9307      	strlt	r3, [sp, #28]
 8003374:	bfb8      	it	lt
 8003376:	9204      	strlt	r2, [sp, #16]
 8003378:	7823      	ldrb	r3, [r4, #0]
 800337a:	2b2e      	cmp	r3, #46	@ 0x2e
 800337c:	d10a      	bne.n	8003394 <_svfiprintf_r+0x130>
 800337e:	7863      	ldrb	r3, [r4, #1]
 8003380:	2b2a      	cmp	r3, #42	@ 0x2a
 8003382:	d132      	bne.n	80033ea <_svfiprintf_r+0x186>
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	1d1a      	adds	r2, r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	9203      	str	r2, [sp, #12]
 800338c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003390:	3402      	adds	r4, #2
 8003392:	9305      	str	r3, [sp, #20]
 8003394:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003458 <_svfiprintf_r+0x1f4>
 8003398:	7821      	ldrb	r1, [r4, #0]
 800339a:	2203      	movs	r2, #3
 800339c:	4650      	mov	r0, sl
 800339e:	f7fc ff1f 	bl	80001e0 <memchr>
 80033a2:	b138      	cbz	r0, 80033b4 <_svfiprintf_r+0x150>
 80033a4:	9b04      	ldr	r3, [sp, #16]
 80033a6:	eba0 000a 	sub.w	r0, r0, sl
 80033aa:	2240      	movs	r2, #64	@ 0x40
 80033ac:	4082      	lsls	r2, r0
 80033ae:	4313      	orrs	r3, r2
 80033b0:	3401      	adds	r4, #1
 80033b2:	9304      	str	r3, [sp, #16]
 80033b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033b8:	4824      	ldr	r0, [pc, #144]	@ (800344c <_svfiprintf_r+0x1e8>)
 80033ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033be:	2206      	movs	r2, #6
 80033c0:	f7fc ff0e 	bl	80001e0 <memchr>
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d036      	beq.n	8003436 <_svfiprintf_r+0x1d2>
 80033c8:	4b21      	ldr	r3, [pc, #132]	@ (8003450 <_svfiprintf_r+0x1ec>)
 80033ca:	bb1b      	cbnz	r3, 8003414 <_svfiprintf_r+0x1b0>
 80033cc:	9b03      	ldr	r3, [sp, #12]
 80033ce:	3307      	adds	r3, #7
 80033d0:	f023 0307 	bic.w	r3, r3, #7
 80033d4:	3308      	adds	r3, #8
 80033d6:	9303      	str	r3, [sp, #12]
 80033d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033da:	4433      	add	r3, r6
 80033dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80033de:	e76a      	b.n	80032b6 <_svfiprintf_r+0x52>
 80033e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80033e4:	460c      	mov	r4, r1
 80033e6:	2001      	movs	r0, #1
 80033e8:	e7a8      	b.n	800333c <_svfiprintf_r+0xd8>
 80033ea:	2300      	movs	r3, #0
 80033ec:	3401      	adds	r4, #1
 80033ee:	9305      	str	r3, [sp, #20]
 80033f0:	4619      	mov	r1, r3
 80033f2:	f04f 0c0a 	mov.w	ip, #10
 80033f6:	4620      	mov	r0, r4
 80033f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033fc:	3a30      	subs	r2, #48	@ 0x30
 80033fe:	2a09      	cmp	r2, #9
 8003400:	d903      	bls.n	800340a <_svfiprintf_r+0x1a6>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0c6      	beq.n	8003394 <_svfiprintf_r+0x130>
 8003406:	9105      	str	r1, [sp, #20]
 8003408:	e7c4      	b.n	8003394 <_svfiprintf_r+0x130>
 800340a:	fb0c 2101 	mla	r1, ip, r1, r2
 800340e:	4604      	mov	r4, r0
 8003410:	2301      	movs	r3, #1
 8003412:	e7f0      	b.n	80033f6 <_svfiprintf_r+0x192>
 8003414:	ab03      	add	r3, sp, #12
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	462a      	mov	r2, r5
 800341a:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <_svfiprintf_r+0x1f0>)
 800341c:	a904      	add	r1, sp, #16
 800341e:	4638      	mov	r0, r7
 8003420:	f3af 8000 	nop.w
 8003424:	1c42      	adds	r2, r0, #1
 8003426:	4606      	mov	r6, r0
 8003428:	d1d6      	bne.n	80033d8 <_svfiprintf_r+0x174>
 800342a:	89ab      	ldrh	r3, [r5, #12]
 800342c:	065b      	lsls	r3, r3, #25
 800342e:	f53f af2d 	bmi.w	800328c <_svfiprintf_r+0x28>
 8003432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003434:	e72c      	b.n	8003290 <_svfiprintf_r+0x2c>
 8003436:	ab03      	add	r3, sp, #12
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	462a      	mov	r2, r5
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <_svfiprintf_r+0x1f0>)
 800343e:	a904      	add	r1, sp, #16
 8003440:	4638      	mov	r0, r7
 8003442:	f000 f879 	bl	8003538 <_printf_i>
 8003446:	e7ed      	b.n	8003424 <_svfiprintf_r+0x1c0>
 8003448:	080038a4 	.word	0x080038a4
 800344c:	080038ae 	.word	0x080038ae
 8003450:	00000000 	.word	0x00000000
 8003454:	080031ad 	.word	0x080031ad
 8003458:	080038aa 	.word	0x080038aa

0800345c <_printf_common>:
 800345c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	4616      	mov	r6, r2
 8003462:	4698      	mov	r8, r3
 8003464:	688a      	ldr	r2, [r1, #8]
 8003466:	690b      	ldr	r3, [r1, #16]
 8003468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800346c:	4293      	cmp	r3, r2
 800346e:	bfb8      	it	lt
 8003470:	4613      	movlt	r3, r2
 8003472:	6033      	str	r3, [r6, #0]
 8003474:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003478:	4607      	mov	r7, r0
 800347a:	460c      	mov	r4, r1
 800347c:	b10a      	cbz	r2, 8003482 <_printf_common+0x26>
 800347e:	3301      	adds	r3, #1
 8003480:	6033      	str	r3, [r6, #0]
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	0699      	lsls	r1, r3, #26
 8003486:	bf42      	ittt	mi
 8003488:	6833      	ldrmi	r3, [r6, #0]
 800348a:	3302      	addmi	r3, #2
 800348c:	6033      	strmi	r3, [r6, #0]
 800348e:	6825      	ldr	r5, [r4, #0]
 8003490:	f015 0506 	ands.w	r5, r5, #6
 8003494:	d106      	bne.n	80034a4 <_printf_common+0x48>
 8003496:	f104 0a19 	add.w	sl, r4, #25
 800349a:	68e3      	ldr	r3, [r4, #12]
 800349c:	6832      	ldr	r2, [r6, #0]
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	42ab      	cmp	r3, r5
 80034a2:	dc26      	bgt.n	80034f2 <_printf_common+0x96>
 80034a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034a8:	6822      	ldr	r2, [r4, #0]
 80034aa:	3b00      	subs	r3, #0
 80034ac:	bf18      	it	ne
 80034ae:	2301      	movne	r3, #1
 80034b0:	0692      	lsls	r2, r2, #26
 80034b2:	d42b      	bmi.n	800350c <_printf_common+0xb0>
 80034b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034b8:	4641      	mov	r1, r8
 80034ba:	4638      	mov	r0, r7
 80034bc:	47c8      	blx	r9
 80034be:	3001      	adds	r0, #1
 80034c0:	d01e      	beq.n	8003500 <_printf_common+0xa4>
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	6922      	ldr	r2, [r4, #16]
 80034c6:	f003 0306 	and.w	r3, r3, #6
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	bf02      	ittt	eq
 80034ce:	68e5      	ldreq	r5, [r4, #12]
 80034d0:	6833      	ldreq	r3, [r6, #0]
 80034d2:	1aed      	subeq	r5, r5, r3
 80034d4:	68a3      	ldr	r3, [r4, #8]
 80034d6:	bf0c      	ite	eq
 80034d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034dc:	2500      	movne	r5, #0
 80034de:	4293      	cmp	r3, r2
 80034e0:	bfc4      	itt	gt
 80034e2:	1a9b      	subgt	r3, r3, r2
 80034e4:	18ed      	addgt	r5, r5, r3
 80034e6:	2600      	movs	r6, #0
 80034e8:	341a      	adds	r4, #26
 80034ea:	42b5      	cmp	r5, r6
 80034ec:	d11a      	bne.n	8003524 <_printf_common+0xc8>
 80034ee:	2000      	movs	r0, #0
 80034f0:	e008      	b.n	8003504 <_printf_common+0xa8>
 80034f2:	2301      	movs	r3, #1
 80034f4:	4652      	mov	r2, sl
 80034f6:	4641      	mov	r1, r8
 80034f8:	4638      	mov	r0, r7
 80034fa:	47c8      	blx	r9
 80034fc:	3001      	adds	r0, #1
 80034fe:	d103      	bne.n	8003508 <_printf_common+0xac>
 8003500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003508:	3501      	adds	r5, #1
 800350a:	e7c6      	b.n	800349a <_printf_common+0x3e>
 800350c:	18e1      	adds	r1, r4, r3
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	2030      	movs	r0, #48	@ 0x30
 8003512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003516:	4422      	add	r2, r4
 8003518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800351c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003520:	3302      	adds	r3, #2
 8003522:	e7c7      	b.n	80034b4 <_printf_common+0x58>
 8003524:	2301      	movs	r3, #1
 8003526:	4622      	mov	r2, r4
 8003528:	4641      	mov	r1, r8
 800352a:	4638      	mov	r0, r7
 800352c:	47c8      	blx	r9
 800352e:	3001      	adds	r0, #1
 8003530:	d0e6      	beq.n	8003500 <_printf_common+0xa4>
 8003532:	3601      	adds	r6, #1
 8003534:	e7d9      	b.n	80034ea <_printf_common+0x8e>
	...

08003538 <_printf_i>:
 8003538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800353c:	7e0f      	ldrb	r7, [r1, #24]
 800353e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003540:	2f78      	cmp	r7, #120	@ 0x78
 8003542:	4691      	mov	r9, r2
 8003544:	4680      	mov	r8, r0
 8003546:	460c      	mov	r4, r1
 8003548:	469a      	mov	sl, r3
 800354a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800354e:	d807      	bhi.n	8003560 <_printf_i+0x28>
 8003550:	2f62      	cmp	r7, #98	@ 0x62
 8003552:	d80a      	bhi.n	800356a <_printf_i+0x32>
 8003554:	2f00      	cmp	r7, #0
 8003556:	f000 80d2 	beq.w	80036fe <_printf_i+0x1c6>
 800355a:	2f58      	cmp	r7, #88	@ 0x58
 800355c:	f000 80b9 	beq.w	80036d2 <_printf_i+0x19a>
 8003560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003568:	e03a      	b.n	80035e0 <_printf_i+0xa8>
 800356a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800356e:	2b15      	cmp	r3, #21
 8003570:	d8f6      	bhi.n	8003560 <_printf_i+0x28>
 8003572:	a101      	add	r1, pc, #4	@ (adr r1, 8003578 <_printf_i+0x40>)
 8003574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003578:	080035d1 	.word	0x080035d1
 800357c:	080035e5 	.word	0x080035e5
 8003580:	08003561 	.word	0x08003561
 8003584:	08003561 	.word	0x08003561
 8003588:	08003561 	.word	0x08003561
 800358c:	08003561 	.word	0x08003561
 8003590:	080035e5 	.word	0x080035e5
 8003594:	08003561 	.word	0x08003561
 8003598:	08003561 	.word	0x08003561
 800359c:	08003561 	.word	0x08003561
 80035a0:	08003561 	.word	0x08003561
 80035a4:	080036e5 	.word	0x080036e5
 80035a8:	0800360f 	.word	0x0800360f
 80035ac:	0800369f 	.word	0x0800369f
 80035b0:	08003561 	.word	0x08003561
 80035b4:	08003561 	.word	0x08003561
 80035b8:	08003707 	.word	0x08003707
 80035bc:	08003561 	.word	0x08003561
 80035c0:	0800360f 	.word	0x0800360f
 80035c4:	08003561 	.word	0x08003561
 80035c8:	08003561 	.word	0x08003561
 80035cc:	080036a7 	.word	0x080036a7
 80035d0:	6833      	ldr	r3, [r6, #0]
 80035d2:	1d1a      	adds	r2, r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6032      	str	r2, [r6, #0]
 80035d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035e0:	2301      	movs	r3, #1
 80035e2:	e09d      	b.n	8003720 <_printf_i+0x1e8>
 80035e4:	6833      	ldr	r3, [r6, #0]
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	1d19      	adds	r1, r3, #4
 80035ea:	6031      	str	r1, [r6, #0]
 80035ec:	0606      	lsls	r6, r0, #24
 80035ee:	d501      	bpl.n	80035f4 <_printf_i+0xbc>
 80035f0:	681d      	ldr	r5, [r3, #0]
 80035f2:	e003      	b.n	80035fc <_printf_i+0xc4>
 80035f4:	0645      	lsls	r5, r0, #25
 80035f6:	d5fb      	bpl.n	80035f0 <_printf_i+0xb8>
 80035f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035fc:	2d00      	cmp	r5, #0
 80035fe:	da03      	bge.n	8003608 <_printf_i+0xd0>
 8003600:	232d      	movs	r3, #45	@ 0x2d
 8003602:	426d      	negs	r5, r5
 8003604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003608:	4859      	ldr	r0, [pc, #356]	@ (8003770 <_printf_i+0x238>)
 800360a:	230a      	movs	r3, #10
 800360c:	e011      	b.n	8003632 <_printf_i+0xfa>
 800360e:	6821      	ldr	r1, [r4, #0]
 8003610:	6833      	ldr	r3, [r6, #0]
 8003612:	0608      	lsls	r0, r1, #24
 8003614:	f853 5b04 	ldr.w	r5, [r3], #4
 8003618:	d402      	bmi.n	8003620 <_printf_i+0xe8>
 800361a:	0649      	lsls	r1, r1, #25
 800361c:	bf48      	it	mi
 800361e:	b2ad      	uxthmi	r5, r5
 8003620:	2f6f      	cmp	r7, #111	@ 0x6f
 8003622:	4853      	ldr	r0, [pc, #332]	@ (8003770 <_printf_i+0x238>)
 8003624:	6033      	str	r3, [r6, #0]
 8003626:	bf14      	ite	ne
 8003628:	230a      	movne	r3, #10
 800362a:	2308      	moveq	r3, #8
 800362c:	2100      	movs	r1, #0
 800362e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003632:	6866      	ldr	r6, [r4, #4]
 8003634:	60a6      	str	r6, [r4, #8]
 8003636:	2e00      	cmp	r6, #0
 8003638:	bfa2      	ittt	ge
 800363a:	6821      	ldrge	r1, [r4, #0]
 800363c:	f021 0104 	bicge.w	r1, r1, #4
 8003640:	6021      	strge	r1, [r4, #0]
 8003642:	b90d      	cbnz	r5, 8003648 <_printf_i+0x110>
 8003644:	2e00      	cmp	r6, #0
 8003646:	d04b      	beq.n	80036e0 <_printf_i+0x1a8>
 8003648:	4616      	mov	r6, r2
 800364a:	fbb5 f1f3 	udiv	r1, r5, r3
 800364e:	fb03 5711 	mls	r7, r3, r1, r5
 8003652:	5dc7      	ldrb	r7, [r0, r7]
 8003654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003658:	462f      	mov	r7, r5
 800365a:	42bb      	cmp	r3, r7
 800365c:	460d      	mov	r5, r1
 800365e:	d9f4      	bls.n	800364a <_printf_i+0x112>
 8003660:	2b08      	cmp	r3, #8
 8003662:	d10b      	bne.n	800367c <_printf_i+0x144>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	07df      	lsls	r7, r3, #31
 8003668:	d508      	bpl.n	800367c <_printf_i+0x144>
 800366a:	6923      	ldr	r3, [r4, #16]
 800366c:	6861      	ldr	r1, [r4, #4]
 800366e:	4299      	cmp	r1, r3
 8003670:	bfde      	ittt	le
 8003672:	2330      	movle	r3, #48	@ 0x30
 8003674:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003678:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800367c:	1b92      	subs	r2, r2, r6
 800367e:	6122      	str	r2, [r4, #16]
 8003680:	f8cd a000 	str.w	sl, [sp]
 8003684:	464b      	mov	r3, r9
 8003686:	aa03      	add	r2, sp, #12
 8003688:	4621      	mov	r1, r4
 800368a:	4640      	mov	r0, r8
 800368c:	f7ff fee6 	bl	800345c <_printf_common>
 8003690:	3001      	adds	r0, #1
 8003692:	d14a      	bne.n	800372a <_printf_i+0x1f2>
 8003694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003698:	b004      	add	sp, #16
 800369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f043 0320 	orr.w	r3, r3, #32
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	4833      	ldr	r0, [pc, #204]	@ (8003774 <_printf_i+0x23c>)
 80036a8:	2778      	movs	r7, #120	@ 0x78
 80036aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	6831      	ldr	r1, [r6, #0]
 80036b2:	061f      	lsls	r7, r3, #24
 80036b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80036b8:	d402      	bmi.n	80036c0 <_printf_i+0x188>
 80036ba:	065f      	lsls	r7, r3, #25
 80036bc:	bf48      	it	mi
 80036be:	b2ad      	uxthmi	r5, r5
 80036c0:	6031      	str	r1, [r6, #0]
 80036c2:	07d9      	lsls	r1, r3, #31
 80036c4:	bf44      	itt	mi
 80036c6:	f043 0320 	orrmi.w	r3, r3, #32
 80036ca:	6023      	strmi	r3, [r4, #0]
 80036cc:	b11d      	cbz	r5, 80036d6 <_printf_i+0x19e>
 80036ce:	2310      	movs	r3, #16
 80036d0:	e7ac      	b.n	800362c <_printf_i+0xf4>
 80036d2:	4827      	ldr	r0, [pc, #156]	@ (8003770 <_printf_i+0x238>)
 80036d4:	e7e9      	b.n	80036aa <_printf_i+0x172>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	f023 0320 	bic.w	r3, r3, #32
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	e7f6      	b.n	80036ce <_printf_i+0x196>
 80036e0:	4616      	mov	r6, r2
 80036e2:	e7bd      	b.n	8003660 <_printf_i+0x128>
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	6825      	ldr	r5, [r4, #0]
 80036e8:	6961      	ldr	r1, [r4, #20]
 80036ea:	1d18      	adds	r0, r3, #4
 80036ec:	6030      	str	r0, [r6, #0]
 80036ee:	062e      	lsls	r6, r5, #24
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	d501      	bpl.n	80036f8 <_printf_i+0x1c0>
 80036f4:	6019      	str	r1, [r3, #0]
 80036f6:	e002      	b.n	80036fe <_printf_i+0x1c6>
 80036f8:	0668      	lsls	r0, r5, #25
 80036fa:	d5fb      	bpl.n	80036f4 <_printf_i+0x1bc>
 80036fc:	8019      	strh	r1, [r3, #0]
 80036fe:	2300      	movs	r3, #0
 8003700:	6123      	str	r3, [r4, #16]
 8003702:	4616      	mov	r6, r2
 8003704:	e7bc      	b.n	8003680 <_printf_i+0x148>
 8003706:	6833      	ldr	r3, [r6, #0]
 8003708:	1d1a      	adds	r2, r3, #4
 800370a:	6032      	str	r2, [r6, #0]
 800370c:	681e      	ldr	r6, [r3, #0]
 800370e:	6862      	ldr	r2, [r4, #4]
 8003710:	2100      	movs	r1, #0
 8003712:	4630      	mov	r0, r6
 8003714:	f7fc fd64 	bl	80001e0 <memchr>
 8003718:	b108      	cbz	r0, 800371e <_printf_i+0x1e6>
 800371a:	1b80      	subs	r0, r0, r6
 800371c:	6060      	str	r0, [r4, #4]
 800371e:	6863      	ldr	r3, [r4, #4]
 8003720:	6123      	str	r3, [r4, #16]
 8003722:	2300      	movs	r3, #0
 8003724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003728:	e7aa      	b.n	8003680 <_printf_i+0x148>
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	4632      	mov	r2, r6
 800372e:	4649      	mov	r1, r9
 8003730:	4640      	mov	r0, r8
 8003732:	47d0      	blx	sl
 8003734:	3001      	adds	r0, #1
 8003736:	d0ad      	beq.n	8003694 <_printf_i+0x15c>
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	079b      	lsls	r3, r3, #30
 800373c:	d413      	bmi.n	8003766 <_printf_i+0x22e>
 800373e:	68e0      	ldr	r0, [r4, #12]
 8003740:	9b03      	ldr	r3, [sp, #12]
 8003742:	4298      	cmp	r0, r3
 8003744:	bfb8      	it	lt
 8003746:	4618      	movlt	r0, r3
 8003748:	e7a6      	b.n	8003698 <_printf_i+0x160>
 800374a:	2301      	movs	r3, #1
 800374c:	4632      	mov	r2, r6
 800374e:	4649      	mov	r1, r9
 8003750:	4640      	mov	r0, r8
 8003752:	47d0      	blx	sl
 8003754:	3001      	adds	r0, #1
 8003756:	d09d      	beq.n	8003694 <_printf_i+0x15c>
 8003758:	3501      	adds	r5, #1
 800375a:	68e3      	ldr	r3, [r4, #12]
 800375c:	9903      	ldr	r1, [sp, #12]
 800375e:	1a5b      	subs	r3, r3, r1
 8003760:	42ab      	cmp	r3, r5
 8003762:	dcf2      	bgt.n	800374a <_printf_i+0x212>
 8003764:	e7eb      	b.n	800373e <_printf_i+0x206>
 8003766:	2500      	movs	r5, #0
 8003768:	f104 0619 	add.w	r6, r4, #25
 800376c:	e7f5      	b.n	800375a <_printf_i+0x222>
 800376e:	bf00      	nop
 8003770:	080038b5 	.word	0x080038b5
 8003774:	080038c6 	.word	0x080038c6

08003778 <memmove>:
 8003778:	4288      	cmp	r0, r1
 800377a:	b510      	push	{r4, lr}
 800377c:	eb01 0402 	add.w	r4, r1, r2
 8003780:	d902      	bls.n	8003788 <memmove+0x10>
 8003782:	4284      	cmp	r4, r0
 8003784:	4623      	mov	r3, r4
 8003786:	d807      	bhi.n	8003798 <memmove+0x20>
 8003788:	1e43      	subs	r3, r0, #1
 800378a:	42a1      	cmp	r1, r4
 800378c:	d008      	beq.n	80037a0 <memmove+0x28>
 800378e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003796:	e7f8      	b.n	800378a <memmove+0x12>
 8003798:	4402      	add	r2, r0
 800379a:	4601      	mov	r1, r0
 800379c:	428a      	cmp	r2, r1
 800379e:	d100      	bne.n	80037a2 <memmove+0x2a>
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037aa:	e7f7      	b.n	800379c <memmove+0x24>

080037ac <_sbrk_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4d06      	ldr	r5, [pc, #24]	@ (80037c8 <_sbrk_r+0x1c>)
 80037b0:	2300      	movs	r3, #0
 80037b2:	4604      	mov	r4, r0
 80037b4:	4608      	mov	r0, r1
 80037b6:	602b      	str	r3, [r5, #0]
 80037b8:	f7fd f9b0 	bl	8000b1c <_sbrk>
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d102      	bne.n	80037c6 <_sbrk_r+0x1a>
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	b103      	cbz	r3, 80037c6 <_sbrk_r+0x1a>
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
 80037c8:	20000284 	.word	0x20000284

080037cc <memcpy>:
 80037cc:	440a      	add	r2, r1
 80037ce:	4291      	cmp	r1, r2
 80037d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80037d4:	d100      	bne.n	80037d8 <memcpy+0xc>
 80037d6:	4770      	bx	lr
 80037d8:	b510      	push	{r4, lr}
 80037da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037e2:	4291      	cmp	r1, r2
 80037e4:	d1f9      	bne.n	80037da <memcpy+0xe>
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <_realloc_r>:
 80037e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ec:	4680      	mov	r8, r0
 80037ee:	4615      	mov	r5, r2
 80037f0:	460c      	mov	r4, r1
 80037f2:	b921      	cbnz	r1, 80037fe <_realloc_r+0x16>
 80037f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037f8:	4611      	mov	r1, r2
 80037fa:	f7ff bc4b 	b.w	8003094 <_malloc_r>
 80037fe:	b92a      	cbnz	r2, 800380c <_realloc_r+0x24>
 8003800:	f7ff fbdc 	bl	8002fbc <_free_r>
 8003804:	2400      	movs	r4, #0
 8003806:	4620      	mov	r0, r4
 8003808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800380c:	f000 f81a 	bl	8003844 <_malloc_usable_size_r>
 8003810:	4285      	cmp	r5, r0
 8003812:	4606      	mov	r6, r0
 8003814:	d802      	bhi.n	800381c <_realloc_r+0x34>
 8003816:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800381a:	d8f4      	bhi.n	8003806 <_realloc_r+0x1e>
 800381c:	4629      	mov	r1, r5
 800381e:	4640      	mov	r0, r8
 8003820:	f7ff fc38 	bl	8003094 <_malloc_r>
 8003824:	4607      	mov	r7, r0
 8003826:	2800      	cmp	r0, #0
 8003828:	d0ec      	beq.n	8003804 <_realloc_r+0x1c>
 800382a:	42b5      	cmp	r5, r6
 800382c:	462a      	mov	r2, r5
 800382e:	4621      	mov	r1, r4
 8003830:	bf28      	it	cs
 8003832:	4632      	movcs	r2, r6
 8003834:	f7ff ffca 	bl	80037cc <memcpy>
 8003838:	4621      	mov	r1, r4
 800383a:	4640      	mov	r0, r8
 800383c:	f7ff fbbe 	bl	8002fbc <_free_r>
 8003840:	463c      	mov	r4, r7
 8003842:	e7e0      	b.n	8003806 <_realloc_r+0x1e>

08003844 <_malloc_usable_size_r>:
 8003844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003848:	1f18      	subs	r0, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	bfbc      	itt	lt
 800384e:	580b      	ldrlt	r3, [r1, r0]
 8003850:	18c0      	addlt	r0, r0, r3
 8003852:	4770      	bx	lr

08003854 <_init>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	bf00      	nop
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr

08003860 <_fini>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	bf00      	nop
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr
