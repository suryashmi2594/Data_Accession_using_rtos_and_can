
Data_accession_using_RTOS_and_CAN_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d48c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800d620  0800d620  0000e620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db80  0800db80  0000f200  2**0
                  CONTENTS
  4 .ARM          00000008  0800db80  0800db80  0000eb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db88  0800db88  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db88  0800db88  0000eb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db8c  0800db8c  0000eb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800db90  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f200  2**0
                  CONTENTS
 10 .bss          00004374  20000200  20000200  0000f200  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004574  20004574  0000f200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b151  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a98  00000000  00000000  0002a381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001790  00000000  00000000  0002de20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000127c  00000000  00000000  0002f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026238  00000000  00000000  0003082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b406  00000000  00000000  00056a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7459  00000000  00000000  00071e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001592c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000783c  00000000  00000000  00159308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00160b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d604 	.word	0x0800d604

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800d604 	.word	0x0800d604

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f8fb 	bl	800113c <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	20d0      	movs	r0, #208	@ 0xd0
 8000f4e:	f000 f8b1 	bl	80010b4 <bme68x_get_regs>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d114      	bne.n	8000f88 <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b61      	cmp	r3, #97	@ 0x61
 8000f64:	d10e      	bne.n	8000f84 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f002 f84c 	bl	8003004 <read_variant_id>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d107      	bne.n	8000f88 <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f001 ff3f 	bl	8002dfc <get_calib_data>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e001      	b.n	8000f88 <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000f84:	23fd      	movs	r3, #253	@ 0xfd
 8000f86:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000f94:	b5b0      	push	{r4, r5, r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f001 fcfb 	bl	80029b0 <null_ptr_check>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d16c      	bne.n	80010a2 <bme68x_set_regs+0x10e>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d069      	beq.n	80010a2 <bme68x_set_regs+0x10e>
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d066      	beq.n	80010a2 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d05d      	beq.n	8001096 <bme68x_set_regs+0x102>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	d85a      	bhi.n	8001096 <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000fe4:	e034      	b.n	8001050 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	7b1b      	ldrb	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d118      	bne.n	8001020 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000fee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	6839      	ldr	r1, [r7, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fc18 	bl	800282e <set_mem_page>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001004:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	3328      	adds	r3, #40	@ 0x28
 8001018:	443b      	add	r3, r7
 800101a:	f803 2c18 	strb.w	r2, [r3, #-24]
 800101e:	e009      	b.n	8001034 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8001020:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	441a      	add	r2, r3
 8001026:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	7812      	ldrb	r2, [r2, #0]
 800102c:	3328      	adds	r3, #40	@ 0x28
 800102e:	443b      	add	r3, r7
 8001030:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8001034:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	441a      	add	r2, r3
 800103a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	3301      	adds	r3, #1
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	3328      	adds	r3, #40	@ 0x28
 8001044:	443b      	add	r3, r7
 8001046:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 800104a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800104c:	3301      	adds	r3, #1
 800104e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8c6      	bhi.n	8000fe6 <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8001058:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800105c:	2b00      	cmp	r3, #0
 800105e:	d11e      	bne.n	800109e <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8001064:	7c38      	ldrb	r0, [r7, #16]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	1e5a      	subs	r2, r3, #1
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685d      	ldr	r5, [r3, #4]
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	1c59      	adds	r1, r3, #1
 8001076:	462b      	mov	r3, r5
 8001078:	47a0      	blx	r4
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 800108e:	23fe      	movs	r3, #254	@ 0xfe
 8001090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8001094:	e003      	b.n	800109e <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8001096:	23fc      	movs	r3, #252	@ 0xfc
 8001098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800109c:	e004      	b.n	80010a8 <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 800109e:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80010a0:	e002      	b.n	80010a8 <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80010a2:	23ff      	movs	r3, #255	@ 0xff
 80010a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80010a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdb0      	pop	{r4, r5, r7, pc}

080010b4 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f001 fc73 	bl	80029b0 <null_ptr_check>
 80010ca:	4603      	mov	r3, r0
 80010cc:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 80010ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d12a      	bne.n	800112c <bme68x_get_regs+0x78>
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d027      	beq.n	800112c <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	7b1b      	ldrb	r3, [r3, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10e      	bne.n	8001102 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fba0 	bl	800282e <set_mem_page>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 80010f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d103      	bne.n	8001102 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001100:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	7bf8      	ldrb	r0, [r7, #15]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	47a0      	blx	r4
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8001126:	23fe      	movs	r3, #254	@ 0xfe
 8001128:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 800112a:	e001      	b.n	8001130 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001130:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001134:	4618      	mov	r0, r3
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}

0800113c <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001144:	23e0      	movs	r3, #224	@ 0xe0
 8001146:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001148:	23b6      	movs	r3, #182	@ 0xb6
 800114a:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f001 fc2f 	bl	80029b0 <null_ptr_check>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d12b      	bne.n	80011b6 <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7b1b      	ldrb	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d104      	bne.n	8001170 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f001 fbc6 	bl	80028f8 <get_mem_page>
 800116c:	4603      	mov	r3, r0
 800116e:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8001170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d11e      	bne.n	80011b6 <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001178:	f107 010d 	add.w	r1, r7, #13
 800117c:	f107 000e 	add.w	r0, r7, #14
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f7ff ff06 	bl	8000f94 <bme68x_set_regs>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d110      	bne.n	80011b6 <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6852      	ldr	r2, [r2, #4]
 800119c:	4611      	mov	r1, r2
 800119e:	f242 7010 	movw	r0, #10000	@ 0x2710
 80011a2:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7b1b      	ldrb	r3, [r3, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d104      	bne.n	80011b6 <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f001 fba3 	bl	80028f8 <get_mem_page>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	77bb      	strb	r3, [r7, #30]
 80011d2:	2301      	movs	r3, #1
 80011d4:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 80011d6:	4a7c      	ldr	r2, [pc, #496]	@ (80013c8 <bme68x_set_conf+0x204>)
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e0:	6018      	str	r0, [r3, #0]
 80011e2:	3304      	adds	r3, #4
 80011e4:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	2300      	movs	r3, #0
 80011ec:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f94a 	bl	800148e <bme68x_get_op_mode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 80011fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d105      	bne.n	8001212 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001206:	6839      	ldr	r1, [r7, #0]
 8001208:	2000      	movs	r0, #0
 800120a:	f000 f8df 	bl	80013cc <bme68x_set_op_mode>
 800120e:	4603      	mov	r3, r0
 8001210:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8001218:	23ff      	movs	r3, #255	@ 0xff
 800121a:	77fb      	strb	r3, [r7, #31]
 800121c:	e0b2      	b.n	8001384 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 800121e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 80ae 	bne.w	8001384 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001228:	7d38      	ldrb	r0, [r7, #20]
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2205      	movs	r2, #5
 8001232:	f7ff ff3f 	bl	80010b4 <bme68x_get_regs>
 8001236:	4603      	mov	r3, r0
 8001238:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8001242:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d108      	bne.n	800125c <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3303      	adds	r3, #3
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	2107      	movs	r1, #7
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fb7f 	bl	8002956 <boundary_check>
 8001258:	4603      	mov	r3, r0
 800125a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800125c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d108      	bne.n	8001276 <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3301      	adds	r3, #1
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	2105      	movs	r1, #5
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fb72 	bl	8002956 <boundary_check>
 8001272:	4603      	mov	r3, r0
 8001274:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001276:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d108      	bne.n	8001290 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3302      	adds	r3, #2
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	2105      	movs	r1, #5
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fb65 	bl	8002956 <boundary_check>
 800128c:	4603      	mov	r3, r0
 800128e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001290:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d107      	bne.n	80012a8 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	2105      	movs	r1, #5
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fb59 	bl	8002956 <boundary_check>
 80012a4:	4603      	mov	r3, r0
 80012a6:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d108      	bne.n	80012c2 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3304      	adds	r3, #4
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	2108      	movs	r1, #8
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 fb4c 	bl	8002956 <boundary_check>
 80012be:	4603      	mov	r3, r0
 80012c0:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80012c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d15c      	bne.n	8001384 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 80012ca:	7c3b      	ldrb	r3, [r7, #16]
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	f023 031c 	bic.w	r3, r3, #28
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	78db      	ldrb	r3, [r3, #3]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	f003 031c 	and.w	r3, r3, #28
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	785b      	ldrb	r3, [r3, #1]
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	b25b      	sxtb	r3, r3
 8001308:	f023 031c 	bic.w	r3, r3, #28
 800130c:	b25a      	sxtb	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	789b      	ldrb	r3, [r3, #2]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	b25b      	sxtb	r3, r3
 8001316:	f003 031c 	and.w	r3, r3, #28
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	f023 0307 	bic.w	r3, r3, #7
 800132c:	b25a      	sxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25b      	sxtb	r3, r3
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b25b      	sxtb	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	791b      	ldrb	r3, [r3, #4]
 8001346:	2b08      	cmp	r3, #8
 8001348:	d004      	beq.n	8001354 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	791b      	ldrb	r3, [r3, #4]
 800134e:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001354:	7c3b      	ldrb	r3, [r7, #16]
 8001356:	b25b      	sxtb	r3, r3
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	b25a      	sxtb	r2, r3
 800135e:	7fbb      	ldrb	r3, [r7, #30]
 8001360:	015b      	lsls	r3, r3, #5
 8001362:	b25b      	sxtb	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b25b      	sxtb	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 800136c:	7b3b      	ldrb	r3, [r7, #12]
 800136e:	b25b      	sxtb	r3, r3
 8001370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001374:	b25a      	sxtb	r2, r3
 8001376:	7f7b      	ldrb	r3, [r7, #29]
 8001378:	01db      	lsls	r3, r3, #7
 800137a:	b25b      	sxtb	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b25b      	sxtb	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8001384:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 800138c:	f107 010c 	add.w	r1, r7, #12
 8001390:	f107 0014 	add.w	r0, r7, #20
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	2205      	movs	r2, #5
 8001398:	f7ff fdfc 	bl	8000f94 <bme68x_set_regs>
 800139c:	4603      	mov	r3, r0
 800139e:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80013a0:	7f3b      	ldrb	r3, [r7, #28]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <bme68x_set_conf+0x1f8>
 80013a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 80013ae:	7f3b      	ldrb	r3, [r7, #28]
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f80a 	bl	80013cc <bme68x_set_op_mode>
 80013b8:	4603      	mov	r3, r0
 80013ba:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80013bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0800d620 	.word	0x0800d620

080013cc <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80013dc:	2374      	movs	r3, #116	@ 0x74
 80013de:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80013e0:	f107 010d 	add.w	r1, r7, #13
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2201      	movs	r2, #1
 80013e8:	2074      	movs	r0, #116	@ 0x74
 80013ea:	f7ff fe63 	bl	80010b4 <bme68x_get_regs>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d11d      	bne.n	8001436 <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80013fa:	7b7b      	ldrb	r3, [r7, #13]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d016      	beq.n	8001436 <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8001408:	7b7b      	ldrb	r3, [r7, #13]
 800140a:	f023 0303 	bic.w	r3, r3, #3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001412:	f107 010d 	add.w	r1, r7, #13
 8001416:	f107 000c 	add.w	r0, r7, #12
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	f7ff fdb9 	bl	8000f94 <bme68x_set_regs>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	6852      	ldr	r2, [r2, #4]
 800142e:	4611      	mov	r1, r2
 8001430:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001434:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <bme68x_set_op_mode+0x78>
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0cd      	beq.n	80013e0 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d01b      	beq.n	8001482 <bme68x_set_op_mode+0xb6>
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d117      	bne.n	8001482 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f023 0303 	bic.w	r3, r3, #3
 800145a:	b25a      	sxtb	r2, r3
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	b25b      	sxtb	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b25b      	sxtb	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800146e:	f107 010d 	add.w	r1, r7, #13
 8001472:	f107 000c 	add.w	r0, r7, #12
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	f7ff fd8b 	bl	8000f94 <bme68x_set_regs>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00f      	beq.n	80014be <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 800149e:	f107 010e 	add.w	r1, r7, #14
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2201      	movs	r2, #1
 80014a6:	2074      	movs	r0, #116	@ 0x74
 80014a8:	f7ff fe04 	bl	80010b4 <bme68x_get_regs>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e001      	b.n	80014c2 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80014be:	23ff      	movs	r3, #255	@ 0xff
 80014c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 80014e2:	4a34      	ldr	r2, [pc, #208]	@ (80015b4 <bme68x_get_meas_dur+0xe4>)
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ec:	6018      	str	r0, [r3, #0]
 80014ee:	3304      	adds	r3, #4
 80014f0:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d058      	beq.n	80015aa <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3301      	adds	r3, #1
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	2105      	movs	r1, #5
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fa28 	bl	8002956 <boundary_check>
 8001506:	4603      	mov	r3, r0
 8001508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME68X_OK)
 800150c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3302      	adds	r3, #2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	2105      	movs	r1, #5
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fa1a 	bl	8002956 <boundary_check>
 8001522:	4603      	mov	r3, r0
 8001524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8001528:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800152c:	2b00      	cmp	r3, #0
 800152e:	d108      	bne.n	8001542 <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	2105      	movs	r1, #5
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fa0d 	bl	8002956 <boundary_check>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8001542:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001546:	2b00      	cmp	r3, #0
 8001548:	d12f      	bne.n	80015aa <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	3328      	adds	r3, #40	@ 0x28
 8001550:	443b      	add	r3, r7
 8001552:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001556:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	3328      	adds	r3, #40	@ 0x28
 800155e:	443b      	add	r3, r7
 8001560:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001564:	461a      	mov	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3328      	adds	r3, #40	@ 0x28
 8001572:	443b      	add	r3, r7
 8001574:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001578:	461a      	mov	r2, r3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8001592:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 800159a:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d003      	beq.n	80015aa <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80015a8:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 80015aa:	6a3b      	ldr	r3, [r7, #32]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3728      	adds	r7, #40	@ 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	0800d628 	.word	0x0800d628

080015b8 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b09a      	sub	sp, #104	@ 0x68
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 80015da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2248      	movs	r2, #72	@ 0x48
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f008 ff89 	bl	800a506 <memset>

    field_ptr[0] = &field_data[0];
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    field_ptr[1] = &field_data[1];
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	3318      	adds	r3, #24
 8001600:	65fb      	str	r3, [r7, #92]	@ 0x5c
    field_ptr[2] = &field_data[2];
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	3330      	adds	r3, #48	@ 0x30
 8001608:	663b      	str	r3, [r7, #96]	@ 0x60

    rslt = null_ptr_check(dev);
 800160a:	6838      	ldr	r0, [r7, #0]
 800160c:	f001 f9d0 	bl	80029b0 <null_ptr_check>
 8001610:	4603      	mov	r3, r0
 8001612:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 8001616:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 80c1 	bne.w	80017a2 <bme68x_get_data+0x1ea>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80bd 	beq.w	80017a2 <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d11c      	bne.n	8001668 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	2000      	movs	r0, #0
 8001634:	f000 fd8b 	bl	800214e <read_field_data>
 8001638:	4603      	mov	r3, r0
 800163a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (rslt == BME68X_OK)
 800163e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 80a1 	bne.w	800178a <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b25b      	sxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	da03      	bge.n	800165a <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001658:	e097      	b.n	800178a <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 8001660:	2302      	movs	r3, #2
 8001662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001666:	e090      	b.n	800178a <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d003      	beq.n	8001676 <bme68x_get_data+0xbe>
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	2b03      	cmp	r3, #3
 8001672:	f040 8087 	bne.w	8001784 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001676:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f000 feaa 	bl	80023d6 <read_all_field_data>
 8001682:	4603      	mov	r3, r0
 8001684:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

            new_fields = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001694:	e014      	b.n	80016c0 <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8001696:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	3368      	adds	r3, #104	@ 0x68
 800169e:	443b      	add	r3, r7
 80016a0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	da04      	bge.n	80016b6 <bme68x_get_data+0xfe>
                {
                    new_fields++;
 80016ac:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80016b0:	3301      	adds	r3, #1
 80016b2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80016b6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80016ba:	3301      	adds	r3, #1
 80016bc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80016c0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d803      	bhi.n	80016d0 <bme68x_get_data+0x118>
 80016c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0e2      	beq.n	8001696 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80016d6:	e01c      	b.n	8001712 <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 80016d8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80016dc:	3301      	adds	r3, #1
 80016de:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 80016e2:	e00d      	b.n	8001700 <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 80016e4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80016e8:	f897 1065 	ldrb.w	r1, [r7, #101]	@ 0x65
 80016ec:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fb09 	bl	8002d08 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 80016f6:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80016fa:	3301      	adds	r3, #1
 80016fc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8001700:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001704:	2b02      	cmp	r3, #2
 8001706:	d9ed      	bls.n	80016e4 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001708:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800170c:	3301      	adds	r3, #1
 800170e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001712:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001716:	2b01      	cmp	r3, #1
 8001718:	d803      	bhi.n	8001722 <bme68x_get_data+0x16a>
 800171a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0da      	beq.n	80016d8 <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001728:	e01c      	b.n	8001764 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 800172a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	3368      	adds	r3, #104	@ 0x68
 8001732:	443b      	add	r3, r7
 8001734:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001738:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	461a      	mov	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	4413      	add	r3, r2
 800174a:	461c      	mov	r4, r3
 800174c:	460d      	mov	r5, r1
 800174e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001752:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001756:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800175a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800175e:	3301      	adds	r3, #1
 8001760:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001764:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001768:	2b02      	cmp	r3, #2
 800176a:	d803      	bhi.n	8001774 <bme68x_get_data+0x1bc>
 800176c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0da      	beq.n	800172a <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8001774:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001778:	2b00      	cmp	r3, #0
 800177a:	d106      	bne.n	800178a <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 800177c:	2302      	movs	r3, #2
 800177e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (new_fields == 0)
 8001782:	e002      	b.n	800178a <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8001784:	2301      	movs	r3, #1
 8001786:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        if (n_data == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 8001790:	23ff      	movs	r3, #255	@ 0xff
 8001792:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (n_data == NULL)
 8001796:	e007      	b.n	80017a8 <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800179e:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80017a0:	e002      	b.n	80017a8 <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80017a2:	23ff      	movs	r3, #255	@ 0xff
 80017a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }

    return rslt;
 80017a8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3768      	adds	r7, #104	@ 0x68
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bdb0      	pop	{r4, r5, r7, pc}

080017b4 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80017ca:	f247 1370 	movw	r3, #29040	@ 0x7170
 80017ce:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d06e      	beq.n	80018b4 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fdf7 	bl	80013cc <bme68x_set_op_mode>
 80017de:	4603      	mov	r3, r0
 80017e0:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 80017e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d108      	bne.n	80017fc <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80017ea:	f107 021c 	add.w	r2, r7, #28
 80017ee:	7bf9      	ldrb	r1, [r7, #15]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68b8      	ldr	r0, [r7, #8]
 80017f4:	f001 f8fc 	bl	80029f0 <set_conf>
 80017f8:	4603      	mov	r3, r0
 80017fa:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80017fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d159      	bne.n	80018b8 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8001804:	f107 0118 	add.w	r1, r7, #24
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	2070      	movs	r0, #112	@ 0x70
 800180e:	f7ff fc51 	bl	80010b4 <bme68x_get_regs>
 8001812:	4603      	mov	r3, r0
 8001814:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 8001816:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d14c      	bne.n	80018b8 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10b      	bne.n	800183e <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8001826:	2300      	movs	r3, #0
 8001828:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d102      	bne.n	8001838 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8001832:	2302      	movs	r3, #2
 8001834:	777b      	strb	r3, [r7, #29]
 8001836:	e006      	b.n	8001846 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8001838:	2301      	movs	r3, #1
 800183a:	777b      	strb	r3, [r7, #29]
 800183c:	e003      	b.n	8001846 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 800183e:	2301      	movs	r3, #1
 8001840:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8001842:	2300      	movs	r3, #0
 8001844:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8001846:	7e3b      	ldrb	r3, [r7, #24]
 8001848:	b25b      	sxtb	r3, r3
 800184a:	f023 0308 	bic.w	r3, r3, #8
 800184e:	b25a      	sxtb	r2, r3
 8001850:	7fbb      	ldrb	r3, [r7, #30]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	b25b      	sxtb	r3, r3
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	b25b      	sxtb	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b25b      	sxtb	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001864:	7e7b      	ldrb	r3, [r7, #25]
 8001866:	b25b      	sxtb	r3, r3
 8001868:	f023 030f 	bic.w	r3, r3, #15
 800186c:	b25a      	sxtb	r2, r3
 800186e:	7f3b      	ldrb	r3, [r7, #28]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	b25b      	sxtb	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b25b      	sxtb	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8001880:	7e7b      	ldrb	r3, [r7, #25]
 8001882:	b25b      	sxtb	r3, r3
 8001884:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001888:	b25a      	sxtb	r2, r3
 800188a:	7f7b      	ldrb	r3, [r7, #29]
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	b25b      	sxtb	r3, r3
 8001890:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001894:	b25b      	sxtb	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	b25b      	sxtb	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 800189e:	f107 0118 	add.w	r1, r7, #24
 80018a2:	f107 0014 	add.w	r0, r7, #20
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2202      	movs	r2, #2
 80018aa:	f7ff fb73 	bl	8000f94 <bme68x_set_regs>
 80018ae:	4603      	mov	r3, r0
 80018b0:	77fb      	strb	r3, [r7, #31]
 80018b2:	e001      	b.n	80018b8 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80018b4:	23ff      	movs	r3, #255	@ 0xff
 80018b6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80018b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d8:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80019bc <calc_temperature+0xf8>
 80018dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	8bdb      	ldrh	r3, [r3, #30]
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018ec:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 80019c0 <calc_temperature+0xfc>
 80018f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190a:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001918:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80019c4 <calc_temperature+0x100>
 800191c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	8bdb      	ldrh	r3, [r3, #30]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800192c:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 80019c8 <calc_temperature+0x104>
 8001930:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001934:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001942:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80019c4 <calc_temperature+0x100>
 8001946:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	8bdb      	ldrh	r3, [r3, #30]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001956:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80019c8 <calc_temperature+0x104>
 800195a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800195e:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8001962:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001974:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001978:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8001984:	ed97 7a05 	vldr	s14, [r7, #20]
 8001988:	edd7 7a04 	vldr	s15, [r7, #16]
 800198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800199c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80019cc <calc_temperature+0x108>
 80019a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a4:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	ee07 3a90 	vmov	s15, r3
}
 80019ae:	eeb0 0a67 	vmov.f32	s0, s15
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	46800000 	.word	0x46800000
 80019c0:	44800000 	.word	0x44800000
 80019c4:	48000000 	.word	0x48000000
 80019c8:	46000000 	.word	0x46000000
 80019cc:	45a00000 	.word	0x45a00000

080019d0 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80019e0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80019e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e8:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001c24 <calc_pressure+0x254>
 80019ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019f0:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 80019f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a0a:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 8001c28 <calc_pressure+0x258>
 8001a0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a16:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3c:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8001a40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a44:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001a48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5a:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8001c2c <calc_pressure+0x25c>
 8001a5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a66:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a88:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001c30 <calc_pressure+0x260>
 8001a8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aaa:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8001c34 <calc_pressure+0x264>
 8001aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab2:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8001ab6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001aba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001c38 <calc_pressure+0x268>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae8:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001c3c <calc_pressure+0x26c>
 8001aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af0:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001af4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afc:	ee17 3a90 	vmov	r3, s15
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8081 	beq.w	8001c08 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001b06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b0a:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001c40 <calc_pressure+0x270>
 8001b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b12:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001c44 <calc_pressure+0x274>
 8001b1e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b22:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2a:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b4c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001c48 <calc_pressure+0x278>
 8001b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b54:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b66:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001c38 <calc_pressure+0x268>
 8001b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b76:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001b7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b7e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001c4c <calc_pressure+0x27c>
 8001b82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b86:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b8a:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8001c4c <calc_pressure+0x27c>
 8001b8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b96:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b9a:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8001c4c <calc_pressure+0x27c>
 8001b9e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bb4:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8001c28 <calc_pressure+0x258>
 8001bb8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001bc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be6:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001c50 <calc_pressure+0x280>
 8001bea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001bf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c02:	edc7 7a05 	vstr	s15, [r7, #20]
 8001c06:	e002      	b.n	8001c0e <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	ee07 3a90 	vmov	s15, r3
}
 8001c14:	eeb0 0a67 	vmov.f32	s0, s15
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	477a0000 	.word	0x477a0000
 8001c28:	48000000 	.word	0x48000000
 8001c2c:	47800000 	.word	0x47800000
 8001c30:	46800000 	.word	0x46800000
 8001c34:	49000000 	.word	0x49000000
 8001c38:	47000000 	.word	0x47000000
 8001c3c:	49800000 	.word	0x49800000
 8001c40:	45800000 	.word	0x45800000
 8001c44:	45c35000 	.word	0x45c35000
 8001c48:	4f000000 	.word	0x4f000000
 8001c4c:	43800000 	.word	0x43800000
 8001c50:	43000000 	.word	0x43000000

08001c54 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	@ 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001c66:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001dd0 <calc_humidity+0x17c>
 8001c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6e:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	8a1b      	ldrh	r3, [r3, #16]
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c88:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001c8c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9e:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8001ca2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001caa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb6:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	8a5b      	ldrh	r3, [r3, #18]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001dd4 <calc_humidity+0x180>
 8001cca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cdc:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8001dd8 <calc_humidity+0x184>
 8001ce0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ce4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001cf0:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8001ddc <calc_humidity+0x188>
 8001d06:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001d0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d12:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d16:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001d22:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	7ddb      	ldrb	r3, [r3, #23]
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d3a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001dd8 <calc_humidity+0x184>
 8001d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d42:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d54:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001de0 <calc_humidity+0x18c>
 8001d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5c:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001d60:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d74:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8c:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001d90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d94:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001de4 <calc_humidity+0x190>
 8001d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	dd02      	ble.n	8001da8 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <calc_humidity+0x194>)
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	e009      	b.n	8001dbc <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001da8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	d502      	bpl.n	8001dbc <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	ee07 3a90 	vmov	s15, r3
}
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	3724      	adds	r7, #36	@ 0x24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	45a00000 	.word	0x45a00000
 8001dd4:	48800000 	.word	0x48800000
 8001dd8:	46800000 	.word	0x46800000
 8001ddc:	49800000 	.word	0x49800000
 8001de0:	4a000000 	.word	0x4a000000
 8001de4:	42c80000 	.word	0x42c80000
 8001de8:	42c80000 	.word	0x42c80000

08001dec <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001dec:	b4b0      	push	{r4, r5, r7}
 8001dee:	b0a9      	sub	sp, #164	@ 0xa4
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	603a      	str	r2, [r7, #0]
 8001df6:	80fb      	strh	r3, [r7, #6]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e06:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001e0a:	797b      	ldrb	r3, [r7, #5]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1a:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    const float lookup_k1_range[16] = {
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <calc_gas_resistance_low+0x12c>)
 8001e20:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001e24:	461d      	mov	r5, r3
 8001e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001e3a:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <calc_gas_resistance_low+0x130>)
 8001e3c:	f107 0408 	add.w	r4, r7, #8
 8001e40:	461d      	mov	r5, r3
 8001e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e64:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001f20 <calc_gas_resistance_low+0x134>
 8001e70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e74:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001e78:	797b      	ldrb	r3, [r7, #5]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	33a0      	adds	r3, #160	@ 0xa0
 8001e7e:	443b      	add	r3, r7
 8001e80:	3b58      	subs	r3, #88	@ 0x58
 8001e82:	ed93 7a00 	vldr	s14, [r3]
 8001e86:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001f24 <calc_gas_resistance_low+0x138>
 8001e8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e96:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001ea2:	797b      	ldrb	r3, [r7, #5]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	33a0      	adds	r3, #160	@ 0xa0
 8001ea8:	443b      	add	r3, r7
 8001eaa:	3b98      	subs	r3, #152	@ 0x98
 8001eac:	ed93 7a00 	vldr	s14, [r3]
 8001eb0:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001f24 <calc_gas_resistance_low+0x138>
 8001eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ec0:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001ec4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001ec8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001f28 <calc_gas_resistance_low+0x13c>
 8001ecc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ed0:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ed8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001edc:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001f2c <calc_gas_resistance_low+0x140>
 8001ee0:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001ee4:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8001ee8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001eec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f00:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    return calc_gas_res;
 8001f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f08:	ee07 3a90 	vmov	s15, r3
}
 8001f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f10:	37a4      	adds	r7, #164	@ 0xa4
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bcb0      	pop	{r4, r5, r7}
 8001f16:	4770      	bx	lr
 8001f18:	0800d630 	.word	0x0800d630
 8001f1c:	0800d670 	.word	0x0800d670
 8001f20:	44a78000 	.word	0x44a78000
 8001f24:	42c80000 	.word	0x42c80000
 8001f28:	340637bd 	.word	0x340637bd
 8001f2c:	44000000 	.word	0x44000000

08001f30 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	80fb      	strh	r3, [r7, #6]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001f40:	797b      	ldrb	r3, [r7, #5]
 8001f42:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8001f52:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f64:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f70:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001fa0 <calc_gas_resistance_high+0x70>
 8001f74:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f86:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	ee07 3a90 	vmov	s15, r3
}
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	49742400 	.word	0x49742400

08001fa4 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b08b      	sub	sp, #44	@ 0x2c
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8001fb0:	89fb      	ldrh	r3, [r7, #14]
 8001fb2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001fb6:	d902      	bls.n	8001fbe <calc_res_heat+0x1a>
    {
        temp = 400;
 8001fb8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001fbc:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fcc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80020e8 <calc_res_heat+0x144>
 8001fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fdc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fee:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80020ec <calc_res_heat+0x148>
 8001ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff6:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80020f0 <calc_res_heat+0x14c>
 8001ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffe:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80020f4 <calc_res_heat+0x150>
 8002002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002006:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002018:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80020f8 <calc_res_heat+0x154>
 800201c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002020:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8002024:	89fb      	ldrh	r3, [r7, #14]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800202e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002036:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800203a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800203e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002046:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002058:	edd7 7a07 	vldr	s15, [r7, #28]
 800205c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002060:	ed97 7a06 	vldr	s14, [r7, #24]
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800207e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002082:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800208a:	edd7 7a05 	vldr	s15, [r7, #20]
 800208e:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a0:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80020fc <calc_res_heat+0x158>
 80020a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020ac:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80020b0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80020b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80020bc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80020c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 80020c4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002100 <calc_res_heat+0x15c>
 80020c8:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 80020cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80020d4:	793b      	ldrb	r3, [r7, #4]
 80020d6:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	372c      	adds	r7, #44	@ 0x2c
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	42440000 	.word	0x42440000
 80020ec:	47000000 	.word	0x47000000
 80020f0:	3a03126f 	.word	0x3a03126f
 80020f4:	3b1a0275 	.word	0x3b1a0275
 80020f8:	44800000 	.word	0x44800000
 80020fc:	3b03126f 	.word	0x3b03126f
 8002100:	4059999a 	.word	0x4059999a

08002104 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8002118:	d308      	bcc.n	800212c <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 800211a:	23ff      	movs	r3, #255	@ 0xff
 800211c:	73bb      	strb	r3, [r7, #14]
 800211e:	e00f      	b.n	8002140 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	3301      	adds	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002130:	d8f6      	bhi.n	8002120 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4413      	add	r3, r2
 800213e:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8002140:	7bbb      	ldrb	r3, [r7, #14]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b08e      	sub	sp, #56	@ 0x38
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8002174:	2305      	movs	r3, #5
 8002176:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME68X_OK))
 800217a:	e11d      	b.n	80023b8 <read_field_data+0x26a>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	461a      	mov	r2, r3
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	4413      	add	r3, r2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	331d      	adds	r3, #29
 8002188:	b2d8      	uxtb	r0, r3
 800218a:	f107 0110 	add.w	r1, r7, #16
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2211      	movs	r2, #17
 8002192:	f7fe ff8f 	bl	80010b4 <bme68x_get_regs>
 8002196:	4603      	mov	r3, r0
 8002198:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 80021a2:	23ff      	movs	r3, #255	@ 0xff
 80021a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 80021a8:	e10f      	b.n	80023ca <read_field_data+0x27c>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 80021aa:	7c3b      	ldrb	r3, [r7, #16]
 80021ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 80021b6:	7c3b      	ldrb	r3, [r7, #16]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80021c2:	7c7a      	ldrb	r2, [r7, #17]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 80021c8:	7cbb      	ldrb	r3, [r7, #18]
 80021ca:	031a      	lsls	r2, r3, #12
 80021cc:	7cfb      	ldrb	r3, [r7, #19]
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	4313      	orrs	r3, r2
 80021d2:	7d3a      	ldrb	r2, [r7, #20]
 80021d4:	0912      	lsrs	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	4313      	orrs	r3, r2
 80021da:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 80021dc:	7d7b      	ldrb	r3, [r7, #21]
 80021de:	031a      	lsls	r2, r3, #12
 80021e0:	7dbb      	ldrb	r3, [r7, #22]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4313      	orrs	r3, r2
 80021e6:	7dfa      	ldrb	r2, [r7, #23]
 80021e8:	0912      	lsrs	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	4313      	orrs	r3, r2
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 80021f0:	7e3b      	ldrb	r3, [r7, #24]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	7e7a      	ldrb	r2, [r7, #25]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 80021fc:	7f7b      	ldrb	r3, [r7, #29]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	b29b      	uxth	r3, r3
 8002202:	7fba      	ldrb	r2, [r7, #30]
 8002204:	0992      	lsrs	r2, r2, #6
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	4313      	orrs	r3, r2
 800220a:	853b      	strh	r3, [r7, #40]	@ 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 800220c:	7ffb      	ldrb	r3, [r7, #31]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	b29b      	uxth	r3, r3
 8002212:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002216:	0992      	lsrs	r2, r2, #6
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	4313      	orrs	r3, r2
 800221c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 800221e:	7fbb      	ldrb	r3, [r7, #30]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d11c      	bne.n	8002276 <read_field_data+0x128>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002246:	b25b      	sxtb	r3, r3
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	b25b      	sxtb	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b25b      	sxtb	r3, r3
 8002252:	b2da      	uxtb	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b25a      	sxtb	r2, r3
 800225e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002262:	b25b      	sxtb	r3, r3
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	b25b      	sxtb	r3, r3
 800226a:	4313      	orrs	r3, r2
 800226c:	b25b      	sxtb	r3, r3
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e019      	b.n	80022aa <read_field_data+0x15c>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b25a      	sxtb	r2, r3
 800227c:	7fbb      	ldrb	r3, [r7, #30]
 800227e:	b25b      	sxtb	r3, r3
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	b25b      	sxtb	r3, r3
 8002286:	4313      	orrs	r3, r2
 8002288:	b25b      	sxtb	r3, r3
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b25a      	sxtb	r2, r3
 8002296:	7fbb      	ldrb	r3, [r7, #30]
 8002298:	b25b      	sxtb	r3, r3
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	b25b      	sxtb	r3, r3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b25b      	sxtb	r3, r3
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da70      	bge.n	8002396 <read_field_data+0x248>
 80022b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d16c      	bne.n	8002396 <read_field_data+0x248>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	335a      	adds	r3, #90	@ 0x5a
 80022c2:	b2d8      	uxtb	r0, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1cd9      	adds	r1, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f7fe fef2 	bl	80010b4 <bme68x_get_regs>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME68X_OK)
 80022d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <read_field_data+0x1aa>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	785b      	ldrb	r3, [r3, #1]
 80022e2:	3350      	adds	r3, #80	@ 0x50
 80022e4:	b2d8      	uxtb	r0, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1d19      	adds	r1, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f7fe fee1 	bl	80010b4 <bme68x_get_regs>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 80022f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10c      	bne.n	800231a <read_field_data+0x1cc>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	3364      	adds	r3, #100	@ 0x64
 8002306:	b2d8      	uxtb	r0, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	1d59      	adds	r1, r3, #5
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f7fe fed0 	bl	80010b4 <bme68x_get_regs>
 8002314:	4603      	mov	r3, r0
 8002316:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 800231a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800231e:	2b00      	cmp	r3, #0
 8002320:	d139      	bne.n	8002396 <read_field_data+0x248>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002326:	f7ff facd 	bl	80018c4 <calc_temperature>
 800232a:	eef0 7a40 	vmov.f32	s15, s0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002338:	f7ff fb4a 	bl	80019d0 <calc_pressure>
 800233c:	eef0 7a40 	vmov.f32	s15, s0
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8002346:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fc82 	bl	8001c54 <calc_humidity>
 8002350:	eef0 7a40 	vmov.f32	s15, s0
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10c      	bne.n	800237c <read_field_data+0x22e>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002362:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002366:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fde0 	bl	8001f30 <calc_gas_resistance_high>
 8002370:	eef0 7a40 	vmov.f32	s15, s0
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 800237a:	e026      	b.n	80023ca <read_field_data+0x27c>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 800237c:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002380:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fd31 	bl	8001dec <calc_gas_resistance_low>
 800238a:	eef0 7a40 	vmov.f32	s15, s0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 8002394:	e019      	b.n	80023ca <read_field_data+0x27c>
            }
        }

        if (rslt == BME68X_OK)
 8002396:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <read_field_data+0x260>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6852      	ldr	r2, [r2, #4]
 80023a6:	4611      	mov	r1, r2
 80023a8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80023ac:	4798      	blx	r3
        }

        tries--;
 80023ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME68X_OK))
 80023b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d004      	beq.n	80023ca <read_field_data+0x27c>
 80023c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f43f aed9 	beq.w	800217c <read_field_data+0x2e>
    }

    return rslt;
 80023ca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3738      	adds	r7, #56	@ 0x38
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 80023d6:	b590      	push	{r4, r7, lr}
 80023d8:	b09d      	sub	sp, #116	@ 0x74
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 80023e6:	2300      	movs	r3, #0
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ee:	222f      	movs	r2, #47	@ 0x2f
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f008 f887 	bl	800a506 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	615a      	str	r2, [r3, #20]
 800240e:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10c      	bne.n	8002432 <read_all_field_data+0x5c>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <read_all_field_data+0x5c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3308      	adds	r3, #8
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 800242c:	23ff      	movs	r3, #255	@ 0xff
 800242e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8002432:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 800243a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2233      	movs	r2, #51	@ 0x33
 8002442:	201d      	movs	r0, #29
 8002444:	f7fe fe36 	bl	80010b4 <bme68x_get_regs>
 8002448:	4603      	mov	r3, r0
 800244a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 800244e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8002456:	f107 0108 	add.w	r1, r7, #8
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	221e      	movs	r2, #30
 800245e:	2050      	movs	r0, #80	@ 0x50
 8002460:	f7fe fe28 	bl	80010b4 <bme68x_get_regs>
 8002464:	4603      	mov	r3, r0
 8002466:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800246a:	2300      	movs	r3, #0
 800246c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002470:	e1ce      	b.n	8002810 <read_all_field_data+0x43a>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8002472:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002476:	461a      	mov	r2, r3
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	4413      	add	r3, r2
 800247c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002480:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002484:	3370      	adds	r3, #112	@ 0x70
 8002486:	443b      	add	r3, r7
 8002488:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 800248c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	440b      	add	r3, r1
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 80024a0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024a4:	3370      	adds	r3, #112	@ 0x70
 80024a6:	443b      	add	r3, r7
 80024a8:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 80024ac:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	440b      	add	r3, r1
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f002 020f 	and.w	r2, r2, #15
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 80024c0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	440b      	add	r3, r1
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3270      	adds	r2, #112	@ 0x70
 80024d4:	443a      	add	r2, r7
 80024d6:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80024da:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 80024dc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024e0:	3302      	adds	r3, #2
 80024e2:	3370      	adds	r3, #112	@ 0x70
 80024e4:	443b      	add	r3, r7
 80024e6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024ea:	031a      	lsls	r2, r3, #12
 80024ec:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024f0:	3303      	adds	r3, #3
 80024f2:	3370      	adds	r3, #112	@ 0x70
 80024f4:	443b      	add	r3, r7
 80024f6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 80024fe:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002502:	3204      	adds	r2, #4
 8002504:	3270      	adds	r2, #112	@ 0x70
 8002506:	443a      	add	r2, r7
 8002508:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800250c:	0912      	lsrs	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
        adc_pres =
 8002510:	4313      	orrs	r3, r2
 8002512:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8002514:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002518:	3305      	adds	r3, #5
 800251a:	3370      	adds	r3, #112	@ 0x70
 800251c:	443b      	add	r3, r7
 800251e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002522:	031a      	lsls	r2, r3, #12
 8002524:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002528:	3306      	adds	r3, #6
 800252a:	3370      	adds	r3, #112	@ 0x70
 800252c:	443b      	add	r3, r7
 800252e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8002536:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800253a:	3207      	adds	r2, #7
 800253c:	3270      	adds	r2, #112	@ 0x70
 800253e:	443a      	add	r2, r7
 8002540:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002544:	0912      	lsrs	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
        adc_temp =
 8002548:	4313      	orrs	r3, r2
 800254a:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 800254c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002550:	3308      	adds	r3, #8
 8002552:	3370      	adds	r3, #112	@ 0x70
 8002554:	443b      	add	r3, r7
 8002556:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b29b      	uxth	r3, r3
 800255e:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002562:	3209      	adds	r2, #9
 8002564:	3270      	adds	r2, #112	@ 0x70
 8002566:	443a      	add	r2, r7
 8002568:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800256c:	4313      	orrs	r3, r2
 800256e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8002572:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002576:	330d      	adds	r3, #13
 8002578:	3370      	adds	r3, #112	@ 0x70
 800257a:	443b      	add	r3, r7
 800257c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	b29b      	uxth	r3, r3
 8002584:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002588:	320e      	adds	r2, #14
 800258a:	3270      	adds	r2, #112	@ 0x70
 800258c:	443a      	add	r2, r7
 800258e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002592:	0992      	lsrs	r2, r2, #6
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	4313      	orrs	r3, r2
 8002598:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 800259c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025a0:	330f      	adds	r3, #15
 80025a2:	3370      	adds	r3, #112	@ 0x70
 80025a4:	443b      	add	r3, r7
 80025a6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80025b2:	3210      	adds	r2, #16
 80025b4:	3270      	adds	r2, #112	@ 0x70
 80025b6:	443a      	add	r2, r7
 80025b8:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80025bc:	0992      	lsrs	r2, r2, #6
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 80025c6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025ca:	330e      	adds	r3, #14
 80025cc:	3370      	adds	r3, #112	@ 0x70
 80025ce:	443b      	add	r3, r7
 80025d0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 80025dc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025e0:	3310      	adds	r3, #16
 80025e2:	3370      	adds	r3, #112	@ 0x70
 80025e4:	443b      	add	r3, r7
 80025e6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d13a      	bne.n	8002670 <read_all_field_data+0x29a>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 80025fa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b25a      	sxtb	r2, r3
 800260a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800260e:	3310      	adds	r3, #16
 8002610:	3370      	adds	r3, #112	@ 0x70
 8002612:	443b      	add	r3, r7
 8002614:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002618:	b25b      	sxtb	r3, r3
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	b25b      	sxtb	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b259      	sxtb	r1, r3
 8002624:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b2ca      	uxtb	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8002634:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b25a      	sxtb	r2, r3
 8002644:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002648:	3310      	adds	r3, #16
 800264a:	3370      	adds	r3, #112	@ 0x70
 800264c:	443b      	add	r3, r7
 800264e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002652:	b25b      	sxtb	r3, r3
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	b25b      	sxtb	r3, r3
 800265a:	4313      	orrs	r3, r2
 800265c:	b259      	sxtb	r1, r3
 800265e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b2ca      	uxtb	r2, r1
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e039      	b.n	80026e4 <read_all_field_data+0x30e>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8002670:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b25a      	sxtb	r2, r3
 8002680:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002684:	330e      	adds	r3, #14
 8002686:	3370      	adds	r3, #112	@ 0x70
 8002688:	443b      	add	r3, r7
 800268a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800268e:	b25b      	sxtb	r3, r3
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	b25b      	sxtb	r3, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	b259      	sxtb	r1, r3
 800269a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b2ca      	uxtb	r2, r1
 80026a8:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80026aa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b25a      	sxtb	r2, r3
 80026ba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80026be:	330e      	adds	r3, #14
 80026c0:	3370      	adds	r3, #112	@ 0x70
 80026c2:	443b      	add	r3, r7
 80026c4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	b25b      	sxtb	r3, r3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b259      	sxtb	r1, r3
 80026d4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b2ca      	uxtb	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 80026e4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	785b      	ldrb	r3, [r3, #1]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8002704:	443a      	add	r2, r7
 8002706:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800270a:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 800270c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	f103 020a 	add.w	r2, r3, #10
 800271e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	440b      	add	r3, r1
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3270      	adds	r2, #112	@ 0x70
 800272c:	443a      	add	r2, r7
 800272e:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002732:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8002734:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	785b      	ldrb	r3, [r3, #1]
 8002742:	f103 0214 	add.w	r2, r3, #20
 8002746:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	440b      	add	r3, r1
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3270      	adds	r2, #112	@ 0x70
 8002754:	443a      	add	r2, r7
 8002756:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800275a:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 800275c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	681c      	ldr	r4, [r3, #0]
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800276c:	f7ff f8aa 	bl	80018c4 <calc_temperature>
 8002770:	eef0 7a40 	vmov.f32	s15, s0
 8002774:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8002778:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	681c      	ldr	r4, [r3, #0]
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002788:	f7ff f922 	bl	80019d0 <calc_pressure>
 800278c:	eef0 7a40 	vmov.f32	s15, s0
 8002790:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8002794:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	681c      	ldr	r4, [r3, #0]
 80027a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fa54 	bl	8001c54 <calc_humidity>
 80027ac:	eef0 7a40 	vmov.f32	s15, s0
 80027b0:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d112      	bne.n	80027e2 <read_all_field_data+0x40c>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80027bc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	681c      	ldr	r4, [r3, #0]
 80027c8:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80027cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fbac 	bl	8001f30 <calc_gas_resistance_high>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	edc4 7a05 	vstr	s15, [r4, #20]
 80027e0:	e011      	b.n	8002806 <read_all_field_data+0x430>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80027e2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	681c      	ldr	r4, [r3, #0]
 80027ee:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 80027f2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff faf7 	bl	8001dec <calc_gas_resistance_low>
 80027fe:	eef0 7a40 	vmov.f32	s15, s0
 8002802:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002806:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800280a:	3301      	adds	r3, #1
 800280c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002810:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002814:	2b02      	cmp	r3, #2
 8002816:	d804      	bhi.n	8002822 <read_all_field_data+0x44c>
 8002818:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800281c:	2b00      	cmp	r3, #0
 800281e:	f43f ae28 	beq.w	8002472 <read_all_field_data+0x9c>
        }
    }

    return rslt;
 8002822:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8002826:	4618      	mov	r0, r3
 8002828:	3774      	adds	r7, #116	@ 0x74
 800282a:	46bd      	mov	sp, r7
 800282c:	bd90      	pop	{r4, r7, pc}

0800282e <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800282e:	b590      	push	{r4, r7, lr}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	6039      	str	r1, [r7, #0]
 8002838:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f000 f8b8 	bl	80029b0 <null_ptr_check>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d14f      	bne.n	80028ec <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	da02      	bge.n	800285a <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8002854:	2300      	movs	r3, #0
 8002856:	73bb      	strb	r3, [r7, #14]
 8002858:	e001      	b.n	800285e <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800285a:	2310      	movs	r3, #16
 800285c:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7b5b      	ldrb	r3, [r3, #13]
 8002862:	7bba      	ldrb	r2, [r7, #14]
 8002864:	429a      	cmp	r2, r3
 8002866:	d041      	beq.n	80028ec <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	7bba      	ldrb	r2, [r7, #14]
 800286c:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f107 010d 	add.w	r1, r7, #13
 800287a:	2201      	movs	r2, #1
 800287c:	20f3      	movs	r0, #243	@ 0xf3
 800287e:	47a0      	blx	r4
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8002894:	23fe      	movs	r3, #254	@ 0xfe
 8002896:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 8002898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d125      	bne.n	80028ec <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80028a0:	7b7b      	ldrb	r3, [r7, #13]
 80028a2:	f023 0310 	bic.w	r3, r3, #16
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	7b5b      	ldrb	r3, [r3, #13]
 80028ae:	b25b      	sxtb	r3, r3
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	b25a      	sxtb	r2, r3
 80028b6:	7b7b      	ldrb	r3, [r7, #13]
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	4313      	orrs	r3, r2
 80028bc:	b25b      	sxtb	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f107 010d 	add.w	r1, r7, #13
 80028ce:	2201      	movs	r2, #1
 80028d0:	2073      	movs	r0, #115	@ 0x73
 80028d2:	47a0      	blx	r4
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 80028e8:	23fe      	movs	r3, #254	@ 0xfe
 80028ea:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80028ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}

080028f8 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f855 	bl	80029b0 <null_ptr_check>
 8002906:	4603      	mov	r3, r0
 8002908:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800290a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d11b      	bne.n	800294a <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f107 010e 	add.w	r1, r7, #14
 800291e:	2201      	movs	r2, #1
 8002920:	20f3      	movs	r0, #243	@ 0xf3
 8002922:	47a0      	blx	r4
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8002938:	23fe      	movs	r3, #254	@ 0xfe
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e005      	b.n	800294a <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 800293e:	7bbb      	ldrb	r3, [r7, #14]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	b2da      	uxtb	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 800294a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}

08002956 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	460b      	mov	r3, r1
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f823 	bl	80029b0 <null_ptr_check>
 800296a:	4603      	mov	r3, r0
 800296c:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <boundary_check+0x4a>
 8002974:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	7afa      	ldrb	r2, [r7, #11]
 8002982:	429a      	cmp	r2, r3
 8002984:	d20e      	bcs.n	80029a4 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	7afa      	ldrb	r2, [r7, #11]
 800298a:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	b2da      	uxtb	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 800299e:	e001      	b.n	80029a4 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80029a0:	23ff      	movs	r3, #255	@ 0xff
 80029a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80029a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <null_ptr_check+0x2a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <null_ptr_check+0x2a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <null_ptr_check+0x2a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 80029da:	23ff      	movs	r3, #255	@ 0xff
 80029dc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80029de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b093      	sub	sp, #76	@ 0x4c
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	460b      	mov	r3, r1
 80029fe:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8002a0c:	236e      	movs	r3, #110	@ 0x6e
 8002a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a12:	4aa1      	ldr	r2, [pc, #644]	@ (8002c98 <set_conf+0x2a8>)
 8002a14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a1a:	c303      	stmia	r3!, {r0, r1}
 8002a1c:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a1e:	4a9e      	ldr	r2, [pc, #632]	@ (8002c98 <set_conf+0x2a8>)
 8002a20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a24:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a26:	c303      	stmia	r3!, {r0, r1}
 8002a28:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a2a:	4a9b      	ldr	r2, [pc, #620]	@ (8002c98 <set_conf+0x2a8>)
 8002a2c:	f107 0320 	add.w	r3, r7, #32
 8002a30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a32:	c303      	stmia	r3!, {r0, r1}
 8002a34:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a36:	4a98      	ldr	r2, [pc, #608]	@ (8002c98 <set_conf+0x2a8>)
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a3e:	c303      	stmia	r3!, {r0, r1}
 8002a40:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8002a42:	7afb      	ldrb	r3, [r7, #11]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d024      	beq.n	8002a92 <set_conf+0xa2>
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	f300 80f9 	bgt.w	8002c40 <set_conf+0x250>
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d002      	beq.n	8002a58 <set_conf+0x68>
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d07c      	beq.n	8002b50 <set_conf+0x160>
 8002a56:	e0f3      	b.n	8002c40 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8002a58:	235a      	movs	r3, #90	@ 0x5a
 8002a5a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	885b      	ldrh	r3, [r3, #2]
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fa9d 	bl	8001fa4 <calc_res_heat>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8002a70:	2364      	movs	r3, #100	@ 0x64
 8002a72:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	889b      	ldrh	r3, [r3, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fb42 	bl	8002104 <calc_gas_wait>
 8002a80:	4603      	mov	r3, r0
 8002a82:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002a90:	e0db      	b.n	8002c4a <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <set_conf+0xb2>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8002aa2:	23ff      	movs	r3, #255	@ 0xff
 8002aa4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8002aa8:	e0cf      	b.n	8002c4a <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002ab0:	e03f      	b.n	8002b32 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002ab2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ab6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002aba:	325a      	adds	r2, #90	@ 0x5a
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	3348      	adds	r3, #72	@ 0x48
 8002ac0:	443b      	add	r3, r7
 8002ac2:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fa62 	bl	8001fa4 <calc_res_heat>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002ae8:	443b      	add	r3, r7
 8002aea:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002aee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002af2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002af6:	3264      	adds	r2, #100	@ 0x64
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	3348      	adds	r3, #72	@ 0x48
 8002afc:	443b      	add	r3, r7
 8002afe:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff faf5 	bl	8002104 <calc_gas_wait>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002b22:	443b      	add	r3, r7
 8002b24:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002b28:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	7c1b      	ldrb	r3, [r3, #16]
 8002b36:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d3b9      	bcc.n	8002ab2 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	7c1a      	ldrb	r2, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	7c1b      	ldrb	r3, [r3, #16]
 8002b4a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002b4e:	e07c      	b.n	8002c4a <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <set_conf+0x170>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8002b60:	23ff      	movs	r3, #255	@ 0xff
 8002b62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8002b66:	e070      	b.n	8002c4a <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8a5b      	ldrh	r3, [r3, #18]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002b70:	2303      	movs	r3, #3
 8002b72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002b7c:	e03a      	b.n	8002bf4 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002b7e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b82:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002b86:	325a      	adds	r2, #90	@ 0x5a
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	3348      	adds	r3, #72	@ 0x48
 8002b8c:	443b      	add	r3, r7
 8002b8e:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002ba4:	6839      	ldr	r1, [r7, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f9fc 	bl	8001fa4 <calc_res_heat>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002bb4:	443b      	add	r3, r7
 8002bb6:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002bba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002bbe:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002bc2:	3264      	adds	r2, #100	@ 0x64
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	3348      	adds	r3, #72	@ 0x48
 8002bc8:	443b      	add	r3, r7
 8002bca:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	881a      	ldrh	r2, [r3, #0]
 8002bdc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	3348      	adds	r3, #72	@ 0x48
 8002be4:	443b      	add	r3, r7
 8002be6:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002bea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	7c1b      	ldrb	r3, [r3, #16]
 8002bf8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d3be      	bcc.n	8002b7e <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	7c1a      	ldrb	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	7c1b      	ldrb	r3, [r3, #16]
 8002c0c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8a5b      	ldrh	r3, [r3, #18]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 f841 	bl	8002c9c <calc_heatr_dur_shared>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 8002c20:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10f      	bne.n	8002c48 <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002c28:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002c2c:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f7fe f9ae 	bl	8000f94 <bme68x_set_regs>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 8002c3e:	e003      	b.n	8002c48 <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002c46:	e000      	b.n	8002c4a <set_conf+0x25a>
            break;
 8002c48:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002c4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10b      	bne.n	8002c6a <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002c52:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c56:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002c5a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f7fe f998 	bl	8000f94 <bme68x_set_regs>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 8002c6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002c72:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c76:	f107 0114 	add.w	r1, r7, #20
 8002c7a:	f107 0020 	add.w	r0, r7, #32
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f7fe f988 	bl	8000f94 <bme68x_set_regs>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8002c8a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	374c      	adds	r7, #76	@ 0x4c
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd90      	pop	{r4, r7, pc}
 8002c96:	bf00      	nop
 8002c98:	0800d6b0 	.word	0x0800d6b0

08002c9c <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	f240 7282 	movw	r2, #1922	@ 0x782
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d902      	bls.n	8002cba <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002cb4:	23ff      	movs	r3, #255	@ 0xff
 8002cb6:	73bb      	strb	r3, [r7, #14]
 8002cb8:	e01d      	b.n	8002cf6 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cc0:	fb03 f202 	mul.w	r2, r3, r2
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <calc_heatr_dur_shared+0x68>)
 8002cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cca:	1ad2      	subs	r2, r2, r3
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002cd4:	e005      	b.n	8002ce2 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ce6:	d8f6      	bhi.n	8002cd6 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	019b      	lsls	r3, r3, #6
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002cf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	12c8b89f 	.word	0x12c8b89f

08002d08 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	603a      	str	r2, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
 8002d14:	460b      	mov	r3, r1
 8002d16:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	789b      	ldrb	r3, [r3, #2]
 8002d24:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002d26:	79bb      	ldrb	r3, [r7, #6]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	789b      	ldrb	r3, [r3, #2]
 8002d32:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da21      	bge.n	8002d8a <sort_sensor_data+0x82>
 8002d46:	79bb      	ldrb	r3, [r7, #6]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da18      	bge.n	8002d8a <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002d58:	89ba      	ldrh	r2, [r7, #12]
 8002d5a:	89fb      	ldrh	r3, [r7, #14]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002d62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d66:	f113 0f02 	cmn.w	r3, #2
 8002d6a:	db03      	blt.n	8002d74 <sort_sensor_data+0x6c>
 8002d6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db03      	blt.n	8002d7c <sort_sensor_data+0x74>
 8002d74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	dd16      	ble.n	8002daa <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002d7c:	79b9      	ldrb	r1, [r7, #6]
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f816 	bl	8002db4 <swap_fields>
    {
 8002d88:	e00f      	b.n	8002daa <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002d8a:	79bb      	ldrb	r3, [r7, #6]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	da07      	bge.n	8002dac <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002d9c:	79b9      	ldrb	r1, [r7, #6]
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f806 	bl	8002db4 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002da8:	e000      	b.n	8002dac <sort_sensor_data+0xa4>
    {
 8002daa:	bf00      	nop
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	603a      	str	r2, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002dd0:	79bb      	ldrb	r3, [r7, #6]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	440b      	add	r3, r1
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002de4:	79bb      	ldrb	r3, [r7, #6]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	@ 0x38
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002e04:	f107 010c 	add.w	r1, r7, #12
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2217      	movs	r2, #23
 8002e0c:	208a      	movs	r0, #138	@ 0x8a
 8002e0e:	f7fe f951 	bl	80010b4 <bme68x_get_regs>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 8002e18:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	f103 0117 	add.w	r1, r3, #23
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	220e      	movs	r2, #14
 8002e2c:	20e1      	movs	r0, #225	@ 0xe1
 8002e2e:	f7fe f941 	bl	80010b4 <bme68x_get_regs>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 8002e38:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10b      	bne.n	8002e58 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2205      	movs	r2, #5
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7fe f931 	bl	80010b4 <bme68x_get_regs>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002e58:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 80cb 	bne.w	8002ff8 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002e62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	b21a      	sxth	r2, r3
 8002e6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002e7a:	7b7b      	ldrb	r3, [r7, #13]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	b21a      	sxth	r2, r3
 8002e80:	7b3b      	ldrb	r3, [r7, #12]
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	4313      	orrs	r3, r2
 8002e86:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
 8002e8e:	b25a      	sxtb	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002e96:	7c7b      	ldrb	r3, [r7, #17]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	b21a      	sxth	r2, r3
 8002e9c:	7c3b      	ldrb	r3, [r7, #16]
 8002e9e:	b21b      	sxth	r3, r3
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	b21b      	sxth	r3, r3
 8002ea4:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	b21a      	sxth	r2, r3
 8002eb0:	7cbb      	ldrb	r3, [r7, #18]
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002ebc:	7d3b      	ldrb	r3, [r7, #20]
 8002ebe:	b25a      	sxtb	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	b21a      	sxth	r2, r3
 8002ecc:	7dbb      	ldrb	r3, [r7, #22]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8002ed8:	7e7b      	ldrb	r3, [r7, #25]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	7e3b      	ldrb	r3, [r7, #24]
 8002ee0:	b21b      	sxth	r3, r3
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8002eea:	7efb      	ldrb	r3, [r7, #27]
 8002eec:	b25a      	sxtb	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8002ef4:	7ebb      	ldrb	r3, [r7, #26]
 8002ef6:	b25a      	sxtb	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002efe:	7ffb      	ldrb	r3, [r7, #31]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	b21a      	sxth	r2, r3
 8002f04:	7fbb      	ldrb	r3, [r7, #30]
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8002f10:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	b21a      	sxth	r2, r3
 8002f18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002f26:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002f30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8002f38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f3c:	b21b      	sxth	r3, r3
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002f44:	4313      	orrs	r3, r2
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	b21a      	sxth	r2, r3
 8002f56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	b21b      	sxth	r3, r3
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b21b      	sxth	r3, r3
 8002f64:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f6e:	b25a      	sxtb	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8002f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f78:	b25a      	sxtb	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002f7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f82:	b25a      	sxtb	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8002f88:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002f90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f94:	b25a      	sxtb	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f9e:	b25a      	sxtb	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8002fa4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	b21a      	sxth	r2, r3
 8002fac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002fb0:	b21b      	sxth	r3, r3
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002fba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002fbe:	b25a      	sxtb	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8002fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da00      	bge.n	8002fd2 <get_calib_data+0x1d6>
 8002fd0:	330f      	adds	r3, #15
 8002fd2:	111b      	asrs	r3, r3, #4
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002fdc:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002fe0:	b25a      	sxtb	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8002fe8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	111b      	asrs	r3, r3, #4
 8002ff0:	b25a      	sxtb	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 8002ff8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3738      	adds	r7, #56	@ 0x38
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8003010:	f107 010e 	add.w	r1, r7, #14
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	20f0      	movs	r0, #240	@ 0xf0
 800301a:	f7fe f84b 	bl	80010b4 <bme68x_get_regs>
 800301e:	4603      	mov	r3, r0
 8003020:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8003022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d103      	bne.n	8003032 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 800302a:	7bbb      	ldrb	r3, [r7, #14]
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8003032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <bme68x_start>:
int8_t getgasreference_count = 0;
float gas_lower_limit = 5000;   // Bad air quality limit
float gas_upper_limit = 50000;  // Good air quality limit

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 800304a:	2254      	movs	r2, #84	@ 0x54
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	481e      	ldr	r0, [pc, #120]	@ (80030c8 <bme68x_start+0x88>)
 8003050:	f007 fb2f 	bl	800a6b2 <memcpy>

	// Init.
	bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8003054:	2101      	movs	r1, #1
 8003056:	481d      	ldr	r0, [pc, #116]	@ (80030cc <bme68x_start+0x8c>)
 8003058:	f000 f8e8 	bl	800322c <bme68x_interface_init>
	bme68x_init(&bme);
 800305c:	481b      	ldr	r0, [pc, #108]	@ (80030cc <bme68x_start+0x8c>)
 800305e:	f7fd ff6b 	bl	8000f38 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 8003062:	4a1b      	ldr	r2, [pc, #108]	@ (80030d0 <bme68x_start+0x90>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 8003068:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <bme68x_start+0x94>)
 800306a:	2202      	movs	r2, #2
 800306c:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 800306e:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <bme68x_start+0x94>)
 8003070:	2208      	movs	r2, #8
 8003072:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 8003074:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <bme68x_start+0x94>)
 8003076:	2202      	movs	r2, #2
 8003078:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <bme68x_start+0x94>)
 800307c:	2203      	movs	r2, #3
 800307e:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 8003080:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <bme68x_start+0x94>)
 8003082:	2204      	movs	r2, #4
 8003084:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 8003086:	4911      	ldr	r1, [pc, #68]	@ (80030cc <bme68x_start+0x8c>)
 8003088:	4812      	ldr	r0, [pc, #72]	@ (80030d4 <bme68x_start+0x94>)
 800308a:	f7fe f89b 	bl	80011c4 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 800308e:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <bme68x_start+0x98>)
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 8003094:	4b10      	ldr	r3, [pc, #64]	@ (80030d8 <bme68x_start+0x98>)
 8003096:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800309a:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 800309c:	4b0e      	ldr	r3, [pc, #56]	@ (80030d8 <bme68x_start+0x98>)
 800309e:	2296      	movs	r2, #150	@ 0x96
 80030a0:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 80030a2:	4a0a      	ldr	r2, [pc, #40]	@ (80030cc <bme68x_start+0x8c>)
 80030a4:	490c      	ldr	r1, [pc, #48]	@ (80030d8 <bme68x_start+0x98>)
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7fe fb84 	bl	80017b4 <bme68x_set_heatr_conf>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <bme68x_start+0x9c>)
 80030b2:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 80030b4:	f000 f904 	bl	80032c0 <bme68x_GetGasReference>

	return rslt;
 80030b8:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <bme68x_start+0x9c>)
 80030ba:	f993 3000 	ldrsb.w	r3, [r3]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	2000021c 	.word	0x2000021c
 80030cc:	20000270 	.word	0x20000270
 80030d0:	200002c0 	.word	0x200002c0
 80030d4:	200002c8 	.word	0x200002c8
 80030d8:	200002d0 	.word	0x200002d0
 80030dc:	200002c4 	.word	0x200002c4

080030e0 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 80030e8:	4916      	ldr	r1, [pc, #88]	@ (8003144 <bme68x_single_measure+0x64>)
 80030ea:	2001      	movs	r0, #1
 80030ec:	f7fe f96e 	bl	80013cc <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 80030f0:	4a14      	ldr	r2, [pc, #80]	@ (8003144 <bme68x_single_measure+0x64>)
 80030f2:	4915      	ldr	r1, [pc, #84]	@ (8003148 <bme68x_single_measure+0x68>)
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fe f9eb 	bl	80014d0 <bme68x_get_meas_dur>
 80030fa:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 80030fc:	4a13      	ldr	r2, [pc, #76]	@ (800314c <bme68x_single_measure+0x6c>)
 80030fe:	8892      	ldrh	r2, [r2, #4]
 8003100:	4611      	mov	r1, r2
 8003102:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003106:	fb01 f202 	mul.w	r2, r1, r2
 800310a:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 800310c:	4a10      	ldr	r2, [pc, #64]	@ (8003150 <bme68x_single_measure+0x70>)
 800310e:	6013      	str	r3, [r2, #0]
	bme.delay_us(del_period, bme.intf_ptr);
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <bme68x_single_measure+0x64>)
 8003112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003114:	4a0e      	ldr	r2, [pc, #56]	@ (8003150 <bme68x_single_measure+0x70>)
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	490a      	ldr	r1, [pc, #40]	@ (8003144 <bme68x_single_measure+0x64>)
 800311a:	6849      	ldr	r1, [r1, #4]
 800311c:	4610      	mov	r0, r2
 800311e:	4798      	blx	r3

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8003120:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <bme68x_single_measure+0x64>)
 8003122:	4a0c      	ldr	r2, [pc, #48]	@ (8003154 <bme68x_single_measure+0x74>)
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	2001      	movs	r0, #1
 8003128:	f7fe fa46 	bl	80015b8 <bme68x_get_data>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <bme68x_single_measure+0x78>)
 8003132:	701a      	strb	r2, [r3, #0]

	return rslt;
 8003134:	4b08      	ldr	r3, [pc, #32]	@ (8003158 <bme68x_single_measure+0x78>)
 8003136:	f993 3000 	ldrsb.w	r3, [r3]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000270 	.word	0x20000270
 8003148:	200002c8 	.word	0x200002c8
 800314c:	200002d0 	.word	0x200002d0
 8003150:	200002e4 	.word	0x200002e4
 8003154:	200002e8 	.word	0x200002e8
 8003158:	200002c4 	.word	0x200002c4

0800315c <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	@ 0x28
 8003160:	af04      	add	r7, sp, #16
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), reg_addr, 1,
 8003172:	7dfb      	ldrb	r3, [r7, #23]
 8003174:	b29b      	uxth	r3, r3
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	b299      	uxth	r1, r3
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	b29b      	uxth	r3, r3
 8003182:	200f      	movs	r0, #15
 8003184:	9002      	str	r0, [sp, #8]
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2301      	movs	r3, #1
 800318e:	4806      	ldr	r0, [pc, #24]	@ (80031a8 <bme68x_i2c_write+0x4c>)
 8003190:	f002 f884 	bl	800529c <HAL_I2C_Mem_Write>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <bme68x_i2c_write+0x42>
			(uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <bme68x_i2c_write+0x44>

	return 1;
 800319e:	2301      	movs	r3, #1
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	2000021c 	.word	0x2000021c

080031ac <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	@ 0x28
 80031b0:	af04      	add	r7, sp, #16
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4603      	mov	r3, r0
 80031ba:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler, (uint16_t) ((dev_addr << 1) | 0x1), reg_addr,
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	b299      	uxth	r1, r3
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	200f      	movs	r0, #15
 80031da:	9002      	str	r0, [sp, #8]
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2301      	movs	r3, #1
 80031e4:	4806      	ldr	r0, [pc, #24]	@ (8003200 <bme68x_i2c_read+0x54>)
 80031e6:	f002 f953 	bl	8005490 <HAL_I2C_Mem_Read>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <bme68x_i2c_read+0x48>
			1, reg_data, len, 15) == HAL_OK)
		return 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <bme68x_i2c_read+0x4a>

	return 1;
 80031f4:	2301      	movs	r3, #1
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	2000021c 	.word	0x2000021c

08003204 <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a05      	ldr	r2, [pc, #20]	@ (8003228 <bme68x_delay_us+0x24>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	4618      	mov	r0, r3
 800321a:	f001 f859 	bl	80042d0 <HAL_Delay>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02c      	beq.n	800329c <bme68x_interface_init+0x70>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), 5, 5)
 8003242:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <bme68x_interface_init+0x80>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	b299      	uxth	r1, r3
 800324a:	2305      	movs	r3, #5
 800324c:	2205      	movs	r2, #5
 800324e:	4818      	ldr	r0, [pc, #96]	@ (80032b0 <bme68x_interface_init+0x84>)
 8003250:	f002 fb50 	bl	80058f4 <HAL_I2C_IsDeviceReady>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <bme68x_interface_init+0x3a>
				== HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d118      	bne.n	8003296 <bme68x_interface_init+0x6a>
 8003264:	e004      	b.n	8003270 <bme68x_interface_init+0x44>
			rslt = -2; // Communication error.
 8003266:	23fe      	movs	r3, #254	@ 0xfe
 8003268:	73fb      	strb	r3, [r7, #15]
			return rslt;
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	e019      	b.n	80032a4 <bme68x_interface_init+0x78>
			bme->read = bme68x_i2c_read;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a10      	ldr	r2, [pc, #64]	@ (80032b4 <bme68x_interface_init+0x88>)
 8003274:	641a      	str	r2, [r3, #64]	@ 0x40
			bme->write = bme68x_i2c_write;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a0f      	ldr	r2, [pc, #60]	@ (80032b8 <bme68x_interface_init+0x8c>)
 800327a:	645a      	str	r2, [r3, #68]	@ 0x44
			bme->intf = BME68X_I2C_INTF;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <bme68x_interface_init+0x90>)
 8003286:	649a      	str	r2, [r3, #72]	@ 0x48
		bme->intf_ptr = &dev_addr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a08      	ldr	r2, [pc, #32]	@ (80032ac <bme68x_interface_init+0x80>)
 800328c:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	221e      	movs	r2, #30
 8003292:	739a      	strb	r2, [r3, #14]
 8003294:	e004      	b.n	80032a0 <bme68x_interface_init+0x74>
			return -2;
 8003296:	f06f 0301 	mvn.w	r3, #1
 800329a:	e003      	b.n	80032a4 <bme68x_interface_init+0x78>
	} else {
		rslt = BME68X_E_NULL_PTR;
 800329c:	23ff      	movs	r3, #255	@ 0xff
 800329e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80032a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000000 	.word	0x20000000
 80032b0:	2000021c 	.word	0x2000021c
 80032b4:	080031ad 	.word	0x080031ad
 80032b8:	0800315d 	.word	0x0800315d
 80032bc:	08003205 	.word	0x08003205

080032c0 <bme68x_GetGasReference>:
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 See more at http://www.dsbird.org.uk
*/

/* IAQ functions */
void bme68x_GetGasReference() {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 80032c6:	230a      	movs	r3, #10
 80032c8:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 80032ca:	2301      	movs	r3, #1
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	e013      	b.n	80032f8 <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 80032d0:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <bme68x_GetGasReference+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff03 	bl	80030e0 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 80032da:	4b12      	ldr	r3, [pc, #72]	@ (8003324 <bme68x_GetGasReference+0x64>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	ed93 7a05 	vldr	s14, [r3, #20]
 80032e2:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <bme68x_GetGasReference+0x68>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <bme68x_GetGasReference+0x68>)
 80032ee:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3301      	adds	r3, #1
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	dde7      	ble.n	80032d0 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <bme68x_GetGasReference+0x68>)
 8003302:	edd3 6a00 	vldr	s13, [r3]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <bme68x_GetGasReference+0x68>)
 8003316:	edc3 7a00 	vstr	s15, [r3]

}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200002c0 	.word	0x200002c0
 8003328:	20000004 	.word	0x20000004
 800332c:	00000000 	.word	0x00000000

08003330 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore() {
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8003336:	4b52      	ldr	r3, [pc, #328]	@ (8003480 <bme68x_GetHumidityScore+0x150>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	edd3 7a04 	vldr	s15, [r3, #16]
 800333e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003484 <bme68x_GetHumidityScore+0x154>
 8003342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	db0e      	blt.n	800336a <bme68x_GetHumidityScore+0x3a>
 800334c:	4b4c      	ldr	r3, [pc, #304]	@ (8003480 <bme68x_GetHumidityScore+0x150>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	edd3 7a04 	vldr	s15, [r3, #16]
 8003354:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003488 <bme68x_GetHumidityScore+0x158>
 8003358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003360:	d803      	bhi.n	800336a <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8003362:	4b4a      	ldr	r3, [pc, #296]	@ (800348c <bme68x_GetHumidityScore+0x15c>)
 8003364:	4a4a      	ldr	r2, [pc, #296]	@ (8003490 <bme68x_GetHumidityScore+0x160>)
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e076      	b.n	8003458 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 800336a:	4b45      	ldr	r3, [pc, #276]	@ (8003480 <bme68x_GetHumidityScore+0x150>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003372:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8003484 <bme68x_GetHumidityScore+0x154>
 8003376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337e:	d52e      	bpl.n	80033de <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8003380:	4b44      	ldr	r3, [pc, #272]	@ (8003494 <bme68x_GetHumidityScore+0x164>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f8df 	bl	8000548 <__aeabi_f2d>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	4941      	ldr	r1, [pc, #260]	@ (8003498 <bme68x_GetHumidityScore+0x168>)
 8003394:	f7fd fa5a 	bl	800084c <__aeabi_ddiv>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4614      	mov	r4, r2
 800339e:	461d      	mov	r5, r3
 80033a0:	4b37      	ldr	r3, [pc, #220]	@ (8003480 <bme68x_GetHumidityScore+0x150>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd f8ce 	bl	8000548 <__aeabi_f2d>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4620      	mov	r0, r4
 80033b2:	4629      	mov	r1, r5
 80033b4:	f7fd f920 	bl	80005f8 <__aeabi_dmul>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	4b35      	ldr	r3, [pc, #212]	@ (800349c <bme68x_GetHumidityScore+0x16c>)
 80033c6:	f7fd f917 	bl	80005f8 <__aeabi_dmul>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	f7fd fbe9 	bl	8000ba8 <__aeabi_d2f>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <bme68x_GetHumidityScore+0x15c>)
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e03c      	b.n	8003458 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 80033de:	4b2d      	ldr	r3, [pc, #180]	@ (8003494 <bme68x_GetHumidityScore+0x164>)
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80034a0 <bme68x_GetHumidityScore+0x170>
 80033e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ec:	ee17 0a90 	vmov	r0, s15
 80033f0:	f7fd f8aa 	bl	8000548 <__aeabi_f2d>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	f04f 0000 	mov.w	r0, #0
 80033fc:	4929      	ldr	r1, [pc, #164]	@ (80034a4 <bme68x_GetHumidityScore+0x174>)
 80033fe:	f7fd fa25 	bl	800084c <__aeabi_ddiv>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4614      	mov	r4, r2
 8003408:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 800340a:	4b1d      	ldr	r3, [pc, #116]	@ (8003480 <bme68x_GetHumidityScore+0x150>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f899 	bl	8000548 <__aeabi_f2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4620      	mov	r0, r4
 800341c:	4629      	mov	r1, r5
 800341e:	f7fd f8eb 	bl	80005f8 <__aeabi_dmul>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	a313      	add	r3, pc, #76	@ (adr r3, 8003478 <bme68x_GetHumidityScore+0x148>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7fc ff2c 	bl	800028c <__adddf3>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	4b16      	ldr	r3, [pc, #88]	@ (800349c <bme68x_GetHumidityScore+0x16c>)
 8003442:	f7fd f8d9 	bl	80005f8 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f7fd fbab 	bl	8000ba8 <__aeabi_d2f>
 8003452:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 8003454:	4a0d      	ldr	r2, [pc, #52]	@ (800348c <bme68x_GetHumidityScore+0x15c>)
 8003456:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8003458:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <bme68x_GetHumidityScore+0x15c>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003462:	edc7 7a01 	vstr	s15, [r7, #4]
 8003466:	793b      	ldrb	r3, [r7, #4]
 8003468:	b25b      	sxtb	r3, r3
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bdb0      	pop	{r4, r5, r7, pc}
 8003472:	bf00      	nop
 8003474:	f3af 8000 	nop.w
 8003478:	ded6ba8c 	.word	0xded6ba8c
 800347c:	3fdaaaa7 	.word	0x3fdaaaa7
 8003480:	200002c0 	.word	0x200002c0
 8003484:	42180000 	.word	0x42180000
 8003488:	42280000 	.word	0x42280000
 800348c:	200002ec 	.word	0x200002ec
 8003490:	41c80000 	.word	0x41c80000
 8003494:	20000008 	.word	0x20000008
 8003498:	3fd00000 	.word	0x3fd00000
 800349c:	40590000 	.word	0x40590000
 80034a0:	42c80000 	.word	0x42c80000
 80034a4:	bfd00000 	.word	0xbfd00000

080034a8 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore() {
 80034a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 80034b0:	4b42      	ldr	r3, [pc, #264]	@ (80035bc <bme68x_GetGasScore+0x114>)
 80034b2:	ed93 7a00 	vldr	s14, [r3]
 80034b6:	4b42      	ldr	r3, [pc, #264]	@ (80035c0 <bme68x_GetGasScore+0x118>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c0:	ee17 0a90 	vmov	r0, s15
 80034c4:	f7fd f840 	bl	8000548 <__aeabi_f2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	493c      	ldr	r1, [pc, #240]	@ (80035c4 <bme68x_GetGasScore+0x11c>)
 80034d2:	f7fd f9bb 	bl	800084c <__aeabi_ddiv>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4614      	mov	r4, r2
 80034dc:	461d      	mov	r5, r3
 80034de:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <bme68x_GetGasScore+0x120>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd f830 	bl	8000548 <__aeabi_f2d>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4620      	mov	r0, r4
 80034ee:	4629      	mov	r1, r5
 80034f0:	f7fd f882 	bl	80005f8 <__aeabi_dmul>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4690      	mov	r8, r2
 80034fa:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 80034fc:	4b30      	ldr	r3, [pc, #192]	@ (80035c0 <bme68x_GetGasScore+0x118>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd f821 	bl	8000548 <__aeabi_f2d>
 8003506:	4604      	mov	r4, r0
 8003508:	460d      	mov	r5, r1
 800350a:	4b2c      	ldr	r3, [pc, #176]	@ (80035bc <bme68x_GetGasScore+0x114>)
 800350c:	ed93 7a00 	vldr	s14, [r3]
 8003510:	4b2b      	ldr	r3, [pc, #172]	@ (80035c0 <bme68x_GetGasScore+0x118>)
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351a:	ee17 0a90 	vmov	r0, s15
 800351e:	f7fd f813 	bl	8000548 <__aeabi_f2d>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	f04f 0000 	mov.w	r0, #0
 800352a:	4926      	ldr	r1, [pc, #152]	@ (80035c4 <bme68x_GetGasScore+0x11c>)
 800352c:	f7fd f98e 	bl	800084c <__aeabi_ddiv>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4620      	mov	r0, r4
 8003536:	4629      	mov	r1, r5
 8003538:	f7fd f85e 	bl	80005f8 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4640      	mov	r0, r8
 8003542:	4649      	mov	r1, r9
 8003544:	f7fc fea0 	bl	8000288 <__aeabi_dsub>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
			* 100.00;
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	4b1d      	ldr	r3, [pc, #116]	@ (80035cc <bme68x_GetGasScore+0x124>)
 8003556:	f7fd f84f 	bl	80005f8 <__aeabi_dmul>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4610      	mov	r0, r2
 8003560:	4619      	mov	r1, r3
 8003562:	f7fd fb21 	bl	8000ba8 <__aeabi_d2f>
 8003566:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8003568:	4a19      	ldr	r2, [pc, #100]	@ (80035d0 <bme68x_GetGasScore+0x128>)
 800356a:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 800356c:	4b18      	ldr	r3, [pc, #96]	@ (80035d0 <bme68x_GetGasScore+0x128>)
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80035d4 <bme68x_GetGasScore+0x12c>
 8003576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	dd02      	ble.n	8003586 <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8003580:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <bme68x_GetGasScore+0x128>)
 8003582:	4a15      	ldr	r2, [pc, #84]	@ (80035d8 <bme68x_GetGasScore+0x130>)
 8003584:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 8003586:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <bme68x_GetGasScore+0x128>)
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003594:	d503      	bpl.n	800359e <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 8003596:	4b0e      	ldr	r3, [pc, #56]	@ (80035d0 <bme68x_GetGasScore+0x128>)
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

	return gas_score;
 800359e:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <bme68x_GetGasScore+0x128>)
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80035ac:	793b      	ldrb	r3, [r7, #4]
 80035ae:	b25b      	sxtb	r3, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035ba:	bf00      	nop
 80035bc:	20000010 	.word	0x20000010
 80035c0:	2000000c 	.word	0x2000000c
 80035c4:	3fe80000 	.word	0x3fe80000
 80035c8:	20000004 	.word	0x20000004
 80035cc:	40590000 	.word	0x40590000
 80035d0:	200002f0 	.word	0x200002f0
 80035d4:	42960000 	.word	0x42960000
 80035d8:	42960000 	.word	0x42960000

080035dc <bme68x_iaq>:

float bme68x_iaq() {
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 80035e2:	4b1e      	ldr	r3, [pc, #120]	@ (800365c <bme68x_iaq+0x80>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fea2 	bl	8003330 <bme68x_GetHumidityScore>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 80035f0:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <bme68x_iaq+0x80>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff57 	bl	80034a8 <bme68x_GetGasScore>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 80035fe:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
	float air_quality_score = (100
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003610:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 8003614:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <bme68x_iaq+0x84>)
 8003616:	f993 2000 	ldrsb.w	r2, [r3]
 800361a:	b2d3      	uxtb	r3, r2
 800361c:	3301      	adds	r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	b259      	sxtb	r1, r3
 8003622:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <bme68x_iaq+0x84>)
 8003624:	7019      	strb	r1, [r3, #0]
 8003626:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <bme68x_iaq+0x88>)
 8003628:	fb83 1302 	smull	r1, r3, r3, r2
 800362c:	1059      	asrs	r1, r3, #1
 800362e:	17d3      	asrs	r3, r2, #31
 8003630:	1ac9      	subs	r1, r1, r3
 8003632:	460b      	mov	r3, r1
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	b25b      	sxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 8003640:	4b06      	ldr	r3, [pc, #24]	@ (800365c <bme68x_iaq+0x80>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fe3b 	bl	80032c0 <bme68x_GetGasReference>

	return air_quality_score;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	ee07 3a90 	vmov	s15, r3

}
 8003650:	eeb0 0a67 	vmov.f32	s0, s15
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}
 800365a:	bf00      	nop
 800365c:	200002c0 	.word	0x200002c0
 8003660:	200002f4 	.word	0x200002f4
 8003664:	66666667 	.word	0x66666667

08003668 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a07      	ldr	r2, [pc, #28]	@ (8003694 <vApplicationGetIdleTaskMemory+0x2c>)
 8003678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4a06      	ldr	r2, [pc, #24]	@ (8003698 <vApplicationGetIdleTaskMemory+0x30>)
 800367e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2280      	movs	r2, #128	@ 0x80
 8003684:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	200002f8 	.word	0x200002f8
 8003698:	20000398 	.word	0x20000398

0800369c <vSensorTask>:
#define R0 76.63      // Pre-calibrated value of R0 in clean air

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */
void vSensorTask(void *pvParam) {
 800369c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a0:	b0c8      	sub	sp, #288	@ 0x120
 80036a2:	af0a      	add	r7, sp, #40	@ 0x28
 80036a4:	60f8      	str	r0, [r7, #12]
	struct bme68x_data sensorData;
	bme68x_start(&sensorData, &hi2c1);
 80036a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036aa:	492a      	ldr	r1, [pc, #168]	@ (8003754 <vSensorTask+0xb8>)
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fcc7 	bl	8003040 <bme68x_start>
	QueueMessage_t msg;

	while (1) {
		if (bme68x_single_measure(&sensorData) == 0) {
 80036b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fd12 	bl	80030e0 <bme68x_single_measure>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d143      	bne.n	800374a <vSensorTask+0xae>
			float iaq_score = bme68x_iaq();
 80036c2:	f7ff ff8b 	bl	80035dc <bme68x_iaq>
 80036c6:	ed87 0a3d 	vstr	s0, [r7, #244]	@ 0xf4
			snprintf(msg.message, sizeof(msg.message),
					"Temperature (\u00B0C): %.2f, Pressure (Pa): %.2f, Humidity (%%): %.2f, Gas Resistance (Ohms): %.2f, IAQ Score: %.2f\r\n",
					sensorData.temperature, sensorData.pressure,
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
			snprintf(msg.message, sizeof(msg.message),
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fc ff3a 	bl	8000548 <__aeabi_f2d>
 80036d4:	4604      	mov	r4, r0
 80036d6:	460d      	mov	r5, r1
					sensorData.temperature, sensorData.pressure,
 80036d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
			snprintf(msg.message, sizeof(msg.message),
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fc ff33 	bl	8000548 <__aeabi_f2d>
 80036e2:	4680      	mov	r8, r0
 80036e4:	4689      	mov	r9, r1
					sensorData.humidity, sensorData.gas_resistance, iaq_score);
 80036e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
			snprintf(msg.message, sizeof(msg.message),
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fc ff2c 	bl	8000548 <__aeabi_f2d>
 80036f0:	4682      	mov	sl, r0
 80036f2:	468b      	mov	fp, r1
					sensorData.humidity, sensorData.gas_resistance, iaq_score);
 80036f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
			snprintf(msg.message, sizeof(msg.message),
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fc ff25 	bl	8000548 <__aeabi_f2d>
 80036fe:	e9c7 0100 	strd	r0, r1, [r7]
 8003702:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8003706:	f7fc ff1f 	bl	8000548 <__aeabi_f2d>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	f107 0010 	add.w	r0, r7, #16
 8003712:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003716:	ed97 7b00 	vldr	d7, [r7]
 800371a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800371e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003722:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003726:	e9cd 4500 	strd	r4, r5, [sp]
 800372a:	4a0b      	ldr	r2, [pc, #44]	@ (8003758 <vSensorTask+0xbc>)
 800372c:	21c8      	movs	r1, #200	@ 0xc8
 800372e:	f006 fe73 	bl	800a418 <sniprintf>
			msg.source = 2; // BME680
 8003732:	2302      	movs	r3, #2
 8003734:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			xQueueSend(xQueue, &msg, portMAX_DELAY);
 8003738:	4b08      	ldr	r3, [pc, #32]	@ (800375c <vSensorTask+0xc0>)
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	f107 0110 	add.w	r1, r7, #16
 8003740:	2300      	movs	r3, #0
 8003742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003746:	f004 fb27 	bl	8007d98 <xQueueGenericSend>
		}
		vTaskDelay(2000 / portTICK_RATE_MS);
 800374a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800374e:	f004 ffe5 	bl	800871c <vTaskDelay>
		if (bme68x_single_measure(&sensorData) == 0) {
 8003752:	e7ae      	b.n	80036b2 <vSensorTask+0x16>
 8003754:	200005e0 	.word	0x200005e0
 8003758:	0800d6bc 	.word	0x0800d6bc
 800375c:	20000680 	.word	0x20000680

08003760 <vMQ135Task>:
	}
}

/* Task for MQ-135 gas sensor data reading */

void vMQ135Task(void *pvParam) {
 8003760:	b5b0      	push	{r4, r5, r7, lr}
 8003762:	b0be      	sub	sp, #248	@ 0xf8
 8003764:	af04      	add	r7, sp, #16
 8003766:	6078      	str	r0, [r7, #4]
	uint32_t adcValue;
	float Rs, ratio, concentration;
	QueueMessage_t msg;

	while (1) {
		HAL_ADC_Start(&hadc1);
 8003768:	4859      	ldr	r0, [pc, #356]	@ (80038d0 <vMQ135Task+0x170>)
 800376a:	f000 fe19 	bl	80043a0 <HAL_ADC_Start>

		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800376e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003772:	4857      	ldr	r0, [pc, #348]	@ (80038d0 <vMQ135Task+0x170>)
 8003774:	f000 ff19 	bl	80045aa <HAL_ADC_PollForConversion>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 808f 	bne.w	800389e <vMQ135Task+0x13e>
			adcValue = HAL_ADC_GetValue(&hadc1);
 8003780:	4853      	ldr	r0, [pc, #332]	@ (80038d0 <vMQ135Task+0x170>)
 8003782:	f000 ff9d 	bl	80046c0 <HAL_ADC_GetValue>
 8003786:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

			if (adcValue != 0) {
 800378a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800378e:	2b00      	cmp	r3, #0
 8003790:	d059      	beq.n	8003846 <vMQ135Task+0xe6>
				Rs = R_L * ((4095.0 - adcValue) / adcValue);
 8003792:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003796:	f7fc feb5 	bl	8000504 <__aeabi_ui2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	a144      	add	r1, pc, #272	@ (adr r1, 80038b0 <vMQ135Task+0x150>)
 80037a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037a4:	f7fc fd70 	bl	8000288 <__aeabi_dsub>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4614      	mov	r4, r2
 80037ae:	461d      	mov	r5, r3
 80037b0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80037b4:	f7fc fea6 	bl	8000504 <__aeabi_ui2d>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4620      	mov	r0, r4
 80037be:	4629      	mov	r1, r5
 80037c0:	f7fd f844 	bl	800084c <__aeabi_ddiv>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	4b40      	ldr	r3, [pc, #256]	@ (80038d4 <vMQ135Task+0x174>)
 80037d2:	f7fc ff11 	bl	80005f8 <__aeabi_dmul>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	f7fd f9e3 	bl	8000ba8 <__aeabi_d2f>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				ratio = Rs / R0;
 80037e8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80037ec:	f7fc feac 	bl	8000548 <__aeabi_f2d>
 80037f0:	a331      	add	r3, pc, #196	@ (adr r3, 80038b8 <vMQ135Task+0x158>)
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f7fd f829 	bl	800084c <__aeabi_ddiv>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f7fd f9d1 	bl	8000ba8 <__aeabi_d2f>
 8003806:	4603      	mov	r3, r0
 8003808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				concentration = A * pow(ratio, -B);
 800380c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003810:	f7fc fe9a 	bl	8000548 <__aeabi_f2d>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 80038c0 <vMQ135Task+0x160>
 800381c:	ec43 2b10 	vmov	d0, r2, r3
 8003820:	f008 ff90 	bl	800c744 <pow>
 8003824:	ec51 0b10 	vmov	r0, r1, d0
 8003828:	a327      	add	r3, pc, #156	@ (adr r3, 80038c8 <vMQ135Task+0x168>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc fee3 	bl	80005f8 <__aeabi_dmul>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	f7fd f9b5 	bl	8000ba8 <__aeabi_d2f>
 800383e:	4603      	mov	r3, r0
 8003840:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003844:	e007      	b.n	8003856 <vMQ135Task+0xf6>
			} else {
				Rs = 0;
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				concentration = 0;
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			}

			snprintf(msg.message, sizeof(msg.message),
 8003856:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800385a:	f7fc fe75 	bl	8000548 <__aeabi_f2d>
 800385e:	4604      	mov	r4, r0
 8003860:	460d      	mov	r5, r1
 8003862:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8003866:	f7fc fe6f 	bl	8000548 <__aeabi_f2d>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	f107 000c 	add.w	r0, r7, #12
 8003872:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003876:	e9cd 4500 	strd	r4, r5, [sp]
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387e:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <vMQ135Task+0x178>)
 8003880:	21c8      	movs	r1, #200	@ 0xc8
 8003882:	f006 fdc9 	bl	800a418 <sniprintf>
					"MQ-135 ADC Value: %lu, Rs: %.2f kOhms, Concentration: %.2f ppm\r\n",
					adcValue, Rs, concentration);
			msg.source = 1; // MQ-135
 8003886:	2301      	movs	r3, #1
 8003888:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			xQueueSend(xQueue, &msg, portMAX_DELAY);
 800388c:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <vMQ135Task+0x17c>)
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	f107 010c 	add.w	r1, r7, #12
 8003894:	2300      	movs	r3, #0
 8003896:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800389a:	f004 fa7d 	bl	8007d98 <xQueueGenericSend>
		}

		HAL_ADC_Stop(&hadc1);
 800389e:	480c      	ldr	r0, [pc, #48]	@ (80038d0 <vMQ135Task+0x170>)
 80038a0:	f000 fe50 	bl	8004544 <HAL_ADC_Stop>
		vTaskDelay(2500 / portTICK_RATE_MS);
 80038a4:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80038a8:	f004 ff38 	bl	800871c <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 80038ac:	e75c      	b.n	8003768 <vMQ135Task+0x8>
 80038ae:	bf00      	nop
 80038b0:	00000000 	.word	0x00000000
 80038b4:	40affe00 	.word	0x40affe00
 80038b8:	eb851eb8 	.word	0xeb851eb8
 80038bc:	40532851 	.word	0x40532851
 80038c0:	c49ba5e3 	.word	0xc49ba5e3
 80038c4:	c001b020 	.word	0xc001b020
 80038c8:	490f3d8b 	.word	0x490f3d8b
 80038cc:	405d2688 	.word	0x405d2688
 80038d0:	20000598 	.word	0x20000598
 80038d4:	40240000 	.word	0x40240000
 80038d8:	0800d730 	.word	0x0800d730
 80038dc:	20000680 	.word	0x20000680

080038e0 <vUARTTask>:
	}
}

void vUARTTask(void *pvParam) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b0b6      	sub	sp, #216	@ 0xd8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    QueueMessage_t receivedMsg;
    int lastSource = 0; // Track the last message source
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    while (1) {
        // Receive a message from the queue
        if (xQueueReceive(xQueue, &receivedMsg, portMAX_DELAY) == pdPASS) {
 80038ee:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <vUARTTask+0x68>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f107 0108 	add.w	r1, r7, #8
 80038f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038fa:	4618      	mov	r0, r3
 80038fc:	f004 fb4e 	bl	8007f9c <xQueueReceive>
 8003900:	4603      	mov	r3, r0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d1f3      	bne.n	80038ee <vUARTTask+0xe>
            // Check if the source of the message is different from the last processed source
            if (receivedMsg.source != lastSource || uxQueueMessagesWaiting(xQueue) == 0) {
 8003906:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800390a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800390e:	429a      	cmp	r2, r3
 8003910:	d107      	bne.n	8003922 <vUARTTask+0x42>
 8003912:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <vUARTTask+0x68>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f004 fc22 	bl	8008160 <uxQueueMessagesWaiting>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e5      	bne.n	80038ee <vUARTTask+0xe>
                // Transmit the message via UART
                HAL_UART_Transmit(&huart2, (uint8_t*)receivedMsg.message, strlen(receivedMsg.message), HAL_MAX_DELAY);
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	4618      	mov	r0, r3
 8003928:	f7fc fca2 	bl	8000270 <strlen>
 800392c:	4603      	mov	r3, r0
 800392e:	b29a      	uxth	r2, r3
 8003930:	f107 0108 	add.w	r1, r7, #8
 8003934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003938:	4804      	ldr	r0, [pc, #16]	@ (800394c <vUARTTask+0x6c>)
 800393a:	f003 fc79 	bl	8007230 <HAL_UART_Transmit>
                lastSource = receivedMsg.source; // Update the last source
 800393e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003942:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        if (xQueueReceive(xQueue, &receivedMsg, portMAX_DELAY) == pdPASS) {
 8003946:	e7d2      	b.n	80038ee <vUARTTask+0xe>
 8003948:	20000680 	.word	0x20000680
 800394c:	20000634 	.word	0x20000634

08003950 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003950:	b5b0      	push	{r4, r5, r7, lr}
 8003952:	b08a      	sub	sp, #40	@ 0x28
 8003954:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003956:	f000 fc79 	bl	800424c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800395a:	f000 f871 	bl	8003a40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800395e:	f000 f983 	bl	8003c68 <MX_GPIO_Init>
	MX_I2C1_Init();
 8003962:	f000 f929 	bl	8003bb8 <MX_I2C1_Init>
	MX_ADC1_Init();
 8003966:	f000 f8d5 	bl	8003b14 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 800396a:	f000 f953 	bl	8003c14 <MX_USART2_UART_Init>
	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	xQueue = xQueueCreate(10, sizeof(QueueMessage_t)); // Queue can hold up to 10 messages
 800396e:	2200      	movs	r2, #0
 8003970:	21cc      	movs	r1, #204	@ 0xcc
 8003972:	200a      	movs	r0, #10
 8003974:	f004 f9b6 	bl	8007ce4 <xQueueGenericCreate>
 8003978:	4603      	mov	r3, r0
 800397a:	4a28      	ldr	r2, [pc, #160]	@ (8003a1c <main+0xcc>)
 800397c:	6013      	str	r3, [r2, #0]
	if (xQueue == NULL) {
 800397e:	4b27      	ldr	r3, [pc, #156]	@ (8003a1c <main+0xcc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <main+0x3a>
	    Error_Handler(); // Handle queue creation failure
 8003986:	f000 f9bf 	bl	8003d08 <Error_Handler>

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800398a:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <main+0xd0>)
 800398c:	463c      	mov	r4, r7
 800398e:	461d      	mov	r5, r3
 8003990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003994:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800399c:	463b      	mov	r3, r7
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f004 f820 	bl	80079e6 <osThreadCreate>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a24 <main+0xd4>)
 80039aa:	6013      	str	r3, [r2, #0]

	ret = xTaskCreate(vSensorTask, "SensorTask", configMINIMAL_STACK_SIZE + 256, NULL, 4, NULL);
 80039ac:	2300      	movs	r3, #0
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	2304      	movs	r3, #4
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2300      	movs	r3, #0
 80039b6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80039ba:	491b      	ldr	r1, [pc, #108]	@ (8003a28 <main+0xd8>)
 80039bc:	481b      	ldr	r0, [pc, #108]	@ (8003a2c <main+0xdc>)
 80039be:	f004 fd5e 	bl	800847e <xTaskCreate>
 80039c2:	61f8      	str	r0, [r7, #28]
	if (ret != pdTRUE)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d001      	beq.n	80039ce <main+0x7e>
	    Error_Handler();
 80039ca:	f000 f99d 	bl	8003d08 <Error_Handler>

	ret = xTaskCreate(vMQ135Task, "MQ135Task", configMINIMAL_STACK_SIZE + 256, NULL, 3, NULL); // Lower priority
 80039ce:	2300      	movs	r3, #0
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	2303      	movs	r3, #3
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80039dc:	4914      	ldr	r1, [pc, #80]	@ (8003a30 <main+0xe0>)
 80039de:	4815      	ldr	r0, [pc, #84]	@ (8003a34 <main+0xe4>)
 80039e0:	f004 fd4d 	bl	800847e <xTaskCreate>
 80039e4:	61f8      	str	r0, [r7, #28]
	if (ret != pdTRUE)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d001      	beq.n	80039f0 <main+0xa0>
	    Error_Handler();
 80039ec:	f000 f98c 	bl	8003d08 <Error_Handler>

	ret = xTaskCreate(vUARTTask, "UARTTask", configMINIMAL_STACK_SIZE + 256, NULL, 5, NULL); // Higher priority
 80039f0:	2300      	movs	r3, #0
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2305      	movs	r3, #5
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80039fe:	490e      	ldr	r1, [pc, #56]	@ (8003a38 <main+0xe8>)
 8003a00:	480e      	ldr	r0, [pc, #56]	@ (8003a3c <main+0xec>)
 8003a02:	f004 fd3c 	bl	800847e <xTaskCreate>
 8003a06:	61f8      	str	r0, [r7, #28]
	if (ret != pdTRUE)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <main+0xc2>
	    Error_Handler();
 8003a0e:	f000 f97b 	bl	8003d08 <Error_Handler>

	/* Start scheduler */
	osKernelStart();
 8003a12:	f003 ffe1 	bl	80079d8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003a16:	bf00      	nop
 8003a18:	e7fd      	b.n	8003a16 <main+0xc6>
 8003a1a:	bf00      	nop
 8003a1c:	20000680 	.word	0x20000680
 8003a20:	0800d7a4 	.word	0x0800d7a4
 8003a24:	2000067c 	.word	0x2000067c
 8003a28:	0800d774 	.word	0x0800d774
 8003a2c:	0800369d 	.word	0x0800369d
 8003a30:	0800d780 	.word	0x0800d780
 8003a34:	08003761 	.word	0x08003761
 8003a38:	0800d78c 	.word	0x0800d78c
 8003a3c:	080038e1 	.word	0x080038e1

08003a40 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b094      	sub	sp, #80	@ 0x50
 8003a44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003a46:	f107 0320 	add.w	r3, r7, #32
 8003a4a:	2230      	movs	r2, #48	@ 0x30
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f006 fd59 	bl	800a506 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003a54:	f107 030c 	add.w	r3, r7, #12
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <SystemClock_Config+0xcc>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	4a27      	ldr	r2, [pc, #156]	@ (8003b0c <SystemClock_Config+0xcc>)
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a74:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <SystemClock_Config+0xcc>)
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a80:	2300      	movs	r3, #0
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <SystemClock_Config+0xd0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a21      	ldr	r2, [pc, #132]	@ (8003b10 <SystemClock_Config+0xd0>)
 8003a8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b1f      	ldr	r3, [pc, #124]	@ (8003b10 <SystemClock_Config+0xd0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003aaa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8003ab4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003ab8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003aba:	2302      	movs	r3, #2
 8003abc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003abe:	2307      	movs	r3, #7
 8003ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003ac2:	f107 0320 	add.w	r3, r7, #32
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f002 fbf6 	bl	80062b8 <HAL_RCC_OscConfig>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <SystemClock_Config+0x96>
		Error_Handler();
 8003ad2:	f000 f919 	bl	8003d08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003ad6:	230f      	movs	r3, #15
 8003ad8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ada:	2302      	movs	r3, #2
 8003adc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ae2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003ae6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ae8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003aec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	2105      	movs	r1, #5
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 fe57 	bl	80067a8 <HAL_RCC_ClockConfig>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <SystemClock_Config+0xc4>
		Error_Handler();
 8003b00:	f000 f902 	bl	8003d08 <Error_Handler>
	}
}
 8003b04:	bf00      	nop
 8003b06:	3750      	adds	r7, #80	@ 0x50
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40007000 	.word	0x40007000

08003b14 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8003b26:	4b21      	ldr	r3, [pc, #132]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b28:	4a21      	ldr	r2, [pc, #132]	@ (8003bb0 <MX_ADC1_Init+0x9c>)
 8003b2a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b32:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b34:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8003b40:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b46:	4b19      	ldr	r3, [pc, #100]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b54:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b56:	4a17      	ldr	r2, [pc, #92]	@ (8003bb4 <MX_ADC1_Init+0xa0>)
 8003b58:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8003b60:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8003b66:	4b11      	ldr	r3, [pc, #68]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003b74:	480d      	ldr	r0, [pc, #52]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b76:	f000 fbcf 	bl	8004318 <HAL_ADC_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_ADC1_Init+0x70>
		Error_Handler();
 8003b80:	f000 f8c2 	bl	8003d08 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003b90:	463b      	mov	r3, r7
 8003b92:	4619      	mov	r1, r3
 8003b94:	4805      	ldr	r0, [pc, #20]	@ (8003bac <MX_ADC1_Init+0x98>)
 8003b96:	f000 fda1 	bl	80046dc <HAL_ADC_ConfigChannel>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <MX_ADC1_Init+0x90>
		Error_Handler();
 8003ba0:	f000 f8b2 	bl	8003d08 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000598 	.word	0x20000598
 8003bb0:	40012000 	.word	0x40012000
 8003bb4:	0f000001 	.word	0x0f000001

08003bb8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003bbc:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003bbe:	4a13      	ldr	r2, [pc, #76]	@ (8003c0c <MX_I2C1_Init+0x54>)
 8003bc0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003bc2:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003bc4:	4a12      	ldr	r2, [pc, #72]	@ (8003c10 <MX_I2C1_Init+0x58>)
 8003bc6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003bce:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003bd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003bda:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003be8:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bee:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003bf4:	4804      	ldr	r0, [pc, #16]	@ (8003c08 <MX_I2C1_Init+0x50>)
 8003bf6:	f001 fa0d 	bl	8005014 <HAL_I2C_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8003c00:	f000 f882 	bl	8003d08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200005e0 	.word	0x200005e0
 8003c0c:	40005400 	.word	0x40005400
 8003c10:	000186a0 	.word	0x000186a0

08003c14 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003c18:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <MX_USART2_UART_Init+0x4c>)
 8003c1a:	4a12      	ldr	r2, [pc, #72]	@ (8003c64 <MX_USART2_UART_Init+0x50>)
 8003c1c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003c1e:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <MX_USART2_UART_Init+0x4c>)
 8003c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c24:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c26:	4b0e      	ldr	r3, [pc, #56]	@ (8003c60 <MX_USART2_UART_Init+0x4c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <MX_USART2_UART_Init+0x4c>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003c32:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <MX_USART2_UART_Init+0x4c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003c38:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <MX_USART2_UART_Init+0x4c>)
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c3e:	4b08      	ldr	r3, [pc, #32]	@ (8003c60 <MX_USART2_UART_Init+0x4c>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c44:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <MX_USART2_UART_Init+0x4c>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003c4a:	4805      	ldr	r0, [pc, #20]	@ (8003c60 <MX_USART2_UART_Init+0x4c>)
 8003c4c:	f003 faa0 	bl	8007190 <HAL_UART_Init>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8003c56:	f000 f857 	bl	8003d08 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000634 	.word	0x20000634
 8003c64:	40004400 	.word	0x40004400

08003c68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	4b17      	ldr	r3, [pc, #92]	@ (8003cd0 <MX_GPIO_Init+0x68>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <MX_GPIO_Init+0x68>)
 8003c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7e:	4b14      	ldr	r3, [pc, #80]	@ (8003cd0 <MX_GPIO_Init+0x68>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <MX_GPIO_Init+0x68>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd0 <MX_GPIO_Init+0x68>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <MX_GPIO_Init+0x68>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <MX_GPIO_Init+0x68>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <MX_GPIO_Init+0x68>)
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <MX_GPIO_Init+0x68>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800

08003cd4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f003 fece 	bl	8007a7e <osDelay>
 8003ce2:	e7fb      	b.n	8003cdc <StartDefaultTask+0x8>

08003ce4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a04      	ldr	r2, [pc, #16]	@ (8003d04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003cf6:	f000 facb 	bl	8004290 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40010000 	.word	0x40010000

08003d08 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0c:	b672      	cpsid	i
}
 8003d0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <Error_Handler+0x8>

08003d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <HAL_MspInit+0x54>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	4a11      	ldr	r2, [pc, #68]	@ (8003d68 <HAL_MspInit+0x54>)
 8003d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d68 <HAL_MspInit+0x54>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_MspInit+0x54>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d68 <HAL_MspInit+0x54>)
 8003d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d46:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <HAL_MspInit+0x54>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	210f      	movs	r1, #15
 8003d56:	f06f 0001 	mvn.w	r0, #1
 8003d5a:	f000 ff95 	bl	8004c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800

08003d6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	@ 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	f107 0314 	add.w	r3, r7, #20
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a17      	ldr	r2, [pc, #92]	@ (8003de8 <HAL_ADC_MspInit+0x7c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d127      	bne.n	8003dde <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	4b16      	ldr	r3, [pc, #88]	@ (8003dec <HAL_ADC_MspInit+0x80>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	4a15      	ldr	r2, [pc, #84]	@ (8003dec <HAL_ADC_MspInit+0x80>)
 8003d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d9e:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <HAL_ADC_MspInit+0x80>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b0f      	ldr	r3, [pc, #60]	@ (8003dec <HAL_ADC_MspInit+0x80>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	4a0e      	ldr	r2, [pc, #56]	@ (8003dec <HAL_ADC_MspInit+0x80>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dba:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <HAL_ADC_MspInit+0x80>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd2:	f107 0314 	add.w	r3, r7, #20
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4805      	ldr	r0, [pc, #20]	@ (8003df0 <HAL_ADC_MspInit+0x84>)
 8003dda:	f000 ff7f 	bl	8004cdc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003dde:	bf00      	nop
 8003de0:	3728      	adds	r7, #40	@ 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40012000 	.word	0x40012000
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40020000 	.word	0x40020000

08003df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	@ 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a19      	ldr	r2, [pc, #100]	@ (8003e78 <HAL_I2C_MspInit+0x84>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d12b      	bne.n	8003e6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	4b18      	ldr	r3, [pc, #96]	@ (8003e7c <HAL_I2C_MspInit+0x88>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <HAL_I2C_MspInit+0x88>)
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e26:	4b15      	ldr	r3, [pc, #84]	@ (8003e7c <HAL_I2C_MspInit+0x88>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e32:	23c0      	movs	r3, #192	@ 0xc0
 8003e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e36:	2312      	movs	r3, #18
 8003e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e42:	2304      	movs	r3, #4
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e46:	f107 0314 	add.w	r3, r7, #20
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	480c      	ldr	r0, [pc, #48]	@ (8003e80 <HAL_I2C_MspInit+0x8c>)
 8003e4e:	f000 ff45 	bl	8004cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	4b09      	ldr	r3, [pc, #36]	@ (8003e7c <HAL_I2C_MspInit+0x88>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	4a08      	ldr	r2, [pc, #32]	@ (8003e7c <HAL_I2C_MspInit+0x88>)
 8003e5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e62:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <HAL_I2C_MspInit+0x88>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003e6e:	bf00      	nop
 8003e70:	3728      	adds	r7, #40	@ 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40005400 	.word	0x40005400
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020400 	.word	0x40020400

08003e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	@ 0x28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8c:	f107 0314 	add.w	r3, r7, #20
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a19      	ldr	r2, [pc, #100]	@ (8003f08 <HAL_UART_MspInit+0x84>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d12b      	bne.n	8003efe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <HAL_UART_MspInit+0x88>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	4a17      	ldr	r2, [pc, #92]	@ (8003f0c <HAL_UART_MspInit+0x88>)
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb6:	4b15      	ldr	r3, [pc, #84]	@ (8003f0c <HAL_UART_MspInit+0x88>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_UART_MspInit+0x88>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	4a10      	ldr	r2, [pc, #64]	@ (8003f0c <HAL_UART_MspInit+0x88>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8003f0c <HAL_UART_MspInit+0x88>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ede:	230c      	movs	r3, #12
 8003ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eea:	2303      	movs	r3, #3
 8003eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003eee:	2307      	movs	r3, #7
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4805      	ldr	r0, [pc, #20]	@ (8003f10 <HAL_UART_MspInit+0x8c>)
 8003efa:	f000 feef 	bl	8004cdc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003efe:	bf00      	nop
 8003f00:	3728      	adds	r7, #40	@ 0x28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40004400 	.word	0x40004400
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40020000 	.word	0x40020000

08003f14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08c      	sub	sp, #48	@ 0x30
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003f24:	2300      	movs	r3, #0
 8003f26:	60bb      	str	r3, [r7, #8]
 8003f28:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe8 <HAL_InitTick+0xd4>)
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003fe8 <HAL_InitTick+0xd4>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f34:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe8 <HAL_InitTick+0xd4>)
 8003f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f40:	f107 020c 	add.w	r2, r7, #12
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f002 fe4c 	bl	8006be8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003f50:	f002 fe36 	bl	8006bc0 <HAL_RCC_GetPCLK2Freq>
 8003f54:	4603      	mov	r3, r0
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	4a23      	ldr	r2, [pc, #140]	@ (8003fec <HAL_InitTick+0xd8>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0c9b      	lsrs	r3, r3, #18
 8003f64:	3b01      	subs	r3, #1
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003f68:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <HAL_InitTick+0xdc>)
 8003f6a:	4a22      	ldr	r2, [pc, #136]	@ (8003ff4 <HAL_InitTick+0xe0>)
 8003f6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003f6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <HAL_InitTick+0xdc>)
 8003f70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003f76:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff0 <HAL_InitTick+0xdc>)
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff0 <HAL_InitTick+0xdc>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f82:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <HAL_InitTick+0xdc>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f88:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <HAL_InitTick+0xdc>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003f8e:	4818      	ldr	r0, [pc, #96]	@ (8003ff0 <HAL_InitTick+0xdc>)
 8003f90:	f002 fe5c 	bl	8006c4c <HAL_TIM_Base_Init>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11b      	bne.n	8003fda <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003fa2:	4813      	ldr	r0, [pc, #76]	@ (8003ff0 <HAL_InitTick+0xdc>)
 8003fa4:	f002 feac 	bl	8006d00 <HAL_TIM_Base_Start_IT>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d111      	bne.n	8003fda <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fb6:	2019      	movs	r0, #25
 8003fb8:	f000 fe82 	bl	8004cc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b0f      	cmp	r3, #15
 8003fc0:	d808      	bhi.n	8003fd4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	2019      	movs	r0, #25
 8003fc8:	f000 fe5e 	bl	8004c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff8 <HAL_InitTick+0xe4>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e002      	b.n	8003fda <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003fda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3730      	adds	r7, #48	@ 0x30
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	431bde83 	.word	0x431bde83
 8003ff0:	20000684 	.word	0x20000684
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	20000018 	.word	0x20000018

08003ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <NMI_Handler+0x4>

08004004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <HardFault_Handler+0x4>

0800400c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <MemManage_Handler+0x4>

08004014 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004018:	bf00      	nop
 800401a:	e7fd      	b.n	8004018 <BusFault_Handler+0x4>

0800401c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004020:	bf00      	nop
 8004022:	e7fd      	b.n	8004020 <UsageFault_Handler+0x4>

08004024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004038:	4802      	ldr	r0, [pc, #8]	@ (8004044 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800403a:	f002 fed1 	bl	8006de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000684 	.word	0x20000684

08004048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return 1;
 800404c:	2301      	movs	r3, #1
}
 800404e:	4618      	mov	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_kill>:

int _kill(int pid, int sig)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004062:	f006 faf9 	bl	800a658 <__errno>
 8004066:	4603      	mov	r3, r0
 8004068:	2216      	movs	r2, #22
 800406a:	601a      	str	r2, [r3, #0]
  return -1;
 800406c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <_exit>:

void _exit (int status)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004080:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ffe7 	bl	8004058 <_kill>
  while (1) {}    /* Make sure we hang here */
 800408a:	bf00      	nop
 800408c:	e7fd      	b.n	800408a <_exit+0x12>

0800408e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e00a      	b.n	80040b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040a0:	f3af 8000 	nop.w
 80040a4:	4601      	mov	r1, r0
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	60ba      	str	r2, [r7, #8]
 80040ac:	b2ca      	uxtb	r2, r1
 80040ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	3301      	adds	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	dbf0      	blt.n	80040a0 <_read+0x12>
  }

  return len;
 80040be:	687b      	ldr	r3, [r7, #4]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e009      	b.n	80040ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	60ba      	str	r2, [r7, #8]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	3301      	adds	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	dbf1      	blt.n	80040da <_write+0x12>
  }
  return len;
 80040f6:	687b      	ldr	r3, [r7, #4]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <_close>:

int _close(int file)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004128:	605a      	str	r2, [r3, #4]
  return 0;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_isatty>:

int _isatty(int file)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004140:	2301      	movs	r3, #1
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004170:	4a14      	ldr	r2, [pc, #80]	@ (80041c4 <_sbrk+0x5c>)
 8004172:	4b15      	ldr	r3, [pc, #84]	@ (80041c8 <_sbrk+0x60>)
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800417c:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <_sbrk+0x64>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004184:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <_sbrk+0x64>)
 8004186:	4a12      	ldr	r2, [pc, #72]	@ (80041d0 <_sbrk+0x68>)
 8004188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800418a:	4b10      	ldr	r3, [pc, #64]	@ (80041cc <_sbrk+0x64>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4413      	add	r3, r2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	429a      	cmp	r2, r3
 8004196:	d207      	bcs.n	80041a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004198:	f006 fa5e 	bl	800a658 <__errno>
 800419c:	4603      	mov	r3, r0
 800419e:	220c      	movs	r2, #12
 80041a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041a6:	e009      	b.n	80041bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041a8:	4b08      	ldr	r3, [pc, #32]	@ (80041cc <_sbrk+0x64>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ae:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <_sbrk+0x64>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	4a05      	ldr	r2, [pc, #20]	@ (80041cc <_sbrk+0x64>)
 80041b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ba:	68fb      	ldr	r3, [r7, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20020000 	.word	0x20020000
 80041c8:	00000400 	.word	0x00000400
 80041cc:	200006cc 	.word	0x200006cc
 80041d0:	20004578 	.word	0x20004578

080041d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041d8:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <SystemInit+0x20>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041de:	4a05      	ldr	r2, [pc, #20]	@ (80041f4 <SystemInit+0x20>)
 80041e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004230 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80041fc:	f7ff ffea 	bl	80041d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004200:	480c      	ldr	r0, [pc, #48]	@ (8004234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004202:	490d      	ldr	r1, [pc, #52]	@ (8004238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004204:	4a0d      	ldr	r2, [pc, #52]	@ (800423c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004208:	e002      	b.n	8004210 <LoopCopyDataInit>

0800420a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800420a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800420c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800420e:	3304      	adds	r3, #4

08004210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004214:	d3f9      	bcc.n	800420a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004216:	4a0a      	ldr	r2, [pc, #40]	@ (8004240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004218:	4c0a      	ldr	r4, [pc, #40]	@ (8004244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800421a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800421c:	e001      	b.n	8004222 <LoopFillZerobss>

0800421e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800421e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004220:	3204      	adds	r2, #4

08004222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004224:	d3fb      	bcc.n	800421e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004226:	f006 fa1d 	bl	800a664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800422a:	f7ff fb91 	bl	8003950 <main>
  bx  lr    
 800422e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004238:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800423c:	0800db90 	.word	0x0800db90
  ldr r2, =_sbss
 8004240:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004244:	20004574 	.word	0x20004574

08004248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004248:	e7fe      	b.n	8004248 <ADC_IRQHandler>
	...

0800424c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004250:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <HAL_Init+0x40>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0d      	ldr	r2, [pc, #52]	@ (800428c <HAL_Init+0x40>)
 8004256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800425a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_Init+0x40>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <HAL_Init+0x40>)
 8004262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004268:	4b08      	ldr	r3, [pc, #32]	@ (800428c <HAL_Init+0x40>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a07      	ldr	r2, [pc, #28]	@ (800428c <HAL_Init+0x40>)
 800426e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004274:	2003      	movs	r0, #3
 8004276:	f000 fcfc 	bl	8004c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800427a:	200f      	movs	r0, #15
 800427c:	f7ff fe4a 	bl	8003f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004280:	f7ff fd48 	bl	8003d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40023c00 	.word	0x40023c00

08004290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004294:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <HAL_IncTick+0x20>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <HAL_IncTick+0x24>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4413      	add	r3, r2
 80042a0:	4a04      	ldr	r2, [pc, #16]	@ (80042b4 <HAL_IncTick+0x24>)
 80042a2:	6013      	str	r3, [r2, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	2000001c 	.word	0x2000001c
 80042b4:	200006d0 	.word	0x200006d0

080042b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return uwTick;
 80042bc:	4b03      	ldr	r3, [pc, #12]	@ (80042cc <HAL_GetTick+0x14>)
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	200006d0 	.word	0x200006d0

080042d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042d8:	f7ff ffee 	bl	80042b8 <HAL_GetTick>
 80042dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042e8:	d005      	beq.n	80042f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004314 <HAL_Delay+0x44>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042f6:	bf00      	nop
 80042f8:	f7ff ffde 	bl	80042b8 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	429a      	cmp	r2, r3
 8004306:	d8f7      	bhi.n	80042f8 <HAL_Delay+0x28>
  {
  }
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	2000001c 	.word	0x2000001c

08004318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e033      	b.n	8004396 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fd18 	bl	8003d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b00      	cmp	r3, #0
 8004354:	d118      	bne.n	8004388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800435e:	f023 0302 	bic.w	r3, r3, #2
 8004362:	f043 0202 	orr.w	r2, r3, #2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fad8 	bl	8004920 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	f043 0201 	orr.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	641a      	str	r2, [r3, #64]	@ 0x40
 8004386:	e001      	b.n	800438c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_ADC_Start+0x1a>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e0b2      	b.n	8004520 <HAL_ADC_Start+0x180>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d018      	beq.n	8004402 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043e0:	4b52      	ldr	r3, [pc, #328]	@ (800452c <HAL_ADC_Start+0x18c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a52      	ldr	r2, [pc, #328]	@ (8004530 <HAL_ADC_Start+0x190>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0c9a      	lsrs	r2, r3, #18
 80043ec:	4613      	mov	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	4413      	add	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80043f4:	e002      	b.n	80043fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f9      	bne.n	80043f6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d17a      	bne.n	8004506 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004414:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800443a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444e:	d106      	bne.n	800445e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004454:	f023 0206 	bic.w	r2, r3, #6
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	645a      	str	r2, [r3, #68]	@ 0x44
 800445c:	e002      	b.n	8004464 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800446c:	4b31      	ldr	r3, [pc, #196]	@ (8004534 <HAL_ADC_Start+0x194>)
 800446e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004478:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2b00      	cmp	r3, #0
 8004484:	d12a      	bne.n	80044dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2b      	ldr	r2, [pc, #172]	@ (8004538 <HAL_ADC_Start+0x198>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d015      	beq.n	80044bc <HAL_ADC_Start+0x11c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a29      	ldr	r2, [pc, #164]	@ (800453c <HAL_ADC_Start+0x19c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d105      	bne.n	80044a6 <HAL_ADC_Start+0x106>
 800449a:	4b26      	ldr	r3, [pc, #152]	@ (8004534 <HAL_ADC_Start+0x194>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a25      	ldr	r2, [pc, #148]	@ (8004540 <HAL_ADC_Start+0x1a0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d136      	bne.n	800451e <HAL_ADC_Start+0x17e>
 80044b0:	4b20      	ldr	r3, [pc, #128]	@ (8004534 <HAL_ADC_Start+0x194>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d130      	bne.n	800451e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d129      	bne.n	800451e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	e020      	b.n	800451e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <HAL_ADC_Start+0x198>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d11b      	bne.n	800451e <HAL_ADC_Start+0x17e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d114      	bne.n	800451e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	e00b      	b.n	800451e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f043 0210 	orr.w	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004516:	f043 0201 	orr.w	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	20000014 	.word	0x20000014
 8004530:	431bde83 	.word	0x431bde83
 8004534:	40012300 	.word	0x40012300
 8004538:	40012000 	.word	0x40012000
 800453c:	40012100 	.word	0x40012100
 8004540:	40012200 	.word	0x40012200

08004544 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_ADC_Stop+0x16>
 8004556:	2302      	movs	r3, #2
 8004558:	e021      	b.n	800459e <HAL_ADC_Stop+0x5a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	f043 0201 	orr.w	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c6:	d113      	bne.n	80045f0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d6:	d10b      	bne.n	80045f0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e063      	b.n	80046b8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80045f0:	f7ff fe62 	bl	80042b8 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045f6:	e021      	b.n	800463c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045fe:	d01d      	beq.n	800463c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <HAL_ADC_PollForConversion+0x6c>
 8004606:	f7ff fe57 	bl	80042b8 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d212      	bcs.n	800463c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d00b      	beq.n	800463c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	f043 0204 	orr.w	r2, r3, #4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e03d      	b.n	80046b8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d1d6      	bne.n	80045f8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0212 	mvn.w	r2, #18
 8004652:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d123      	bne.n	80046b6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004672:	2b00      	cmp	r3, #0
 8004674:	d11f      	bne.n	80046b6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004680:	2b00      	cmp	r3, #0
 8004682:	d006      	beq.n	8004692 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800468e:	2b00      	cmp	r3, #0
 8004690:	d111      	bne.n	80046b6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	f043 0201 	orr.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x1c>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e105      	b.n	8004904 <HAL_ADC_ConfigChannel+0x228>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b09      	cmp	r3, #9
 8004706:	d925      	bls.n	8004754 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68d9      	ldr	r1, [r3, #12]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	4613      	mov	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	3b1e      	subs	r3, #30
 800471e:	2207      	movs	r2, #7
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43da      	mvns	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	400a      	ands	r2, r1
 800472c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68d9      	ldr	r1, [r3, #12]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	b29b      	uxth	r3, r3
 800473e:	4618      	mov	r0, r3
 8004740:	4603      	mov	r3, r0
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4403      	add	r3, r0
 8004746:	3b1e      	subs	r3, #30
 8004748:	409a      	lsls	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	60da      	str	r2, [r3, #12]
 8004752:	e022      	b.n	800479a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6919      	ldr	r1, [r3, #16]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	2207      	movs	r2, #7
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43da      	mvns	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	400a      	ands	r2, r1
 8004776:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6919      	ldr	r1, [r3, #16]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	4618      	mov	r0, r3
 800478a:	4603      	mov	r3, r0
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	4403      	add	r3, r0
 8004790:	409a      	lsls	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d824      	bhi.n	80047ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	3b05      	subs	r3, #5
 80047b4:	221f      	movs	r2, #31
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43da      	mvns	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	400a      	ands	r2, r1
 80047c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	4618      	mov	r0, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	3b05      	subs	r3, #5
 80047de:	fa00 f203 	lsl.w	r2, r0, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80047ea:	e04c      	b.n	8004886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	d824      	bhi.n	800483e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	3b23      	subs	r3, #35	@ 0x23
 8004806:	221f      	movs	r2, #31
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43da      	mvns	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	400a      	ands	r2, r1
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	4618      	mov	r0, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	3b23      	subs	r3, #35	@ 0x23
 8004830:	fa00 f203 	lsl.w	r2, r0, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30
 800483c:	e023      	b.n	8004886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	3b41      	subs	r3, #65	@ 0x41
 8004850:	221f      	movs	r2, #31
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43da      	mvns	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	400a      	ands	r2, r1
 800485e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	4618      	mov	r0, r3
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	3b41      	subs	r3, #65	@ 0x41
 800487a:	fa00 f203 	lsl.w	r2, r0, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004886:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <HAL_ADC_ConfigChannel+0x234>)
 8004888:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a21      	ldr	r2, [pc, #132]	@ (8004914 <HAL_ADC_ConfigChannel+0x238>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d109      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x1cc>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b12      	cmp	r3, #18
 800489a:	d105      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a19      	ldr	r2, [pc, #100]	@ (8004914 <HAL_ADC_ConfigChannel+0x238>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d123      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x21e>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b10      	cmp	r3, #16
 80048b8:	d003      	beq.n	80048c2 <HAL_ADC_ConfigChannel+0x1e6>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b11      	cmp	r3, #17
 80048c0:	d11b      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d111      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048d6:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <HAL_ADC_ConfigChannel+0x23c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a10      	ldr	r2, [pc, #64]	@ (800491c <HAL_ADC_ConfigChannel+0x240>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	0c9a      	lsrs	r2, r3, #18
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80048ec:	e002      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f9      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	40012300 	.word	0x40012300
 8004914:	40012000 	.word	0x40012000
 8004918:	20000014 	.word	0x20000014
 800491c:	431bde83 	.word	0x431bde83

08004920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004928:	4b79      	ldr	r3, [pc, #484]	@ (8004b10 <ADC_Init+0x1f0>)
 800492a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	431a      	orrs	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	021a      	lsls	r2, r3, #8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800499a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6899      	ldr	r1, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b2:	4a58      	ldr	r2, [pc, #352]	@ (8004b14 <ADC_Init+0x1f4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6899      	ldr	r1, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6899      	ldr	r1, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	e00f      	b.n	8004a1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a1c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0202 	bic.w	r2, r2, #2
 8004a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6899      	ldr	r1, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	7e1b      	ldrb	r3, [r3, #24]
 8004a38:	005a      	lsls	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a5a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004a6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	3b01      	subs	r3, #1
 8004a78:	035a      	lsls	r2, r3, #13
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	e007      	b.n	8004a94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a92:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	051a      	lsls	r2, r3, #20
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ad6:	025a      	lsls	r2, r3, #9
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6899      	ldr	r1, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	029a      	lsls	r2, r3, #10
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40012300 	.word	0x40012300
 8004b14:	0f000001 	.word	0x0f000001

08004b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b28:	4b0c      	ldr	r3, [pc, #48]	@ (8004b5c <__NVIC_SetPriorityGrouping+0x44>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b34:	4013      	ands	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b4a:	4a04      	ldr	r2, [pc, #16]	@ (8004b5c <__NVIC_SetPriorityGrouping+0x44>)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	60d3      	str	r3, [r2, #12]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b64:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <__NVIC_GetPriorityGrouping+0x18>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 0307 	and.w	r3, r3, #7
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	db0b      	blt.n	8004ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	f003 021f 	and.w	r2, r3, #31
 8004b94:	4907      	ldr	r1, [pc, #28]	@ (8004bb4 <__NVIC_EnableIRQ+0x38>)
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	e000e100 	.word	0xe000e100

08004bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	6039      	str	r1, [r7, #0]
 8004bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db0a      	blt.n	8004be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	490c      	ldr	r1, [pc, #48]	@ (8004c04 <__NVIC_SetPriority+0x4c>)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	0112      	lsls	r2, r2, #4
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be0:	e00a      	b.n	8004bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	4908      	ldr	r1, [pc, #32]	@ (8004c08 <__NVIC_SetPriority+0x50>)
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	0112      	lsls	r2, r2, #4
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	761a      	strb	r2, [r3, #24]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000e100 	.word	0xe000e100
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	@ 0x24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f1c3 0307 	rsb	r3, r3, #7
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	bf28      	it	cs
 8004c2a:	2304      	movcs	r3, #4
 8004c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3304      	adds	r3, #4
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d902      	bls.n	8004c3c <NVIC_EncodePriority+0x30>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3b03      	subs	r3, #3
 8004c3a:	e000      	b.n	8004c3e <NVIC_EncodePriority+0x32>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	401a      	ands	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	43d9      	mvns	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	4313      	orrs	r3, r2
         );
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3724      	adds	r7, #36	@ 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff4c 	bl	8004b18 <__NVIC_SetPriorityGrouping>
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c9a:	f7ff ff61 	bl	8004b60 <__NVIC_GetPriorityGrouping>
 8004c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	6978      	ldr	r0, [r7, #20]
 8004ca6:	f7ff ffb1 	bl	8004c0c <NVIC_EncodePriority>
 8004caa:	4602      	mov	r2, r0
 8004cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ff80 	bl	8004bb8 <__NVIC_SetPriority>
}
 8004cb8:	bf00      	nop
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff ff54 	bl	8004b7c <__NVIC_EnableIRQ>
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b089      	sub	sp, #36	@ 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e16b      	b.n	8004fd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	f040 815a 	bne.w	8004fca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d005      	beq.n	8004d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d130      	bne.n	8004d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	2203      	movs	r2, #3
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4013      	ands	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d64:	2201      	movs	r2, #1
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	f003 0201 	and.w	r2, r3, #1
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d017      	beq.n	8004dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2203      	movs	r2, #3
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d123      	bne.n	8004e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	08da      	lsrs	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3208      	adds	r2, #8
 8004de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	220f      	movs	r2, #15
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	08da      	lsrs	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3208      	adds	r2, #8
 8004e1a:	69b9      	ldr	r1, [r7, #24]
 8004e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43db      	mvns	r3, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0203 	and.w	r2, r3, #3
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80b4 	beq.w	8004fca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	4b60      	ldr	r3, [pc, #384]	@ (8004fe8 <HAL_GPIO_Init+0x30c>)
 8004e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6a:	4a5f      	ldr	r2, [pc, #380]	@ (8004fe8 <HAL_GPIO_Init+0x30c>)
 8004e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e72:	4b5d      	ldr	r3, [pc, #372]	@ (8004fe8 <HAL_GPIO_Init+0x30c>)
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8004fec <HAL_GPIO_Init+0x310>)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	3302      	adds	r3, #2
 8004e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	@ (8004ff0 <HAL_GPIO_Init+0x314>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <HAL_GPIO_Init+0x226>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a51      	ldr	r2, [pc, #324]	@ (8004ff4 <HAL_GPIO_Init+0x318>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d025      	beq.n	8004efe <HAL_GPIO_Init+0x222>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a50      	ldr	r2, [pc, #320]	@ (8004ff8 <HAL_GPIO_Init+0x31c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <HAL_GPIO_Init+0x21e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8004ffc <HAL_GPIO_Init+0x320>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d019      	beq.n	8004ef6 <HAL_GPIO_Init+0x21a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8005000 <HAL_GPIO_Init+0x324>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0x216>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a4d      	ldr	r2, [pc, #308]	@ (8005004 <HAL_GPIO_Init+0x328>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00d      	beq.n	8004eee <HAL_GPIO_Init+0x212>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8005008 <HAL_GPIO_Init+0x32c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0x20e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a4b      	ldr	r2, [pc, #300]	@ (800500c <HAL_GPIO_Init+0x330>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_GPIO_Init+0x20a>
 8004ee2:	2307      	movs	r3, #7
 8004ee4:	e00e      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	e00c      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004eea:	2306      	movs	r3, #6
 8004eec:	e00a      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004eee:	2305      	movs	r3, #5
 8004ef0:	e008      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	e006      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e004      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e002      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004f02:	2300      	movs	r3, #0
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	f002 0203 	and.w	r2, r2, #3
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	4093      	lsls	r3, r2
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f14:	4935      	ldr	r1, [pc, #212]	@ (8004fec <HAL_GPIO_Init+0x310>)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f22:	4b3b      	ldr	r3, [pc, #236]	@ (8005010 <HAL_GPIO_Init+0x334>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f46:	4a32      	ldr	r2, [pc, #200]	@ (8005010 <HAL_GPIO_Init+0x334>)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f4c:	4b30      	ldr	r3, [pc, #192]	@ (8005010 <HAL_GPIO_Init+0x334>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	43db      	mvns	r3, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f70:	4a27      	ldr	r2, [pc, #156]	@ (8005010 <HAL_GPIO_Init+0x334>)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f76:	4b26      	ldr	r3, [pc, #152]	@ (8005010 <HAL_GPIO_Init+0x334>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005010 <HAL_GPIO_Init+0x334>)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8005010 <HAL_GPIO_Init+0x334>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc4:	4a12      	ldr	r2, [pc, #72]	@ (8005010 <HAL_GPIO_Init+0x334>)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	f67f ae90 	bls.w	8004cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3724      	adds	r7, #36	@ 0x24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40013800 	.word	0x40013800
 8004ff0:	40020000 	.word	0x40020000
 8004ff4:	40020400 	.word	0x40020400
 8004ff8:	40020800 	.word	0x40020800
 8004ffc:	40020c00 	.word	0x40020c00
 8005000:	40021000 	.word	0x40021000
 8005004:	40021400 	.word	0x40021400
 8005008:	40021800 	.word	0x40021800
 800500c:	40021c00 	.word	0x40021c00
 8005010:	40013c00 	.word	0x40013c00

08005014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e12b      	b.n	800527e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fe feda 	bl	8003df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2224      	movs	r2, #36	@ 0x24
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0201 	bic.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005078:	f001 fd8e 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 800507c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4a81      	ldr	r2, [pc, #516]	@ (8005288 <HAL_I2C_Init+0x274>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d807      	bhi.n	8005098 <HAL_I2C_Init+0x84>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a80      	ldr	r2, [pc, #512]	@ (800528c <HAL_I2C_Init+0x278>)
 800508c:	4293      	cmp	r3, r2
 800508e:	bf94      	ite	ls
 8005090:	2301      	movls	r3, #1
 8005092:	2300      	movhi	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	e006      	b.n	80050a6 <HAL_I2C_Init+0x92>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a7d      	ldr	r2, [pc, #500]	@ (8005290 <HAL_I2C_Init+0x27c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	bf94      	ite	ls
 80050a0:	2301      	movls	r3, #1
 80050a2:	2300      	movhi	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e0e7      	b.n	800527e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4a78      	ldr	r2, [pc, #480]	@ (8005294 <HAL_I2C_Init+0x280>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	0c9b      	lsrs	r3, r3, #18
 80050b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4a6a      	ldr	r2, [pc, #424]	@ (8005288 <HAL_I2C_Init+0x274>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d802      	bhi.n	80050e8 <HAL_I2C_Init+0xd4>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	3301      	adds	r3, #1
 80050e6:	e009      	b.n	80050fc <HAL_I2C_Init+0xe8>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	4a69      	ldr	r2, [pc, #420]	@ (8005298 <HAL_I2C_Init+0x284>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	099b      	lsrs	r3, r3, #6
 80050fa:	3301      	adds	r3, #1
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	430b      	orrs	r3, r1
 8005102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800510e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	495c      	ldr	r1, [pc, #368]	@ (8005288 <HAL_I2C_Init+0x274>)
 8005118:	428b      	cmp	r3, r1
 800511a:	d819      	bhi.n	8005150 <HAL_I2C_Init+0x13c>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1e59      	subs	r1, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	fbb1 f3f3 	udiv	r3, r1, r3
 800512a:	1c59      	adds	r1, r3, #1
 800512c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005130:	400b      	ands	r3, r1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_I2C_Init+0x138>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1e59      	subs	r1, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	fbb1 f3f3 	udiv	r3, r1, r3
 8005144:	3301      	adds	r3, #1
 8005146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514a:	e051      	b.n	80051f0 <HAL_I2C_Init+0x1dc>
 800514c:	2304      	movs	r3, #4
 800514e:	e04f      	b.n	80051f0 <HAL_I2C_Init+0x1dc>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d111      	bne.n	800517c <HAL_I2C_Init+0x168>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1e58      	subs	r0, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	440b      	add	r3, r1
 8005166:	fbb0 f3f3 	udiv	r3, r0, r3
 800516a:	3301      	adds	r3, #1
 800516c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e012      	b.n	80051a2 <HAL_I2C_Init+0x18e>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1e58      	subs	r0, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	0099      	lsls	r1, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005192:	3301      	adds	r3, #1
 8005194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf0c      	ite	eq
 800519c:	2301      	moveq	r3, #1
 800519e:	2300      	movne	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Init+0x196>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e022      	b.n	80051f0 <HAL_I2C_Init+0x1dc>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10e      	bne.n	80051d0 <HAL_I2C_Init+0x1bc>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1e58      	subs	r0, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6859      	ldr	r1, [r3, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	440b      	add	r3, r1
 80051c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c4:	3301      	adds	r3, #1
 80051c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ce:	e00f      	b.n	80051f0 <HAL_I2C_Init+0x1dc>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	1e58      	subs	r0, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6859      	ldr	r1, [r3, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	0099      	lsls	r1, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e6:	3301      	adds	r3, #1
 80051e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	6809      	ldr	r1, [r1, #0]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69da      	ldr	r2, [r3, #28]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800521e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6911      	ldr	r1, [r2, #16]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68d2      	ldr	r2, [r2, #12]
 800522a:	4311      	orrs	r1, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	430b      	orrs	r3, r1
 8005232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	000186a0 	.word	0x000186a0
 800528c:	001e847f 	.word	0x001e847f
 8005290:	003d08ff 	.word	0x003d08ff
 8005294:	431bde83 	.word	0x431bde83
 8005298:	10624dd3 	.word	0x10624dd3

0800529c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	817b      	strh	r3, [r7, #10]
 80052ae:	460b      	mov	r3, r1
 80052b0:	813b      	strh	r3, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052b6:	f7fe ffff 	bl	80042b8 <HAL_GetTick>
 80052ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	f040 80d9 	bne.w	800547c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	2319      	movs	r3, #25
 80052d0:	2201      	movs	r2, #1
 80052d2:	496d      	ldr	r1, [pc, #436]	@ (8005488 <HAL_I2C_Mem_Write+0x1ec>)
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fdb9 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052e0:	2302      	movs	r3, #2
 80052e2:	e0cc      	b.n	800547e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_I2C_Mem_Write+0x56>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e0c5      	b.n	800547e <HAL_I2C_Mem_Write+0x1e2>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d007      	beq.n	8005318 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2221      	movs	r2, #33	@ 0x21
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2240      	movs	r2, #64	@ 0x40
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a3a      	ldr	r2, [r7, #32]
 8005342:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005348:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a4d      	ldr	r2, [pc, #308]	@ (800548c <HAL_I2C_Mem_Write+0x1f0>)
 8005358:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800535a:	88f8      	ldrh	r0, [r7, #6]
 800535c:	893a      	ldrh	r2, [r7, #8]
 800535e:	8979      	ldrh	r1, [r7, #10]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	4603      	mov	r3, r0
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fbf0 	bl	8005b50 <I2C_RequestMemoryWrite>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d052      	beq.n	800541c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e081      	b.n	800547e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fe7e 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00d      	beq.n	80053a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	2b04      	cmp	r3, #4
 8005390:	d107      	bne.n	80053a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e06b      	b.n	800547e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	781a      	ldrb	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d11b      	bne.n	800541c <HAL_I2C_Mem_Write+0x180>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d017      	beq.n	800541c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	781a      	ldrb	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1aa      	bne.n	800537a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fe71 	bl	8006110 <I2C_WaitOnBTFFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00d      	beq.n	8005450 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005438:	2b04      	cmp	r3, #4
 800543a:	d107      	bne.n	800544c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800544a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e016      	b.n	800547e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800545e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	e000      	b.n	800547e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800547c:	2302      	movs	r3, #2
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	00100002 	.word	0x00100002
 800548c:	ffff0000 	.word	0xffff0000

08005490 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08c      	sub	sp, #48	@ 0x30
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	4608      	mov	r0, r1
 800549a:	4611      	mov	r1, r2
 800549c:	461a      	mov	r2, r3
 800549e:	4603      	mov	r3, r0
 80054a0:	817b      	strh	r3, [r7, #10]
 80054a2:	460b      	mov	r3, r1
 80054a4:	813b      	strh	r3, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054aa:	f7fe ff05 	bl	80042b8 <HAL_GetTick>
 80054ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	f040 8214 	bne.w	80058e6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	2319      	movs	r3, #25
 80054c4:	2201      	movs	r2, #1
 80054c6:	497b      	ldr	r1, [pc, #492]	@ (80056b4 <HAL_I2C_Mem_Read+0x224>)
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fcbf 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
 80054d6:	e207      	b.n	80058e8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_I2C_Mem_Read+0x56>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e200      	b.n	80058e8 <HAL_I2C_Mem_Read+0x458>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d007      	beq.n	800550c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800551a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2222      	movs	r2, #34	@ 0x22
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2240      	movs	r2, #64	@ 0x40
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005536:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800553c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a5b      	ldr	r2, [pc, #364]	@ (80056b8 <HAL_I2C_Mem_Read+0x228>)
 800554c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800554e:	88f8      	ldrh	r0, [r7, #6]
 8005550:	893a      	ldrh	r2, [r7, #8]
 8005552:	8979      	ldrh	r1, [r7, #10]
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	4603      	mov	r3, r0
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fb8c 	bl	8005c7c <I2C_RequestMemoryRead>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e1bc      	b.n	80058e8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005572:	2b00      	cmp	r3, #0
 8005574:	d113      	bne.n	800559e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005576:	2300      	movs	r3, #0
 8005578:	623b      	str	r3, [r7, #32]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	623b      	str	r3, [r7, #32]
 800558a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e190      	b.n	80058c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d11b      	bne.n	80055de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e170      	b.n	80058c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d11b      	bne.n	800561e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005604:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005606:	2300      	movs	r3, #0
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	e150      	b.n	80058c0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005634:	e144      	b.n	80058c0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563a:	2b03      	cmp	r3, #3
 800563c:	f200 80f1 	bhi.w	8005822 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005644:	2b01      	cmp	r3, #1
 8005646:	d123      	bne.n	8005690 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fda7 	bl	80061a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e145      	b.n	80058e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800568e:	e117      	b.n	80058c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005694:	2b02      	cmp	r3, #2
 8005696:	d14e      	bne.n	8005736 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569e:	2200      	movs	r2, #0
 80056a0:	4906      	ldr	r1, [pc, #24]	@ (80056bc <HAL_I2C_Mem_Read+0x22c>)
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fbd2 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e11a      	b.n	80058e8 <HAL_I2C_Mem_Read+0x458>
 80056b2:	bf00      	nop
 80056b4:	00100002 	.word	0x00100002
 80056b8:	ffff0000 	.word	0xffff0000
 80056bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005734:	e0c4      	b.n	80058c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573c:	2200      	movs	r2, #0
 800573e:	496c      	ldr	r1, [pc, #432]	@ (80058f0 <HAL_I2C_Mem_Read+0x460>)
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fb83 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e0cb      	b.n	80058e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800575e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	2200      	movs	r2, #0
 800579a:	4955      	ldr	r1, [pc, #340]	@ (80058f0 <HAL_I2C_Mem_Read+0x460>)
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fb55 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e09d      	b.n	80058e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005820:	e04e      	b.n	80058c0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005824:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fcba 	bl	80061a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e058      	b.n	80058e8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b04      	cmp	r3, #4
 8005874:	d124      	bne.n	80058c0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800587a:	2b03      	cmp	r3, #3
 800587c:	d107      	bne.n	800588e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f aeb6 	bne.w	8005636 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3728      	adds	r7, #40	@ 0x28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	00010004 	.word	0x00010004

080058f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	@ 0x28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	460b      	mov	r3, r1
 8005902:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005904:	f7fe fcd8 	bl	80042b8 <HAL_GetTick>
 8005908:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b20      	cmp	r3, #32
 8005918:	f040 8111 	bne.w	8005b3e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	2319      	movs	r3, #25
 8005922:	2201      	movs	r2, #1
 8005924:	4988      	ldr	r1, [pc, #544]	@ (8005b48 <HAL_I2C_IsDeviceReady+0x254>)
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fa90 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
 8005934:	e104      	b.n	8005b40 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_I2C_IsDeviceReady+0x50>
 8005940:	2302      	movs	r3, #2
 8005942:	e0fd      	b.n	8005b40 <HAL_I2C_IsDeviceReady+0x24c>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b01      	cmp	r3, #1
 8005958:	d007      	beq.n	800596a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005978:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2224      	movs	r2, #36	@ 0x24
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a70      	ldr	r2, [pc, #448]	@ (8005b4c <HAL_I2C_IsDeviceReady+0x258>)
 800598c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800599c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fa4e 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00d      	beq.n	80059d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059c4:	d103      	bne.n	80059ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059cc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e0b6      	b.n	8005b40 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059d2:	897b      	ldrh	r3, [r7, #10]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80059e2:	f7fe fc69 	bl	80042b8 <HAL_GetTick>
 80059e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a0c:	bf0c      	ite	eq
 8005a0e:	2301      	moveq	r3, #1
 8005a10:	2300      	movne	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a16:	e025      	b.n	8005a64 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a18:	f7fe fc4e 	bl	80042b8 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <HAL_I2C_IsDeviceReady+0x13a>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	22a0      	movs	r2, #160	@ 0xa0
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a6e:	d005      	beq.n	8005a7c <HAL_I2C_IsDeviceReady+0x188>
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <HAL_I2C_IsDeviceReady+0x188>
 8005a76:	7dbb      	ldrb	r3, [r7, #22]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0cd      	beq.n	8005a18 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d129      	bne.n	8005ae6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aa0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2319      	movs	r3, #25
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4921      	ldr	r1, [pc, #132]	@ (8005b48 <HAL_I2C_IsDeviceReady+0x254>)
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f9c2 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e036      	b.n	8005b40 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e02c      	b.n	8005b40 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005afe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	2319      	movs	r3, #25
 8005b06:	2201      	movs	r2, #1
 8005b08:	490f      	ldr	r1, [pc, #60]	@ (8005b48 <HAL_I2C_IsDeviceReady+0x254>)
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f99e 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e012      	b.n	8005b40 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	f4ff af32 	bcc.w	800598e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005b3e:	2302      	movs	r3, #2
  }
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3720      	adds	r7, #32
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	00100002 	.word	0x00100002
 8005b4c:	ffff0000 	.word	0xffff0000

08005b50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	817b      	strh	r3, [r7, #10]
 8005b62:	460b      	mov	r3, r1
 8005b64:	813b      	strh	r3, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f960 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00d      	beq.n	8005bae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba0:	d103      	bne.n	8005baa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e05f      	b.n	8005c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bae:	897b      	ldrh	r3, [r7, #10]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	6a3a      	ldr	r2, [r7, #32]
 8005bc2:	492d      	ldr	r1, [pc, #180]	@ (8005c78 <I2C_RequestMemoryWrite+0x128>)
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f9bb 	bl	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e04c      	b.n	8005c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bec:	6a39      	ldr	r1, [r7, #32]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fa46 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00d      	beq.n	8005c16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d107      	bne.n	8005c12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e02b      	b.n	8005c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d105      	bne.n	8005c28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c1c:	893b      	ldrh	r3, [r7, #8]
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	611a      	str	r2, [r3, #16]
 8005c26:	e021      	b.n	8005c6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c28:	893b      	ldrh	r3, [r7, #8]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c38:	6a39      	ldr	r1, [r7, #32]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fa20 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00d      	beq.n	8005c62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d107      	bne.n	8005c5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e005      	b.n	8005c6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c62:	893b      	ldrh	r3, [r7, #8]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	00010002 	.word	0x00010002

08005c7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	817b      	strh	r3, [r7, #10]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	813b      	strh	r3, [r7, #8]
 8005c92:	4613      	mov	r3, r2
 8005c94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f8c2 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cdc:	d103      	bne.n	8005ce6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ce4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e0aa      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cea:	897b      	ldrh	r3, [r7, #10]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	6a3a      	ldr	r2, [r7, #32]
 8005cfe:	4952      	ldr	r1, [pc, #328]	@ (8005e48 <I2C_RequestMemoryRead+0x1cc>)
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f91d 	bl	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e097      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d28:	6a39      	ldr	r1, [r7, #32]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f9a8 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d107      	bne.n	8005d4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e076      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d58:	893b      	ldrh	r3, [r7, #8]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	611a      	str	r2, [r3, #16]
 8005d62:	e021      	b.n	8005da8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d64:	893b      	ldrh	r3, [r7, #8]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d74:	6a39      	ldr	r1, [r7, #32]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f982 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d107      	bne.n	8005d9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e050      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d9e:	893b      	ldrh	r3, [r7, #8]
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005daa:	6a39      	ldr	r1, [r7, #32]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f967 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00d      	beq.n	8005dd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d107      	bne.n	8005dd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e035      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005de2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f82b 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00d      	beq.n	8005e18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e0a:	d103      	bne.n	8005e14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e013      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e18:	897b      	ldrh	r3, [r7, #10]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	6a3a      	ldr	r2, [r7, #32]
 8005e2c:	4906      	ldr	r1, [pc, #24]	@ (8005e48 <I2C_RequestMemoryRead+0x1cc>)
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f886 	bl	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	00010002 	.word	0x00010002

08005e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e5c:	e048      	b.n	8005ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e64:	d044      	beq.n	8005ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e66:	f7fe fa27 	bl	80042b8 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d302      	bcc.n	8005e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d139      	bne.n	8005ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d10d      	bne.n	8005ea2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	43da      	mvns	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4013      	ands	r3, r2
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	e00c      	b.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	43da      	mvns	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d116      	bne.n	8005ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e023      	b.n	8005f38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10d      	bne.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	43da      	mvns	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4013      	ands	r3, r2
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	e00c      	b.n	8005f30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	43da      	mvns	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	4013      	ands	r3, r2
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bf0c      	ite	eq
 8005f28:	2301      	moveq	r3, #1
 8005f2a:	2300      	movne	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d093      	beq.n	8005e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4e:	e071      	b.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5e:	d123      	bne.n	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f94:	f043 0204 	orr.w	r2, r3, #4
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e067      	b.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fae:	d041      	beq.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb0:	f7fe f982 	bl	80042b8 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d302      	bcc.n	8005fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d136      	bne.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	0c1b      	lsrs	r3, r3, #16
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d10c      	bne.n	8005fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	2301      	movne	r3, #1
 8005fe4:	2300      	moveq	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	e00b      	b.n	8006002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	43da      	mvns	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf14      	ite	ne
 8005ffc:	2301      	movne	r3, #1
 8005ffe:	2300      	moveq	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	f043 0220 	orr.w	r2, r3, #32
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e021      	b.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	0c1b      	lsrs	r3, r3, #16
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	d10c      	bne.n	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	43da      	mvns	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4013      	ands	r3, r2
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	e00b      	b.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	43da      	mvns	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	bf14      	ite	ne
 800606a:	2301      	movne	r3, #1
 800606c:	2300      	moveq	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	f47f af6d 	bne.w	8005f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800608c:	e034      	b.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f8e3 	bl	800625a <I2C_IsAcknowledgeFailed>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e034      	b.n	8006108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060a4:	d028      	beq.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fe f907 	bl	80042b8 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d11d      	bne.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c6:	2b80      	cmp	r3, #128	@ 0x80
 80060c8:	d016      	beq.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e007      	b.n	8006108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b80      	cmp	r3, #128	@ 0x80
 8006104:	d1c3      	bne.n	800608e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800611c:	e034      	b.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f89b 	bl	800625a <I2C_IsAcknowledgeFailed>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e034      	b.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006134:	d028      	beq.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006136:	f7fe f8bf 	bl	80042b8 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	429a      	cmp	r2, r3
 8006144:	d302      	bcc.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d11d      	bne.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b04      	cmp	r3, #4
 8006158:	d016      	beq.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	f043 0220 	orr.w	r2, r3, #32
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e007      	b.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b04      	cmp	r3, #4
 8006194:	d1c3      	bne.n	800611e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061ac:	e049      	b.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d119      	bne.n	80061f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0210 	mvn.w	r2, #16
 80061c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e030      	b.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f0:	f7fe f862 	bl	80042b8 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d302      	bcc.n	8006206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11d      	bne.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006210:	2b40      	cmp	r3, #64	@ 0x40
 8006212:	d016      	beq.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	f043 0220 	orr.w	r2, r3, #32
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e007      	b.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624c:	2b40      	cmp	r3, #64	@ 0x40
 800624e:	d1ae      	bne.n	80061ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006270:	d11b      	bne.n	80062aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800627a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	f043 0204 	orr.w	r2, r3, #4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e267      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d075      	beq.n	80063c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80062d6:	4b88      	ldr	r3, [pc, #544]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d00c      	beq.n	80062fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e2:	4b85      	ldr	r3, [pc, #532]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d112      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ee:	4b82      	ldr	r3, [pc, #520]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062fa:	d10b      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	4b7e      	ldr	r3, [pc, #504]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d05b      	beq.n	80063c0 <HAL_RCC_OscConfig+0x108>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d157      	bne.n	80063c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e242      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800631c:	d106      	bne.n	800632c <HAL_RCC_OscConfig+0x74>
 800631e:	4b76      	ldr	r3, [pc, #472]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a75      	ldr	r2, [pc, #468]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	e01d      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006334:	d10c      	bne.n	8006350 <HAL_RCC_OscConfig+0x98>
 8006336:	4b70      	ldr	r3, [pc, #448]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a6f      	ldr	r2, [pc, #444]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 800633c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	4b6d      	ldr	r3, [pc, #436]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a6c      	ldr	r2, [pc, #432]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e00b      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 8006350:	4b69      	ldr	r3, [pc, #420]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a68      	ldr	r2, [pc, #416]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	4b66      	ldr	r3, [pc, #408]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a65      	ldr	r2, [pc, #404]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d013      	beq.n	8006398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006370:	f7fd ffa2 	bl	80042b8 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006378:	f7fd ff9e 	bl	80042b8 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b64      	cmp	r3, #100	@ 0x64
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e207      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b5b      	ldr	r3, [pc, #364]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0xc0>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fd ff8e 	bl	80042b8 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063a0:	f7fd ff8a 	bl	80042b8 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b64      	cmp	r3, #100	@ 0x64
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e1f3      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063b2:	4b51      	ldr	r3, [pc, #324]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0xe8>
 80063be:	e000      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d063      	beq.n	8006496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80063ce:	4b4a      	ldr	r3, [pc, #296]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063da:	4b47      	ldr	r3, [pc, #284]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d11c      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e6:	4b44      	ldr	r3, [pc, #272]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d116      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d001      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e1c7      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640a:	4b3b      	ldr	r3, [pc, #236]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4937      	ldr	r1, [pc, #220]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641e:	e03a      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006428:	4b34      	ldr	r3, [pc, #208]	@ (80064fc <HAL_RCC_OscConfig+0x244>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fd ff43 	bl	80042b8 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006436:	f7fd ff3f 	bl	80042b8 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e1a8      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006448:	4b2b      	ldr	r3, [pc, #172]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	4b28      	ldr	r3, [pc, #160]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4925      	ldr	r1, [pc, #148]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 8006464:	4313      	orrs	r3, r2
 8006466:	600b      	str	r3, [r1, #0]
 8006468:	e015      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800646a:	4b24      	ldr	r3, [pc, #144]	@ (80064fc <HAL_RCC_OscConfig+0x244>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fd ff22 	bl	80042b8 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006478:	f7fd ff1e 	bl	80042b8 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e187      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d036      	beq.n	8006510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064aa:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <HAL_RCC_OscConfig+0x248>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fd ff02 	bl	80042b8 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064b8:	f7fd fefe 	bl	80042b8 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e167      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ca:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <HAL_RCC_OscConfig+0x240>)
 80064cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0x200>
 80064d6:	e01b      	b.n	8006510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d8:	4b09      	ldr	r3, [pc, #36]	@ (8006500 <HAL_RCC_OscConfig+0x248>)
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064de:	f7fd feeb 	bl	80042b8 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e4:	e00e      	b.n	8006504 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fd fee7 	bl	80042b8 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d907      	bls.n	8006504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e150      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
 80064f8:	40023800 	.word	0x40023800
 80064fc:	42470000 	.word	0x42470000
 8006500:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006504:	4b88      	ldr	r3, [pc, #544]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1ea      	bne.n	80064e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8097 	beq.w	800664c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006522:	4b81      	ldr	r3, [pc, #516]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10f      	bne.n	800654e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	4b7d      	ldr	r3, [pc, #500]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006536:	4a7c      	ldr	r2, [pc, #496]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800653c:	6413      	str	r3, [r2, #64]	@ 0x40
 800653e:	4b7a      	ldr	r3, [pc, #488]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006546:	60bb      	str	r3, [r7, #8]
 8006548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800654a:	2301      	movs	r3, #1
 800654c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654e:	4b77      	ldr	r3, [pc, #476]	@ (800672c <HAL_RCC_OscConfig+0x474>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d118      	bne.n	800658c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800655a:	4b74      	ldr	r3, [pc, #464]	@ (800672c <HAL_RCC_OscConfig+0x474>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a73      	ldr	r2, [pc, #460]	@ (800672c <HAL_RCC_OscConfig+0x474>)
 8006560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006566:	f7fd fea7 	bl	80042b8 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656e:	f7fd fea3 	bl	80042b8 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e10c      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006580:	4b6a      	ldr	r3, [pc, #424]	@ (800672c <HAL_RCC_OscConfig+0x474>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_OscConfig+0x2ea>
 8006594:	4b64      	ldr	r3, [pc, #400]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006598:	4a63      	ldr	r2, [pc, #396]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	6713      	str	r3, [r2, #112]	@ 0x70
 80065a0:	e01c      	b.n	80065dc <HAL_RCC_OscConfig+0x324>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	d10c      	bne.n	80065c4 <HAL_RCC_OscConfig+0x30c>
 80065aa:	4b5f      	ldr	r3, [pc, #380]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80065b0:	f043 0304 	orr.w	r3, r3, #4
 80065b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80065b6:	4b5c      	ldr	r3, [pc, #368]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ba:	4a5b      	ldr	r2, [pc, #364]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c2:	e00b      	b.n	80065dc <HAL_RCC_OscConfig+0x324>
 80065c4:	4b58      	ldr	r3, [pc, #352]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c8:	4a57      	ldr	r2, [pc, #348]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d0:	4b55      	ldr	r3, [pc, #340]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d4:	4a54      	ldr	r2, [pc, #336]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80065d6:	f023 0304 	bic.w	r3, r3, #4
 80065da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d015      	beq.n	8006610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e4:	f7fd fe68 	bl	80042b8 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ea:	e00a      	b.n	8006602 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ec:	f7fd fe64 	bl	80042b8 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e0cb      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006602:	4b49      	ldr	r3, [pc, #292]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0ee      	beq.n	80065ec <HAL_RCC_OscConfig+0x334>
 800660e:	e014      	b.n	800663a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006610:	f7fd fe52 	bl	80042b8 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006616:	e00a      	b.n	800662e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006618:	f7fd fe4e 	bl	80042b8 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e0b5      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800662e:	4b3e      	ldr	r3, [pc, #248]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1ee      	bne.n	8006618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d105      	bne.n	800664c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006640:	4b39      	ldr	r3, [pc, #228]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	4a38      	ldr	r2, [pc, #224]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800664a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80a1 	beq.w	8006798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006656:	4b34      	ldr	r3, [pc, #208]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 030c 	and.w	r3, r3, #12
 800665e:	2b08      	cmp	r3, #8
 8006660:	d05c      	beq.n	800671c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d141      	bne.n	80066ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666a:	4b31      	ldr	r3, [pc, #196]	@ (8006730 <HAL_RCC_OscConfig+0x478>)
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006670:	f7fd fe22 	bl	80042b8 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006678:	f7fd fe1e 	bl	80042b8 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e087      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800668a:	4b27      	ldr	r3, [pc, #156]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a4:	019b      	lsls	r3, r3, #6
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	3b01      	subs	r3, #1
 80066b0:	041b      	lsls	r3, r3, #16
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b8:	061b      	lsls	r3, r3, #24
 80066ba:	491b      	ldr	r1, [pc, #108]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006730 <HAL_RCC_OscConfig+0x478>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c6:	f7fd fdf7 	bl	80042b8 <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ce:	f7fd fdf3 	bl	80042b8 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e05c      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e0:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0f0      	beq.n	80066ce <HAL_RCC_OscConfig+0x416>
 80066ec:	e054      	b.n	8006798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ee:	4b10      	ldr	r3, [pc, #64]	@ (8006730 <HAL_RCC_OscConfig+0x478>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f4:	f7fd fde0 	bl	80042b8 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066fc:	f7fd fddc 	bl	80042b8 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e045      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800670e:	4b06      	ldr	r3, [pc, #24]	@ (8006728 <HAL_RCC_OscConfig+0x470>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f0      	bne.n	80066fc <HAL_RCC_OscConfig+0x444>
 800671a:	e03d      	b.n	8006798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d107      	bne.n	8006734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e038      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
 8006728:	40023800 	.word	0x40023800
 800672c:	40007000 	.word	0x40007000
 8006730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006734:	4b1b      	ldr	r3, [pc, #108]	@ (80067a4 <HAL_RCC_OscConfig+0x4ec>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d028      	beq.n	8006794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800674c:	429a      	cmp	r2, r3
 800674e:	d121      	bne.n	8006794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800675a:	429a      	cmp	r2, r3
 800675c:	d11a      	bne.n	8006794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006764:	4013      	ands	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800676a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800676c:	4293      	cmp	r3, r2
 800676e:	d111      	bne.n	8006794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	3b01      	subs	r3, #1
 800677e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006780:	429a      	cmp	r2, r3
 8006782:	d107      	bne.n	8006794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e000      	b.n	800679a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40023800 	.word	0x40023800

080067a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0cc      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067bc:	4b68      	ldr	r3, [pc, #416]	@ (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d90c      	bls.n	80067e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ca:	4b65      	ldr	r3, [pc, #404]	@ (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d2:	4b63      	ldr	r3, [pc, #396]	@ (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0b8      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067fc:	4b59      	ldr	r3, [pc, #356]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	4a58      	ldr	r2, [pc, #352]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006806:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006814:	4b53      	ldr	r3, [pc, #332]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	4a52      	ldr	r2, [pc, #328]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800681e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006820:	4b50      	ldr	r3, [pc, #320]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	494d      	ldr	r1, [pc, #308]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d044      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d107      	bne.n	8006856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006846:	4b47      	ldr	r3, [pc, #284]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d119      	bne.n	8006886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e07f      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d003      	beq.n	8006866 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006862:	2b03      	cmp	r3, #3
 8006864:	d107      	bne.n	8006876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006866:	4b3f      	ldr	r3, [pc, #252]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e06f      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006876:	4b3b      	ldr	r3, [pc, #236]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e067      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006886:	4b37      	ldr	r3, [pc, #220]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f023 0203 	bic.w	r2, r3, #3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4934      	ldr	r1, [pc, #208]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006894:	4313      	orrs	r3, r2
 8006896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006898:	f7fd fd0e 	bl	80042b8 <HAL_GetTick>
 800689c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a0:	f7fd fd0a 	bl	80042b8 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e04f      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 020c 	and.w	r2, r3, #12
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d1eb      	bne.n	80068a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068c8:	4b25      	ldr	r3, [pc, #148]	@ (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d20c      	bcs.n	80068f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d6:	4b22      	ldr	r3, [pc, #136]	@ (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068de:	4b20      	ldr	r3, [pc, #128]	@ (8006960 <HAL_RCC_ClockConfig+0x1b8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d001      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e032      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068fc:	4b19      	ldr	r3, [pc, #100]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4916      	ldr	r1, [pc, #88]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800691a:	4b12      	ldr	r3, [pc, #72]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	490e      	ldr	r1, [pc, #56]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800692e:	f000 f821 	bl	8006974 <HAL_RCC_GetSysClockFreq>
 8006932:	4602      	mov	r2, r0
 8006934:	4b0b      	ldr	r3, [pc, #44]	@ (8006964 <HAL_RCC_ClockConfig+0x1bc>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	091b      	lsrs	r3, r3, #4
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	490a      	ldr	r1, [pc, #40]	@ (8006968 <HAL_RCC_ClockConfig+0x1c0>)
 8006940:	5ccb      	ldrb	r3, [r1, r3]
 8006942:	fa22 f303 	lsr.w	r3, r2, r3
 8006946:	4a09      	ldr	r2, [pc, #36]	@ (800696c <HAL_RCC_ClockConfig+0x1c4>)
 8006948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800694a:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <HAL_RCC_ClockConfig+0x1c8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f7fd fae0 	bl	8003f14 <HAL_InitTick>

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40023c00 	.word	0x40023c00
 8006964:	40023800 	.word	0x40023800
 8006968:	0800d7c8 	.word	0x0800d7c8
 800696c:	20000014 	.word	0x20000014
 8006970:	20000018 	.word	0x20000018

08006974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006978:	b094      	sub	sp, #80	@ 0x50
 800697a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800698c:	4b79      	ldr	r3, [pc, #484]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x200>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 030c 	and.w	r3, r3, #12
 8006994:	2b08      	cmp	r3, #8
 8006996:	d00d      	beq.n	80069b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006998:	2b08      	cmp	r3, #8
 800699a:	f200 80e1 	bhi.w	8006b60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <HAL_RCC_GetSysClockFreq+0x34>
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d003      	beq.n	80069ae <HAL_RCC_GetSysClockFreq+0x3a>
 80069a6:	e0db      	b.n	8006b60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069a8:	4b73      	ldr	r3, [pc, #460]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x204>)
 80069aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069ac:	e0db      	b.n	8006b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ae:	4b73      	ldr	r3, [pc, #460]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x208>)
 80069b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069b2:	e0d8      	b.n	8006b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069be:	4b6d      	ldr	r3, [pc, #436]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d063      	beq.n	8006a92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ca:	4b6a      	ldr	r3, [pc, #424]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	099b      	lsrs	r3, r3, #6
 80069d0:	2200      	movs	r2, #0
 80069d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80069de:	2300      	movs	r3, #0
 80069e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80069e6:	4622      	mov	r2, r4
 80069e8:	462b      	mov	r3, r5
 80069ea:	f04f 0000 	mov.w	r0, #0
 80069ee:	f04f 0100 	mov.w	r1, #0
 80069f2:	0159      	lsls	r1, r3, #5
 80069f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069f8:	0150      	lsls	r0, r2, #5
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4621      	mov	r1, r4
 8006a00:	1a51      	subs	r1, r2, r1
 8006a02:	6139      	str	r1, [r7, #16]
 8006a04:	4629      	mov	r1, r5
 8006a06:	eb63 0301 	sbc.w	r3, r3, r1
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a18:	4659      	mov	r1, fp
 8006a1a:	018b      	lsls	r3, r1, #6
 8006a1c:	4651      	mov	r1, sl
 8006a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a22:	4651      	mov	r1, sl
 8006a24:	018a      	lsls	r2, r1, #6
 8006a26:	4651      	mov	r1, sl
 8006a28:	ebb2 0801 	subs.w	r8, r2, r1
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	eb63 0901 	sbc.w	r9, r3, r1
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	f04f 0300 	mov.w	r3, #0
 8006a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a46:	4690      	mov	r8, r2
 8006a48:	4699      	mov	r9, r3
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	eb18 0303 	adds.w	r3, r8, r3
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	462b      	mov	r3, r5
 8006a54:	eb49 0303 	adc.w	r3, r9, r3
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a66:	4629      	mov	r1, r5
 8006a68:	024b      	lsls	r3, r1, #9
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a70:	4621      	mov	r1, r4
 8006a72:	024a      	lsls	r2, r1, #9
 8006a74:	4610      	mov	r0, r2
 8006a76:	4619      	mov	r1, r3
 8006a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a84:	f7fa f8e0 	bl	8000c48 <__aeabi_uldivmod>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a90:	e058      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a92:	4b38      	ldr	r3, [pc, #224]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	099b      	lsrs	r3, r3, #6
 8006a98:	2200      	movs	r2, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006aa2:	623b      	str	r3, [r7, #32]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006aac:	4642      	mov	r2, r8
 8006aae:	464b      	mov	r3, r9
 8006ab0:	f04f 0000 	mov.w	r0, #0
 8006ab4:	f04f 0100 	mov.w	r1, #0
 8006ab8:	0159      	lsls	r1, r3, #5
 8006aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006abe:	0150      	lsls	r0, r2, #5
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4641      	mov	r1, r8
 8006ac6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006aca:	4649      	mov	r1, r9
 8006acc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006adc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ae4:	ebb2 040a 	subs.w	r4, r2, sl
 8006ae8:	eb63 050b 	sbc.w	r5, r3, fp
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	00eb      	lsls	r3, r5, #3
 8006af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006afa:	00e2      	lsls	r2, r4, #3
 8006afc:	4614      	mov	r4, r2
 8006afe:	461d      	mov	r5, r3
 8006b00:	4643      	mov	r3, r8
 8006b02:	18e3      	adds	r3, r4, r3
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	464b      	mov	r3, r9
 8006b08:	eb45 0303 	adc.w	r3, r5, r3
 8006b0c:	607b      	str	r3, [r7, #4]
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	028b      	lsls	r3, r1, #10
 8006b1e:	4621      	mov	r1, r4
 8006b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b24:	4621      	mov	r1, r4
 8006b26:	028a      	lsls	r2, r1, #10
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b2e:	2200      	movs	r2, #0
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	61fa      	str	r2, [r7, #28]
 8006b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b38:	f7fa f886 	bl	8000c48 <__aeabi_uldivmod>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4613      	mov	r3, r2
 8006b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b44:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	0c1b      	lsrs	r3, r3, #16
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	3301      	adds	r3, #1
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b5e:	e002      	b.n	8006b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b60:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3750      	adds	r7, #80	@ 0x50
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b72:	bf00      	nop
 8006b74:	40023800 	.word	0x40023800
 8006b78:	00f42400 	.word	0x00f42400
 8006b7c:	007a1200 	.word	0x007a1200

08006b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b84:	4b03      	ldr	r3, [pc, #12]	@ (8006b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b86:	681b      	ldr	r3, [r3, #0]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000014 	.word	0x20000014

08006b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b9c:	f7ff fff0 	bl	8006b80 <HAL_RCC_GetHCLKFreq>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	0a9b      	lsrs	r3, r3, #10
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	4903      	ldr	r1, [pc, #12]	@ (8006bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bae:	5ccb      	ldrb	r3, [r1, r3]
 8006bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	40023800 	.word	0x40023800
 8006bbc:	0800d7d8 	.word	0x0800d7d8

08006bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006bc4:	f7ff ffdc 	bl	8006b80 <HAL_RCC_GetHCLKFreq>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	4b05      	ldr	r3, [pc, #20]	@ (8006be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	0b5b      	lsrs	r3, r3, #13
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	4903      	ldr	r1, [pc, #12]	@ (8006be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bd6:	5ccb      	ldrb	r3, [r1, r3]
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40023800 	.word	0x40023800
 8006be4:	0800d7d8 	.word	0x0800d7d8

08006be8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	220f      	movs	r2, #15
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bf8:	4b12      	ldr	r3, [pc, #72]	@ (8006c44 <HAL_RCC_GetClockConfig+0x5c>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 0203 	and.w	r2, r3, #3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c04:	4b0f      	ldr	r3, [pc, #60]	@ (8006c44 <HAL_RCC_GetClockConfig+0x5c>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c10:	4b0c      	ldr	r3, [pc, #48]	@ (8006c44 <HAL_RCC_GetClockConfig+0x5c>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c1c:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <HAL_RCC_GetClockConfig+0x5c>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	08db      	lsrs	r3, r3, #3
 8006c22:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c2a:	4b07      	ldr	r3, [pc, #28]	@ (8006c48 <HAL_RCC_GetClockConfig+0x60>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0207 	and.w	r2, r3, #7
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	601a      	str	r2, [r3, #0]
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40023800 	.word	0x40023800
 8006c48:	40023c00 	.word	0x40023c00

08006c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e041      	b.n	8006ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f839 	bl	8006cea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f000 f9c0 	bl	8007010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d001      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e04e      	b.n	8006db6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a23      	ldr	r2, [pc, #140]	@ (8006dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d022      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d42:	d01d      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d018      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1e      	ldr	r2, [pc, #120]	@ (8006dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d013      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00e      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1b      	ldr	r2, [pc, #108]	@ (8006dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d009      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a19      	ldr	r2, [pc, #100]	@ (8006dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_TIM_Base_Start_IT+0x80>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a18      	ldr	r2, [pc, #96]	@ (8006ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d111      	bne.n	8006da4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b06      	cmp	r3, #6
 8006d90:	d010      	beq.n	8006db4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0201 	orr.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da2:	e007      	b.n	8006db4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0201 	orr.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40000400 	.word	0x40000400
 8006dcc:	40000800 	.word	0x40000800
 8006dd0:	40000c00 	.word	0x40000c00
 8006dd4:	40010400 	.word	0x40010400
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40001800 	.word	0x40001800

08006de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d020      	beq.n	8006e44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01b      	beq.n	8006e44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f06f 0202 	mvn.w	r2, #2
 8006e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f8d2 	bl	8006fd4 <HAL_TIM_IC_CaptureCallback>
 8006e30:	e005      	b.n	8006e3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f8c4 	bl	8006fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f8d5 	bl	8006fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d020      	beq.n	8006e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01b      	beq.n	8006e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0204 	mvn.w	r2, #4
 8006e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f8ac 	bl	8006fd4 <HAL_TIM_IC_CaptureCallback>
 8006e7c:	e005      	b.n	8006e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f89e 	bl	8006fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f8af 	bl	8006fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d020      	beq.n	8006edc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01b      	beq.n	8006edc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0208 	mvn.w	r2, #8
 8006eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f886 	bl	8006fd4 <HAL_TIM_IC_CaptureCallback>
 8006ec8:	e005      	b.n	8006ed6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f878 	bl	8006fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f889 	bl	8006fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d020      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01b      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f06f 0210 	mvn.w	r2, #16
 8006ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2208      	movs	r2, #8
 8006efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f860 	bl	8006fd4 <HAL_TIM_IC_CaptureCallback>
 8006f14:	e005      	b.n	8006f22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f852 	bl	8006fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f863 	bl	8006fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00c      	beq.n	8006f4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0201 	mvn.w	r2, #1
 8006f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fc fecc 	bl	8003ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00c      	beq.n	8006f70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f906 	bl	800717c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00c      	beq.n	8006f94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f834 	bl	8006ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00c      	beq.n	8006fb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d007      	beq.n	8006fb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0220 	mvn.w	r2, #32
 8006fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f8d8 	bl	8007168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a46      	ldr	r2, [pc, #280]	@ (800713c <TIM_Base_SetConfig+0x12c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d013      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702e:	d00f      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a43      	ldr	r2, [pc, #268]	@ (8007140 <TIM_Base_SetConfig+0x130>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00b      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a42      	ldr	r2, [pc, #264]	@ (8007144 <TIM_Base_SetConfig+0x134>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d007      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a41      	ldr	r2, [pc, #260]	@ (8007148 <TIM_Base_SetConfig+0x138>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d003      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a40      	ldr	r2, [pc, #256]	@ (800714c <TIM_Base_SetConfig+0x13c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d108      	bne.n	8007062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a35      	ldr	r2, [pc, #212]	@ (800713c <TIM_Base_SetConfig+0x12c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d02b      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007070:	d027      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a32      	ldr	r2, [pc, #200]	@ (8007140 <TIM_Base_SetConfig+0x130>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d023      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a31      	ldr	r2, [pc, #196]	@ (8007144 <TIM_Base_SetConfig+0x134>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d01f      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a30      	ldr	r2, [pc, #192]	@ (8007148 <TIM_Base_SetConfig+0x138>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01b      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a2f      	ldr	r2, [pc, #188]	@ (800714c <TIM_Base_SetConfig+0x13c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d017      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a2e      	ldr	r2, [pc, #184]	@ (8007150 <TIM_Base_SetConfig+0x140>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2d      	ldr	r2, [pc, #180]	@ (8007154 <TIM_Base_SetConfig+0x144>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00f      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007158 <TIM_Base_SetConfig+0x148>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00b      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a2b      	ldr	r2, [pc, #172]	@ (800715c <TIM_Base_SetConfig+0x14c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d007      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007160 <TIM_Base_SetConfig+0x150>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d003      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a29      	ldr	r2, [pc, #164]	@ (8007164 <TIM_Base_SetConfig+0x154>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d108      	bne.n	80070d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a10      	ldr	r2, [pc, #64]	@ (800713c <TIM_Base_SetConfig+0x12c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <TIM_Base_SetConfig+0xf8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a12      	ldr	r2, [pc, #72]	@ (800714c <TIM_Base_SetConfig+0x13c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d103      	bne.n	8007110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b01      	cmp	r3, #1
 8007120:	d105      	bne.n	800712e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f023 0201 	bic.w	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	611a      	str	r2, [r3, #16]
  }
}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40010000 	.word	0x40010000
 8007140:	40000400 	.word	0x40000400
 8007144:	40000800 	.word	0x40000800
 8007148:	40000c00 	.word	0x40000c00
 800714c:	40010400 	.word	0x40010400
 8007150:	40014000 	.word	0x40014000
 8007154:	40014400 	.word	0x40014400
 8007158:	40014800 	.word	0x40014800
 800715c:	40001800 	.word	0x40001800
 8007160:	40001c00 	.word	0x40001c00
 8007164:	40002000 	.word	0x40002000

08007168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e042      	b.n	8007228 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fc fe64 	bl	8003e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2224      	movs	r2, #36	@ 0x24
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f973 	bl	80074c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691a      	ldr	r2, [r3, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695a      	ldr	r2, [r3, #20]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	@ 0x28
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	4613      	mov	r3, r2
 800723e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b20      	cmp	r3, #32
 800724e:	d175      	bne.n	800733c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_UART_Transmit+0x2c>
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e06e      	b.n	800733e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2221      	movs	r2, #33	@ 0x21
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800726e:	f7fd f823 	bl	80042b8 <HAL_GetTick>
 8007272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	88fa      	ldrh	r2, [r7, #6]
 8007278:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	88fa      	ldrh	r2, [r7, #6]
 800727e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007288:	d108      	bne.n	800729c <HAL_UART_Transmit+0x6c>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	e003      	b.n	80072a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072a4:	e02e      	b.n	8007304 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2200      	movs	r2, #0
 80072ae:	2180      	movs	r1, #128	@ 0x80
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f848 	bl	8007346 <UART_WaitOnFlagUntilTimeout>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e03a      	b.n	800733e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10b      	bne.n	80072e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	3302      	adds	r3, #2
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	e007      	b.n	80072f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	781a      	ldrb	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	3301      	adds	r3, #1
 80072f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1cb      	bne.n	80072a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	2140      	movs	r1, #64	@ 0x40
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f814 	bl	8007346 <UART_WaitOnFlagUntilTimeout>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d005      	beq.n	8007330 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e006      	b.n	800733e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	e000      	b.n	800733e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800733c:	2302      	movs	r3, #2
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	3720      	adds	r7, #32
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	603b      	str	r3, [r7, #0]
 8007352:	4613      	mov	r3, r2
 8007354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007356:	e03b      	b.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800735e:	d037      	beq.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007360:	f7fc ffaa 	bl	80042b8 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	6a3a      	ldr	r2, [r7, #32]
 800736c:	429a      	cmp	r2, r3
 800736e:	d302      	bcc.n	8007376 <UART_WaitOnFlagUntilTimeout+0x30>
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e03a      	b.n	80073f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d023      	beq.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b80      	cmp	r3, #128	@ 0x80
 800738c:	d020      	beq.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b40      	cmp	r3, #64	@ 0x40
 8007392:	d01d      	beq.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d116      	bne.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f81d 	bl	80073f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2208      	movs	r2, #8
 80073c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e00f      	b.n	80073f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4013      	ands	r3, r2
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	429a      	cmp	r2, r3
 80073de:	bf0c      	ite	eq
 80073e0:	2301      	moveq	r3, #1
 80073e2:	2300      	movne	r3, #0
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d0b4      	beq.n	8007358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b095      	sub	sp, #84	@ 0x54
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	330c      	adds	r3, #12
 8007406:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	330c      	adds	r3, #12
 800741e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007420:	643a      	str	r2, [r7, #64]	@ 0x40
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007426:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800742e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e5      	bne.n	8007400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3314      	adds	r3, #20
 800743a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	61fb      	str	r3, [r7, #28]
   return(result);
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f023 0301 	bic.w	r3, r3, #1
 800744a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007454:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800745a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e5      	bne.n	8007434 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746c:	2b01      	cmp	r3, #1
 800746e:	d119      	bne.n	80074a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	330c      	adds	r3, #12
 8007476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f023 0310 	bic.w	r3, r3, #16
 8007486:	647b      	str	r3, [r7, #68]	@ 0x44
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	330c      	adds	r3, #12
 800748e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007490:	61ba      	str	r2, [r7, #24]
 8007492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6979      	ldr	r1, [r7, #20]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	613b      	str	r3, [r7, #16]
   return(result);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e5      	bne.n	8007470 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80074b2:	bf00      	nop
 80074b4:	3754      	adds	r7, #84	@ 0x54
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
	...

080074c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074c4:	b0c0      	sub	sp, #256	@ 0x100
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074dc:	68d9      	ldr	r1, [r3, #12]
 80074de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	ea40 0301 	orr.w	r3, r0, r1
 80074e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	431a      	orrs	r2, r3
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	431a      	orrs	r2, r3
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	4313      	orrs	r3, r2
 8007508:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007518:	f021 010c 	bic.w	r1, r1, #12
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007526:	430b      	orrs	r3, r1
 8007528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800752a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753a:	6999      	ldr	r1, [r3, #24]
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	ea40 0301 	orr.w	r3, r0, r1
 8007546:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4b8f      	ldr	r3, [pc, #572]	@ (800778c <UART_SetConfig+0x2cc>)
 8007550:	429a      	cmp	r2, r3
 8007552:	d005      	beq.n	8007560 <UART_SetConfig+0xa0>
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4b8d      	ldr	r3, [pc, #564]	@ (8007790 <UART_SetConfig+0x2d0>)
 800755c:	429a      	cmp	r2, r3
 800755e:	d104      	bne.n	800756a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007560:	f7ff fb2e 	bl	8006bc0 <HAL_RCC_GetPCLK2Freq>
 8007564:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007568:	e003      	b.n	8007572 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800756a:	f7ff fb15 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 800756e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800757c:	f040 810c 	bne.w	8007798 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007584:	2200      	movs	r2, #0
 8007586:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800758a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800758e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007592:	4622      	mov	r2, r4
 8007594:	462b      	mov	r3, r5
 8007596:	1891      	adds	r1, r2, r2
 8007598:	65b9      	str	r1, [r7, #88]	@ 0x58
 800759a:	415b      	adcs	r3, r3
 800759c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800759e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80075a2:	4621      	mov	r1, r4
 80075a4:	eb12 0801 	adds.w	r8, r2, r1
 80075a8:	4629      	mov	r1, r5
 80075aa:	eb43 0901 	adc.w	r9, r3, r1
 80075ae:	f04f 0200 	mov.w	r2, #0
 80075b2:	f04f 0300 	mov.w	r3, #0
 80075b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075c2:	4690      	mov	r8, r2
 80075c4:	4699      	mov	r9, r3
 80075c6:	4623      	mov	r3, r4
 80075c8:	eb18 0303 	adds.w	r3, r8, r3
 80075cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075d0:	462b      	mov	r3, r5
 80075d2:	eb49 0303 	adc.w	r3, r9, r3
 80075d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80075ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075ee:	460b      	mov	r3, r1
 80075f0:	18db      	adds	r3, r3, r3
 80075f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80075f4:	4613      	mov	r3, r2
 80075f6:	eb42 0303 	adc.w	r3, r2, r3
 80075fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80075fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007600:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007604:	f7f9 fb20 	bl	8000c48 <__aeabi_uldivmod>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4b61      	ldr	r3, [pc, #388]	@ (8007794 <UART_SetConfig+0x2d4>)
 800760e:	fba3 2302 	umull	r2, r3, r3, r2
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	011c      	lsls	r4, r3, #4
 8007616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800761a:	2200      	movs	r2, #0
 800761c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007620:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007624:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	1891      	adds	r1, r2, r2
 800762e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007630:	415b      	adcs	r3, r3
 8007632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007634:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007638:	4641      	mov	r1, r8
 800763a:	eb12 0a01 	adds.w	sl, r2, r1
 800763e:	4649      	mov	r1, r9
 8007640:	eb43 0b01 	adc.w	fp, r3, r1
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007650:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007658:	4692      	mov	sl, r2
 800765a:	469b      	mov	fp, r3
 800765c:	4643      	mov	r3, r8
 800765e:	eb1a 0303 	adds.w	r3, sl, r3
 8007662:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007666:	464b      	mov	r3, r9
 8007668:	eb4b 0303 	adc.w	r3, fp, r3
 800766c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800767c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007680:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007684:	460b      	mov	r3, r1
 8007686:	18db      	adds	r3, r3, r3
 8007688:	643b      	str	r3, [r7, #64]	@ 0x40
 800768a:	4613      	mov	r3, r2
 800768c:	eb42 0303 	adc.w	r3, r2, r3
 8007690:	647b      	str	r3, [r7, #68]	@ 0x44
 8007692:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007696:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800769a:	f7f9 fad5 	bl	8000c48 <__aeabi_uldivmod>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4611      	mov	r1, r2
 80076a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007794 <UART_SetConfig+0x2d4>)
 80076a6:	fba3 2301 	umull	r2, r3, r3, r1
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	2264      	movs	r2, #100	@ 0x64
 80076ae:	fb02 f303 	mul.w	r3, r2, r3
 80076b2:	1acb      	subs	r3, r1, r3
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80076ba:	4b36      	ldr	r3, [pc, #216]	@ (8007794 <UART_SetConfig+0x2d4>)
 80076bc:	fba3 2302 	umull	r2, r3, r3, r2
 80076c0:	095b      	lsrs	r3, r3, #5
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80076c8:	441c      	add	r4, r3
 80076ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80076d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80076dc:	4642      	mov	r2, r8
 80076de:	464b      	mov	r3, r9
 80076e0:	1891      	adds	r1, r2, r2
 80076e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076e4:	415b      	adcs	r3, r3
 80076e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076ec:	4641      	mov	r1, r8
 80076ee:	1851      	adds	r1, r2, r1
 80076f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80076f2:	4649      	mov	r1, r9
 80076f4:	414b      	adcs	r3, r1
 80076f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	f04f 0300 	mov.w	r3, #0
 8007700:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007704:	4659      	mov	r1, fp
 8007706:	00cb      	lsls	r3, r1, #3
 8007708:	4651      	mov	r1, sl
 800770a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800770e:	4651      	mov	r1, sl
 8007710:	00ca      	lsls	r2, r1, #3
 8007712:	4610      	mov	r0, r2
 8007714:	4619      	mov	r1, r3
 8007716:	4603      	mov	r3, r0
 8007718:	4642      	mov	r2, r8
 800771a:	189b      	adds	r3, r3, r2
 800771c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007720:	464b      	mov	r3, r9
 8007722:	460a      	mov	r2, r1
 8007724:	eb42 0303 	adc.w	r3, r2, r3
 8007728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007738:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800773c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007740:	460b      	mov	r3, r1
 8007742:	18db      	adds	r3, r3, r3
 8007744:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007746:	4613      	mov	r3, r2
 8007748:	eb42 0303 	adc.w	r3, r2, r3
 800774c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800774e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007752:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007756:	f7f9 fa77 	bl	8000c48 <__aeabi_uldivmod>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <UART_SetConfig+0x2d4>)
 8007760:	fba3 1302 	umull	r1, r3, r3, r2
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	2164      	movs	r1, #100	@ 0x64
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	3332      	adds	r3, #50	@ 0x32
 8007772:	4a08      	ldr	r2, [pc, #32]	@ (8007794 <UART_SetConfig+0x2d4>)
 8007774:	fba2 2303 	umull	r2, r3, r2, r3
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	f003 0207 	and.w	r2, r3, #7
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4422      	add	r2, r4
 8007786:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007788:	e106      	b.n	8007998 <UART_SetConfig+0x4d8>
 800778a:	bf00      	nop
 800778c:	40011000 	.word	0x40011000
 8007790:	40011400 	.word	0x40011400
 8007794:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800779c:	2200      	movs	r2, #0
 800779e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80077a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80077aa:	4642      	mov	r2, r8
 80077ac:	464b      	mov	r3, r9
 80077ae:	1891      	adds	r1, r2, r2
 80077b0:	6239      	str	r1, [r7, #32]
 80077b2:	415b      	adcs	r3, r3
 80077b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ba:	4641      	mov	r1, r8
 80077bc:	1854      	adds	r4, r2, r1
 80077be:	4649      	mov	r1, r9
 80077c0:	eb43 0501 	adc.w	r5, r3, r1
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	f04f 0300 	mov.w	r3, #0
 80077cc:	00eb      	lsls	r3, r5, #3
 80077ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077d2:	00e2      	lsls	r2, r4, #3
 80077d4:	4614      	mov	r4, r2
 80077d6:	461d      	mov	r5, r3
 80077d8:	4643      	mov	r3, r8
 80077da:	18e3      	adds	r3, r4, r3
 80077dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077e0:	464b      	mov	r3, r9
 80077e2:	eb45 0303 	adc.w	r3, r5, r3
 80077e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077fa:	f04f 0200 	mov.w	r2, #0
 80077fe:	f04f 0300 	mov.w	r3, #0
 8007802:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007806:	4629      	mov	r1, r5
 8007808:	008b      	lsls	r3, r1, #2
 800780a:	4621      	mov	r1, r4
 800780c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007810:	4621      	mov	r1, r4
 8007812:	008a      	lsls	r2, r1, #2
 8007814:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007818:	f7f9 fa16 	bl	8000c48 <__aeabi_uldivmod>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4b60      	ldr	r3, [pc, #384]	@ (80079a4 <UART_SetConfig+0x4e4>)
 8007822:	fba3 2302 	umull	r2, r3, r3, r2
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	011c      	lsls	r4, r3, #4
 800782a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800782e:	2200      	movs	r2, #0
 8007830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007834:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007838:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800783c:	4642      	mov	r2, r8
 800783e:	464b      	mov	r3, r9
 8007840:	1891      	adds	r1, r2, r2
 8007842:	61b9      	str	r1, [r7, #24]
 8007844:	415b      	adcs	r3, r3
 8007846:	61fb      	str	r3, [r7, #28]
 8007848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800784c:	4641      	mov	r1, r8
 800784e:	1851      	adds	r1, r2, r1
 8007850:	6139      	str	r1, [r7, #16]
 8007852:	4649      	mov	r1, r9
 8007854:	414b      	adcs	r3, r1
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	f04f 0200 	mov.w	r2, #0
 800785c:	f04f 0300 	mov.w	r3, #0
 8007860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007864:	4659      	mov	r1, fp
 8007866:	00cb      	lsls	r3, r1, #3
 8007868:	4651      	mov	r1, sl
 800786a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800786e:	4651      	mov	r1, sl
 8007870:	00ca      	lsls	r2, r1, #3
 8007872:	4610      	mov	r0, r2
 8007874:	4619      	mov	r1, r3
 8007876:	4603      	mov	r3, r0
 8007878:	4642      	mov	r2, r8
 800787a:	189b      	adds	r3, r3, r2
 800787c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007880:	464b      	mov	r3, r9
 8007882:	460a      	mov	r2, r1
 8007884:	eb42 0303 	adc.w	r3, r2, r3
 8007888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007896:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80078a4:	4649      	mov	r1, r9
 80078a6:	008b      	lsls	r3, r1, #2
 80078a8:	4641      	mov	r1, r8
 80078aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ae:	4641      	mov	r1, r8
 80078b0:	008a      	lsls	r2, r1, #2
 80078b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80078b6:	f7f9 f9c7 	bl	8000c48 <__aeabi_uldivmod>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4611      	mov	r1, r2
 80078c0:	4b38      	ldr	r3, [pc, #224]	@ (80079a4 <UART_SetConfig+0x4e4>)
 80078c2:	fba3 2301 	umull	r2, r3, r3, r1
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	2264      	movs	r2, #100	@ 0x64
 80078ca:	fb02 f303 	mul.w	r3, r2, r3
 80078ce:	1acb      	subs	r3, r1, r3
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	3332      	adds	r3, #50	@ 0x32
 80078d4:	4a33      	ldr	r2, [pc, #204]	@ (80079a4 <UART_SetConfig+0x4e4>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078e0:	441c      	add	r4, r3
 80078e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078e6:	2200      	movs	r2, #0
 80078e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80078ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80078ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	1891      	adds	r1, r2, r2
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	415b      	adcs	r3, r3
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007900:	4641      	mov	r1, r8
 8007902:	1851      	adds	r1, r2, r1
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	4649      	mov	r1, r9
 8007908:	414b      	adcs	r3, r1
 800790a:	607b      	str	r3, [r7, #4]
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007918:	4659      	mov	r1, fp
 800791a:	00cb      	lsls	r3, r1, #3
 800791c:	4651      	mov	r1, sl
 800791e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007922:	4651      	mov	r1, sl
 8007924:	00ca      	lsls	r2, r1, #3
 8007926:	4610      	mov	r0, r2
 8007928:	4619      	mov	r1, r3
 800792a:	4603      	mov	r3, r0
 800792c:	4642      	mov	r2, r8
 800792e:	189b      	adds	r3, r3, r2
 8007930:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007932:	464b      	mov	r3, r9
 8007934:	460a      	mov	r2, r1
 8007936:	eb42 0303 	adc.w	r3, r2, r3
 800793a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800793c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	663b      	str	r3, [r7, #96]	@ 0x60
 8007946:	667a      	str	r2, [r7, #100]	@ 0x64
 8007948:	f04f 0200 	mov.w	r2, #0
 800794c:	f04f 0300 	mov.w	r3, #0
 8007950:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007954:	4649      	mov	r1, r9
 8007956:	008b      	lsls	r3, r1, #2
 8007958:	4641      	mov	r1, r8
 800795a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800795e:	4641      	mov	r1, r8
 8007960:	008a      	lsls	r2, r1, #2
 8007962:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007966:	f7f9 f96f 	bl	8000c48 <__aeabi_uldivmod>
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <UART_SetConfig+0x4e4>)
 8007970:	fba3 1302 	umull	r1, r3, r3, r2
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	2164      	movs	r1, #100	@ 0x64
 8007978:	fb01 f303 	mul.w	r3, r1, r3
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	3332      	adds	r3, #50	@ 0x32
 8007982:	4a08      	ldr	r2, [pc, #32]	@ (80079a4 <UART_SetConfig+0x4e4>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	f003 020f 	and.w	r2, r3, #15
 800798e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4422      	add	r2, r4
 8007996:	609a      	str	r2, [r3, #8]
}
 8007998:	bf00      	nop
 800799a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800799e:	46bd      	mov	sp, r7
 80079a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079a4:	51eb851f 	.word	0x51eb851f

080079a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80079b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079ba:	2b84      	cmp	r3, #132	@ 0x84
 80079bc:	d005      	beq.n	80079ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80079be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4413      	add	r3, r2
 80079c6:	3303      	adds	r3, #3
 80079c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80079ca:	68fb      	ldr	r3, [r7, #12]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80079dc:	f000 fed4 	bl	8008788 <vTaskStartScheduler>
  
  return osOK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80079e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e8:	b089      	sub	sp, #36	@ 0x24
 80079ea:	af04      	add	r7, sp, #16
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d020      	beq.n	8007a3a <osThreadCreate+0x54>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01c      	beq.n	8007a3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685c      	ldr	r4, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691e      	ldr	r6, [r3, #16]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff ffc8 	bl	80079a8 <makeFreeRtosPriority>
 8007a18:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a22:	9202      	str	r2, [sp, #8]
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	9100      	str	r1, [sp, #0]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	4632      	mov	r2, r6
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fcc5 	bl	80083be <xTaskCreateStatic>
 8007a34:	4603      	mov	r3, r0
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	e01c      	b.n	8007a74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685c      	ldr	r4, [r3, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a46:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff ffaa 	bl	80079a8 <makeFreeRtosPriority>
 8007a54:	4602      	mov	r2, r0
 8007a56:	f107 030c 	add.w	r3, r7, #12
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	9200      	str	r2, [sp, #0]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	4632      	mov	r2, r6
 8007a62:	4629      	mov	r1, r5
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fd0a 	bl	800847e <xTaskCreate>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d001      	beq.n	8007a74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	e000      	b.n	8007a76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007a74:	68fb      	ldr	r3, [r7, #12]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <osDelay+0x16>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	e000      	b.n	8007a96 <osDelay+0x18>
 8007a94:	2301      	movs	r3, #1
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fe40 	bl	800871c <vTaskDelay>
  
  return osOK;
 8007a9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f103 0208 	add.w	r2, r3, #8
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007abe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f103 0208 	add.w	r2, r3, #8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f103 0208 	add.w	r2, r3, #8
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	601a      	str	r2, [r3, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b5e:	d103      	bne.n	8007b68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e00c      	b.n	8007b82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	e002      	b.n	8007b76 <vListInsert+0x2e>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d2f6      	bcs.n	8007b70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]
}
 8007bae:	bf00      	nop
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b085      	sub	sp, #20
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6892      	ldr	r2, [r2, #8]
 8007bd0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6852      	ldr	r2, [r2, #4]
 8007bda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d103      	bne.n	8007bee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	1e5a      	subs	r2, r3, #1
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
	...

08007c10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c3c:	f001 fc04 	bl	8009448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c48:	68f9      	ldr	r1, [r7, #12]
 8007c4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007c4c:	fb01 f303 	mul.w	r3, r1, r3
 8007c50:	441a      	add	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007c72:	fb01 f303 	mul.w	r3, r1, r3
 8007c76:	441a      	add	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	22ff      	movs	r2, #255	@ 0xff
 8007c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	22ff      	movs	r2, #255	@ 0xff
 8007c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d114      	bne.n	8007cbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d01a      	beq.n	8007cd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3310      	adds	r3, #16
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 ffcc 	bl	8008c3c <xTaskRemoveFromEventList>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d012      	beq.n	8007cd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007caa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce0 <xQueueGenericReset+0xd0>)
 8007cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	e009      	b.n	8007cd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3310      	adds	r3, #16
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff fef0 	bl	8007aa6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3324      	adds	r3, #36	@ 0x24
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff feeb 	bl	8007aa6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007cd0:	f001 fbec 	bl	80094ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007cd4:	2301      	movs	r3, #1
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	e000ed04 	.word	0xe000ed04

08007ce4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08a      	sub	sp, #40	@ 0x28
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10b      	bne.n	8007d10 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	613b      	str	r3, [r7, #16]
}
 8007d0a:	bf00      	nop
 8007d0c:	bf00      	nop
 8007d0e:	e7fd      	b.n	8007d0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	fb02 f303 	mul.w	r3, r2, r3
 8007d18:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	3348      	adds	r3, #72	@ 0x48
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 fc72 	bl	8009608 <pvPortMalloc>
 8007d24:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d011      	beq.n	8007d50 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	3348      	adds	r3, #72	@ 0x48
 8007d34:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d3e:	79fa      	ldrb	r2, [r7, #7]
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f805 	bl	8007d5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d50:	69bb      	ldr	r3, [r7, #24]
	}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3720      	adds	r7, #32
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	e002      	b.n	8007d7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d88:	2101      	movs	r1, #1
 8007d8a:	69b8      	ldr	r0, [r7, #24]
 8007d8c:	f7ff ff40 	bl	8007c10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08e      	sub	sp, #56	@ 0x38
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007da6:	2300      	movs	r3, #0
 8007da8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10b      	bne.n	8007dcc <xQueueGenericSend+0x34>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007dc6:	bf00      	nop
 8007dc8:	bf00      	nop
 8007dca:	e7fd      	b.n	8007dc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d103      	bne.n	8007dda <xQueueGenericSend+0x42>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <xQueueGenericSend+0x46>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <xQueueGenericSend+0x48>
 8007dde:	2300      	movs	r3, #0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <xQueueGenericSend+0x64>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d103      	bne.n	8007e0a <xQueueGenericSend+0x72>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <xQueueGenericSend+0x76>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <xQueueGenericSend+0x78>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10b      	bne.n	8007e2c <xQueueGenericSend+0x94>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	623b      	str	r3, [r7, #32]
}
 8007e26:	bf00      	nop
 8007e28:	bf00      	nop
 8007e2a:	e7fd      	b.n	8007e28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e2c:	f001 f8cc 	bl	8008fc8 <xTaskGetSchedulerState>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d102      	bne.n	8007e3c <xQueueGenericSend+0xa4>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <xQueueGenericSend+0xa8>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e000      	b.n	8007e42 <xQueueGenericSend+0xaa>
 8007e40:	2300      	movs	r3, #0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10b      	bne.n	8007e5e <xQueueGenericSend+0xc6>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	61fb      	str	r3, [r7, #28]
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	e7fd      	b.n	8007e5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e5e:	f001 faf3 	bl	8009448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d302      	bcc.n	8007e74 <xQueueGenericSend+0xdc>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d129      	bne.n	8007ec8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e7a:	f000 f990 	bl	800819e <prvCopyDataToQueue>
 8007e7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d010      	beq.n	8007eaa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	3324      	adds	r3, #36	@ 0x24
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fed5 	bl	8008c3c <xTaskRemoveFromEventList>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d013      	beq.n	8007ec0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e98:	4b3f      	ldr	r3, [pc, #252]	@ (8007f98 <xQueueGenericSend+0x200>)
 8007e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	e00a      	b.n	8007ec0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007eb0:	4b39      	ldr	r3, [pc, #228]	@ (8007f98 <xQueueGenericSend+0x200>)
 8007eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ec0:	f001 faf4 	bl	80094ac <vPortExitCritical>
				return pdPASS;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e063      	b.n	8007f90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ece:	f001 faed 	bl	80094ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e05c      	b.n	8007f90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007edc:	f107 0314 	add.w	r3, r7, #20
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 ff0f 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eea:	f001 fadf 	bl	80094ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eee:	f000 fcb5 	bl	800885c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ef2:	f001 faa9 	bl	8009448 <vPortEnterCritical>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007efc:	b25b      	sxtb	r3, r3
 8007efe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f02:	d103      	bne.n	8007f0c <xQueueGenericSend+0x174>
 8007f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f12:	b25b      	sxtb	r3, r3
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f18:	d103      	bne.n	8007f22 <xQueueGenericSend+0x18a>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f22:	f001 fac3 	bl	80094ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f26:	1d3a      	adds	r2, r7, #4
 8007f28:	f107 0314 	add.w	r3, r7, #20
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fefe 	bl	8008d30 <xTaskCheckForTimeOut>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d124      	bne.n	8007f84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f3c:	f000 fa27 	bl	800838e <prvIsQueueFull>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d018      	beq.n	8007f78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	3310      	adds	r3, #16
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fe4e 	bl	8008bf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f56:	f000 f9b2 	bl	80082be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f5a:	f000 fc8d 	bl	8008878 <xTaskResumeAll>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f47f af7c 	bne.w	8007e5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007f66:	4b0c      	ldr	r3, [pc, #48]	@ (8007f98 <xQueueGenericSend+0x200>)
 8007f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	e772      	b.n	8007e5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f7a:	f000 f9a0 	bl	80082be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f7e:	f000 fc7b 	bl	8008878 <xTaskResumeAll>
 8007f82:	e76c      	b.n	8007e5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f86:	f000 f99a 	bl	80082be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f8a:	f000 fc75 	bl	8008878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3738      	adds	r7, #56	@ 0x38
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08c      	sub	sp, #48	@ 0x30
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <xQueueReceive+0x32>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	623b      	str	r3, [r7, #32]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d103      	bne.n	8007fdc <xQueueReceive+0x40>
 8007fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <xQueueReceive+0x44>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <xQueueReceive+0x46>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <xQueueReceive+0x62>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	61fb      	str	r3, [r7, #28]
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ffe:	f000 ffe3 	bl	8008fc8 <xTaskGetSchedulerState>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <xQueueReceive+0x72>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <xQueueReceive+0x76>
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <xQueueReceive+0x78>
 8008012:	2300      	movs	r3, #0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <xQueueReceive+0x94>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	61bb      	str	r3, [r7, #24]
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008030:	f001 fa0a 	bl	8009448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008038:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01f      	beq.n	8008080 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008044:	f000 f915 	bl	8008272 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	1e5a      	subs	r2, r3, #1
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00f      	beq.n	8008078 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805a:	3310      	adds	r3, #16
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fded 	bl	8008c3c <xTaskRemoveFromEventList>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d007      	beq.n	8008078 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008068:	4b3c      	ldr	r3, [pc, #240]	@ (800815c <xQueueReceive+0x1c0>)
 800806a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008078:	f001 fa18 	bl	80094ac <vPortExitCritical>
				return pdPASS;
 800807c:	2301      	movs	r3, #1
 800807e:	e069      	b.n	8008154 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008086:	f001 fa11 	bl	80094ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800808a:	2300      	movs	r3, #0
 800808c:	e062      	b.n	8008154 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	2b00      	cmp	r3, #0
 8008092:	d106      	bne.n	80080a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008094:	f107 0310 	add.w	r3, r7, #16
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fe33 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800809e:	2301      	movs	r3, #1
 80080a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080a2:	f001 fa03 	bl	80094ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080a6:	f000 fbd9 	bl	800885c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080aa:	f001 f9cd 	bl	8009448 <vPortEnterCritical>
 80080ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080b4:	b25b      	sxtb	r3, r3
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080ba:	d103      	bne.n	80080c4 <xQueueReceive+0x128>
 80080bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080ca:	b25b      	sxtb	r3, r3
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080d0:	d103      	bne.n	80080da <xQueueReceive+0x13e>
 80080d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080da:	f001 f9e7 	bl	80094ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080de:	1d3a      	adds	r2, r7, #4
 80080e0:	f107 0310 	add.w	r3, r7, #16
 80080e4:	4611      	mov	r1, r2
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fe22 	bl	8008d30 <xTaskCheckForTimeOut>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d123      	bne.n	800813a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080f4:	f000 f935 	bl	8008362 <prvIsQueueEmpty>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d017      	beq.n	800812e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	3324      	adds	r3, #36	@ 0x24
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fd72 	bl	8008bf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800810c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800810e:	f000 f8d6 	bl	80082be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008112:	f000 fbb1 	bl	8008878 <xTaskResumeAll>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d189      	bne.n	8008030 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800811c:	4b0f      	ldr	r3, [pc, #60]	@ (800815c <xQueueReceive+0x1c0>)
 800811e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	e780      	b.n	8008030 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800812e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008130:	f000 f8c5 	bl	80082be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008134:	f000 fba0 	bl	8008878 <xTaskResumeAll>
 8008138:	e77a      	b.n	8008030 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800813a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800813c:	f000 f8bf 	bl	80082be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008140:	f000 fb9a 	bl	8008878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008146:	f000 f90c 	bl	8008362 <prvIsQueueEmpty>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	f43f af6f 	beq.w	8008030 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008152:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008154:	4618      	mov	r0, r3
 8008156:	3730      	adds	r7, #48	@ 0x30
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	e000ed04 	.word	0xe000ed04

08008160 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	60bb      	str	r3, [r7, #8]
}
 8008180:	bf00      	nop
 8008182:	bf00      	nop
 8008184:	e7fd      	b.n	8008182 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008186:	f001 f95f 	bl	8009448 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008190:	f001 f98c 	bl	80094ac <vPortExitCritical>

	return uxReturn;
 8008194:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10d      	bne.n	80081d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d14d      	bne.n	8008260 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 ff1b 	bl	8009004 <xTaskPriorityDisinherit>
 80081ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	609a      	str	r2, [r3, #8]
 80081d6:	e043      	b.n	8008260 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d119      	bne.n	8008212 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6858      	ldr	r0, [r3, #4]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e6:	461a      	mov	r2, r3
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	f002 fa62 	bl	800a6b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f6:	441a      	add	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	429a      	cmp	r2, r3
 8008206:	d32b      	bcc.n	8008260 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	605a      	str	r2, [r3, #4]
 8008210:	e026      	b.n	8008260 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	68d8      	ldr	r0, [r3, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821a:	461a      	mov	r2, r3
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	f002 fa48 	bl	800a6b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822a:	425b      	negs	r3, r3
 800822c:	441a      	add	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d207      	bcs.n	800824e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008246:	425b      	negs	r3, r3
 8008248:	441a      	add	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d105      	bne.n	8008260 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3b01      	subs	r3, #1
 800825e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008268:	697b      	ldr	r3, [r7, #20]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d018      	beq.n	80082b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828c:	441a      	add	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	d303      	bcc.n	80082a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68d9      	ldr	r1, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ae:	461a      	mov	r2, r3
 80082b0:	6838      	ldr	r0, [r7, #0]
 80082b2:	f002 f9fe 	bl	800a6b2 <memcpy>
	}
}
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082c6:	f001 f8bf 	bl	8009448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082d2:	e011      	b.n	80082f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d012      	beq.n	8008302 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3324      	adds	r3, #36	@ 0x24
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fcab 	bl	8008c3c <xTaskRemoveFromEventList>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082ec:	f000 fd84 	bl	8008df8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	dce9      	bgt.n	80082d4 <prvUnlockQueue+0x16>
 8008300:	e000      	b.n	8008304 <prvUnlockQueue+0x46>
					break;
 8008302:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	22ff      	movs	r2, #255	@ 0xff
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800830c:	f001 f8ce 	bl	80094ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008310:	f001 f89a 	bl	8009448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800831a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800831c:	e011      	b.n	8008342 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d012      	beq.n	800834c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3310      	adds	r3, #16
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fc86 	bl	8008c3c <xTaskRemoveFromEventList>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008336:	f000 fd5f 	bl	8008df8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	3b01      	subs	r3, #1
 800833e:	b2db      	uxtb	r3, r3
 8008340:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dce9      	bgt.n	800831e <prvUnlockQueue+0x60>
 800834a:	e000      	b.n	800834e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800834c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	22ff      	movs	r2, #255	@ 0xff
 8008352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008356:	f001 f8a9 	bl	80094ac <vPortExitCritical>
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800836a:	f001 f86d 	bl	8009448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008372:	2b00      	cmp	r3, #0
 8008374:	d102      	bne.n	800837c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008376:	2301      	movs	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	e001      	b.n	8008380 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008380:	f001 f894 	bl	80094ac <vPortExitCritical>

	return xReturn;
 8008384:	68fb      	ldr	r3, [r7, #12]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008396:	f001 f857 	bl	8009448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d102      	bne.n	80083ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	e001      	b.n	80083b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083ac:	2300      	movs	r3, #0
 80083ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083b0:	f001 f87c 	bl	80094ac <vPortExitCritical>

	return xReturn;
 80083b4:	68fb      	ldr	r3, [r7, #12]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b08e      	sub	sp, #56	@ 0x38
 80083c2:	af04      	add	r7, sp, #16
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
 80083ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10b      	bne.n	80083ea <xTaskCreateStatic+0x2c>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	623b      	str	r3, [r7, #32]
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	e7fd      	b.n	80083e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10b      	bne.n	8008408 <xTaskCreateStatic+0x4a>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	61fb      	str	r3, [r7, #28]
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	e7fd      	b.n	8008404 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008408:	23a0      	movs	r3, #160	@ 0xa0
 800840a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2ba0      	cmp	r3, #160	@ 0xa0
 8008410:	d00b      	beq.n	800842a <xTaskCreateStatic+0x6c>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	61bb      	str	r3, [r7, #24]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800842a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800842c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842e:	2b00      	cmp	r3, #0
 8008430:	d01e      	beq.n	8008470 <xTaskCreateStatic+0xb2>
 8008432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01b      	beq.n	8008470 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800843c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008440:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	2202      	movs	r2, #2
 8008446:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800844a:	2300      	movs	r3, #0
 800844c:	9303      	str	r3, [sp, #12]
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	9302      	str	r3, [sp, #8]
 8008452:	f107 0314 	add.w	r3, r7, #20
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 f850 	bl	8008508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008468:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800846a:	f000 f8ed 	bl	8008648 <prvAddNewTaskToReadyList>
 800846e:	e001      	b.n	8008474 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008474:	697b      	ldr	r3, [r7, #20]
	}
 8008476:	4618      	mov	r0, r3
 8008478:	3728      	adds	r7, #40	@ 0x28
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800847e:	b580      	push	{r7, lr}
 8008480:	b08c      	sub	sp, #48	@ 0x30
 8008482:	af04      	add	r7, sp, #16
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	603b      	str	r3, [r7, #0]
 800848a:	4613      	mov	r3, r2
 800848c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4618      	mov	r0, r3
 8008494:	f001 f8b8 	bl	8009608 <pvPortMalloc>
 8008498:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00e      	beq.n	80084be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084a0:	20a0      	movs	r0, #160	@ 0xa0
 80084a2:	f001 f8b1 	bl	8009608 <pvPortMalloc>
 80084a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80084b4:	e005      	b.n	80084c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084b6:	6978      	ldr	r0, [r7, #20]
 80084b8:	f001 f974 	bl	80097a4 <vPortFree>
 80084bc:	e001      	b.n	80084c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d017      	beq.n	80084f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084d0:	88fa      	ldrh	r2, [r7, #6]
 80084d2:	2300      	movs	r3, #0
 80084d4:	9303      	str	r3, [sp, #12]
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	9302      	str	r3, [sp, #8]
 80084da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f80e 	bl	8008508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084ec:	69f8      	ldr	r0, [r7, #28]
 80084ee:	f000 f8ab 	bl	8008648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084f2:	2301      	movs	r3, #1
 80084f4:	61bb      	str	r3, [r7, #24]
 80084f6:	e002      	b.n	80084fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084fe:	69bb      	ldr	r3, [r7, #24]
	}
 8008500:	4618      	mov	r0, r3
 8008502:	3720      	adds	r7, #32
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008520:	3b01      	subs	r3, #1
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f023 0307 	bic.w	r3, r3, #7
 800852e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00b      	beq.n	8008552 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	617b      	str	r3, [r7, #20]
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	e7fd      	b.n	800854e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01f      	beq.n	8008598 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008558:	2300      	movs	r3, #0
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	e012      	b.n	8008584 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	7819      	ldrb	r1, [r3, #0]
 8008566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	3334      	adds	r3, #52	@ 0x34
 800856e:	460a      	mov	r2, r1
 8008570:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	4413      	add	r3, r2
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d006      	beq.n	800858c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	3301      	adds	r3, #1
 8008582:	61fb      	str	r3, [r7, #28]
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b0f      	cmp	r3, #15
 8008588:	d9e9      	bls.n	800855e <prvInitialiseNewTask+0x56>
 800858a:	e000      	b.n	800858e <prvInitialiseNewTask+0x86>
			{
				break;
 800858c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008596:	e003      	b.n	80085a0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a2:	2b06      	cmp	r3, #6
 80085a4:	d901      	bls.n	80085aa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085a6:	2306      	movs	r3, #6
 80085a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085b4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	2200      	movs	r2, #0
 80085ba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	3304      	adds	r3, #4
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff fa90 	bl	8007ae6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	3318      	adds	r3, #24
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7ff fa8b 	bl	8007ae6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d8:	f1c3 0207 	rsb	r2, r3, #7
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	334c      	adds	r3, #76	@ 0x4c
 80085fa:	224c      	movs	r2, #76	@ 0x4c
 80085fc:	2100      	movs	r1, #0
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 ff81 	bl	800a506 <memset>
 8008604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008606:	4a0d      	ldr	r2, [pc, #52]	@ (800863c <prvInitialiseNewTask+0x134>)
 8008608:	651a      	str	r2, [r3, #80]	@ 0x50
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	4a0c      	ldr	r2, [pc, #48]	@ (8008640 <prvInitialiseNewTask+0x138>)
 800860e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008612:	4a0c      	ldr	r2, [pc, #48]	@ (8008644 <prvInitialiseNewTask+0x13c>)
 8008614:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	68f9      	ldr	r1, [r7, #12]
 800861a:	69b8      	ldr	r0, [r7, #24]
 800861c:	f000 fde0 	bl	80091e0 <pxPortInitialiseStack>
 8008620:	4602      	mov	r2, r0
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800862c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008632:	bf00      	nop
 8008634:	3720      	adds	r7, #32
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20004428 	.word	0x20004428
 8008640:	20004490 	.word	0x20004490
 8008644:	200044f8 	.word	0x200044f8

08008648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008650:	f000 fefa 	bl	8009448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008654:	4b2a      	ldr	r3, [pc, #168]	@ (8008700 <prvAddNewTaskToReadyList+0xb8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3301      	adds	r3, #1
 800865a:	4a29      	ldr	r2, [pc, #164]	@ (8008700 <prvAddNewTaskToReadyList+0xb8>)
 800865c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800865e:	4b29      	ldr	r3, [pc, #164]	@ (8008704 <prvAddNewTaskToReadyList+0xbc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d109      	bne.n	800867a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008666:	4a27      	ldr	r2, [pc, #156]	@ (8008704 <prvAddNewTaskToReadyList+0xbc>)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800866c:	4b24      	ldr	r3, [pc, #144]	@ (8008700 <prvAddNewTaskToReadyList+0xb8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d110      	bne.n	8008696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008674:	f000 fbe4 	bl	8008e40 <prvInitialiseTaskLists>
 8008678:	e00d      	b.n	8008696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800867a:	4b23      	ldr	r3, [pc, #140]	@ (8008708 <prvAddNewTaskToReadyList+0xc0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d109      	bne.n	8008696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008682:	4b20      	ldr	r3, [pc, #128]	@ (8008704 <prvAddNewTaskToReadyList+0xbc>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868c:	429a      	cmp	r2, r3
 800868e:	d802      	bhi.n	8008696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008690:	4a1c      	ldr	r2, [pc, #112]	@ (8008704 <prvAddNewTaskToReadyList+0xbc>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008696:	4b1d      	ldr	r3, [pc, #116]	@ (800870c <prvAddNewTaskToReadyList+0xc4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3301      	adds	r3, #1
 800869c:	4a1b      	ldr	r2, [pc, #108]	@ (800870c <prvAddNewTaskToReadyList+0xc4>)
 800869e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a4:	2201      	movs	r2, #1
 80086a6:	409a      	lsls	r2, r3
 80086a8:	4b19      	ldr	r3, [pc, #100]	@ (8008710 <prvAddNewTaskToReadyList+0xc8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	4a18      	ldr	r2, [pc, #96]	@ (8008710 <prvAddNewTaskToReadyList+0xc8>)
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4a15      	ldr	r2, [pc, #84]	@ (8008714 <prvAddNewTaskToReadyList+0xcc>)
 80086c0:	441a      	add	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3304      	adds	r3, #4
 80086c6:	4619      	mov	r1, r3
 80086c8:	4610      	mov	r0, r2
 80086ca:	f7ff fa19 	bl	8007b00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086ce:	f000 feed 	bl	80094ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <prvAddNewTaskToReadyList+0xc0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00e      	beq.n	80086f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086da:	4b0a      	ldr	r3, [pc, #40]	@ (8008704 <prvAddNewTaskToReadyList+0xbc>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d207      	bcs.n	80086f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008718 <prvAddNewTaskToReadyList+0xd0>)
 80086ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	200007d4 	.word	0x200007d4
 8008704:	200006d4 	.word	0x200006d4
 8008708:	200007e0 	.word	0x200007e0
 800870c:	200007f0 	.word	0x200007f0
 8008710:	200007dc 	.word	0x200007dc
 8008714:	200006d8 	.word	0x200006d8
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d018      	beq.n	8008760 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800872e:	4b14      	ldr	r3, [pc, #80]	@ (8008780 <vTaskDelay+0x64>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <vTaskDelay+0x32>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60bb      	str	r3, [r7, #8]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800874e:	f000 f885 	bl	800885c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008752:	2100      	movs	r1, #0
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fcdd 	bl	8009114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800875a:	f000 f88d 	bl	8008878 <xTaskResumeAll>
 800875e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d107      	bne.n	8008776 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008766:	4b07      	ldr	r3, [pc, #28]	@ (8008784 <vTaskDelay+0x68>)
 8008768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008776:	bf00      	nop
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	200007fc 	.word	0x200007fc
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	@ 0x28
 800878c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008796:	463a      	mov	r2, r7
 8008798:	1d39      	adds	r1, r7, #4
 800879a:	f107 0308 	add.w	r3, r7, #8
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fa ff62 	bl	8003668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	9202      	str	r2, [sp, #8]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	2300      	movs	r3, #0
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	2300      	movs	r3, #0
 80087b4:	460a      	mov	r2, r1
 80087b6:	4921      	ldr	r1, [pc, #132]	@ (800883c <vTaskStartScheduler+0xb4>)
 80087b8:	4821      	ldr	r0, [pc, #132]	@ (8008840 <vTaskStartScheduler+0xb8>)
 80087ba:	f7ff fe00 	bl	80083be <xTaskCreateStatic>
 80087be:	4603      	mov	r3, r0
 80087c0:	4a20      	ldr	r2, [pc, #128]	@ (8008844 <vTaskStartScheduler+0xbc>)
 80087c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087c4:	4b1f      	ldr	r3, [pc, #124]	@ (8008844 <vTaskStartScheduler+0xbc>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087cc:	2301      	movs	r3, #1
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	e001      	b.n	80087d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d11b      	bne.n	8008814 <vTaskStartScheduler+0x8c>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	613b      	str	r3, [r7, #16]
}
 80087ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087f0:	4b15      	ldr	r3, [pc, #84]	@ (8008848 <vTaskStartScheduler+0xc0>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	334c      	adds	r3, #76	@ 0x4c
 80087f6:	4a15      	ldr	r2, [pc, #84]	@ (800884c <vTaskStartScheduler+0xc4>)
 80087f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087fa:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <vTaskStartScheduler+0xc8>)
 80087fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008800:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008802:	4b14      	ldr	r3, [pc, #80]	@ (8008854 <vTaskStartScheduler+0xcc>)
 8008804:	2201      	movs	r2, #1
 8008806:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008808:	4b13      	ldr	r3, [pc, #76]	@ (8008858 <vTaskStartScheduler+0xd0>)
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800880e:	f000 fd77 	bl	8009300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008812:	e00f      	b.n	8008834 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800881a:	d10b      	bne.n	8008834 <vTaskStartScheduler+0xac>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	60fb      	str	r3, [r7, #12]
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	e7fd      	b.n	8008830 <vTaskStartScheduler+0xa8>
}
 8008834:	bf00      	nop
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	0800d7c0 	.word	0x0800d7c0
 8008840:	08008e11 	.word	0x08008e11
 8008844:	200007f8 	.word	0x200007f8
 8008848:	200006d4 	.word	0x200006d4
 800884c:	20000030 	.word	0x20000030
 8008850:	200007f4 	.word	0x200007f4
 8008854:	200007e0 	.word	0x200007e0
 8008858:	200007d8 	.word	0x200007d8

0800885c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008860:	4b04      	ldr	r3, [pc, #16]	@ (8008874 <vTaskSuspendAll+0x18>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3301      	adds	r3, #1
 8008866:	4a03      	ldr	r2, [pc, #12]	@ (8008874 <vTaskSuspendAll+0x18>)
 8008868:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800886a:	bf00      	nop
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	200007fc 	.word	0x200007fc

08008878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008886:	4b42      	ldr	r3, [pc, #264]	@ (8008990 <xTaskResumeAll+0x118>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10b      	bne.n	80088a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	603b      	str	r3, [r7, #0]
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088a6:	f000 fdcf 	bl	8009448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088aa:	4b39      	ldr	r3, [pc, #228]	@ (8008990 <xTaskResumeAll+0x118>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	4a37      	ldr	r2, [pc, #220]	@ (8008990 <xTaskResumeAll+0x118>)
 80088b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b4:	4b36      	ldr	r3, [pc, #216]	@ (8008990 <xTaskResumeAll+0x118>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d161      	bne.n	8008980 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088bc:	4b35      	ldr	r3, [pc, #212]	@ (8008994 <xTaskResumeAll+0x11c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d05d      	beq.n	8008980 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088c4:	e02e      	b.n	8008924 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c6:	4b34      	ldr	r3, [pc, #208]	@ (8008998 <xTaskResumeAll+0x120>)
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3318      	adds	r3, #24
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff f971 	bl	8007bba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3304      	adds	r3, #4
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff f96c 	bl	8007bba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e6:	2201      	movs	r2, #1
 80088e8:	409a      	lsls	r2, r3
 80088ea:	4b2c      	ldr	r3, [pc, #176]	@ (800899c <xTaskResumeAll+0x124>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	4a2a      	ldr	r2, [pc, #168]	@ (800899c <xTaskResumeAll+0x124>)
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4a27      	ldr	r2, [pc, #156]	@ (80089a0 <xTaskResumeAll+0x128>)
 8008902:	441a      	add	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3304      	adds	r3, #4
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f7ff f8f8 	bl	8007b00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008914:	4b23      	ldr	r3, [pc, #140]	@ (80089a4 <xTaskResumeAll+0x12c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	429a      	cmp	r2, r3
 800891c:	d302      	bcc.n	8008924 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800891e:	4b22      	ldr	r3, [pc, #136]	@ (80089a8 <xTaskResumeAll+0x130>)
 8008920:	2201      	movs	r2, #1
 8008922:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008924:	4b1c      	ldr	r3, [pc, #112]	@ (8008998 <xTaskResumeAll+0x120>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1cc      	bne.n	80088c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008932:	f000 fb29 	bl	8008f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008936:	4b1d      	ldr	r3, [pc, #116]	@ (80089ac <xTaskResumeAll+0x134>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008942:	f000 f837 	bl	80089b4 <xTaskIncrementTick>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800894c:	4b16      	ldr	r3, [pc, #88]	@ (80089a8 <xTaskResumeAll+0x130>)
 800894e:	2201      	movs	r2, #1
 8008950:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3b01      	subs	r3, #1
 8008956:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1f1      	bne.n	8008942 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800895e:	4b13      	ldr	r3, [pc, #76]	@ (80089ac <xTaskResumeAll+0x134>)
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008964:	4b10      	ldr	r3, [pc, #64]	@ (80089a8 <xTaskResumeAll+0x130>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d009      	beq.n	8008980 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800896c:	2301      	movs	r3, #1
 800896e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008970:	4b0f      	ldr	r3, [pc, #60]	@ (80089b0 <xTaskResumeAll+0x138>)
 8008972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008980:	f000 fd94 	bl	80094ac <vPortExitCritical>

	return xAlreadyYielded;
 8008984:	68bb      	ldr	r3, [r7, #8]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	200007fc 	.word	0x200007fc
 8008994:	200007d4 	.word	0x200007d4
 8008998:	20000794 	.word	0x20000794
 800899c:	200007dc 	.word	0x200007dc
 80089a0:	200006d8 	.word	0x200006d8
 80089a4:	200006d4 	.word	0x200006d4
 80089a8:	200007e8 	.word	0x200007e8
 80089ac:	200007e4 	.word	0x200007e4
 80089b0:	e000ed04 	.word	0xe000ed04

080089b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089be:	4b4f      	ldr	r3, [pc, #316]	@ (8008afc <xTaskIncrementTick+0x148>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 808f 	bne.w	8008ae6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089c8:	4b4d      	ldr	r3, [pc, #308]	@ (8008b00 <xTaskIncrementTick+0x14c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3301      	adds	r3, #1
 80089ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089d0:	4a4b      	ldr	r2, [pc, #300]	@ (8008b00 <xTaskIncrementTick+0x14c>)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d121      	bne.n	8008a20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80089dc:	4b49      	ldr	r3, [pc, #292]	@ (8008b04 <xTaskIncrementTick+0x150>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	603b      	str	r3, [r7, #0]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <xTaskIncrementTick+0x46>
 80089fe:	4b41      	ldr	r3, [pc, #260]	@ (8008b04 <xTaskIncrementTick+0x150>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	4b40      	ldr	r3, [pc, #256]	@ (8008b08 <xTaskIncrementTick+0x154>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a3e      	ldr	r2, [pc, #248]	@ (8008b04 <xTaskIncrementTick+0x150>)
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b08 <xTaskIncrementTick+0x154>)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	4b3e      	ldr	r3, [pc, #248]	@ (8008b0c <xTaskIncrementTick+0x158>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3301      	adds	r3, #1
 8008a18:	4a3c      	ldr	r2, [pc, #240]	@ (8008b0c <xTaskIncrementTick+0x158>)
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	f000 fab4 	bl	8008f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a20:	4b3b      	ldr	r3, [pc, #236]	@ (8008b10 <xTaskIncrementTick+0x15c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d348      	bcc.n	8008abc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a2a:	4b36      	ldr	r3, [pc, #216]	@ (8008b04 <xTaskIncrementTick+0x150>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d104      	bne.n	8008a3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a34:	4b36      	ldr	r3, [pc, #216]	@ (8008b10 <xTaskIncrementTick+0x15c>)
 8008a36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a3a:	601a      	str	r2, [r3, #0]
					break;
 8008a3c:	e03e      	b.n	8008abc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a3e:	4b31      	ldr	r3, [pc, #196]	@ (8008b04 <xTaskIncrementTick+0x150>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d203      	bcs.n	8008a5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a56:	4a2e      	ldr	r2, [pc, #184]	@ (8008b10 <xTaskIncrementTick+0x15c>)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a5c:	e02e      	b.n	8008abc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff f8a9 	bl	8007bba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d004      	beq.n	8008a7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	3318      	adds	r3, #24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff f8a0 	bl	8007bba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7e:	2201      	movs	r2, #1
 8008a80:	409a      	lsls	r2, r3
 8008a82:	4b24      	ldr	r3, [pc, #144]	@ (8008b14 <xTaskIncrementTick+0x160>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	4a22      	ldr	r2, [pc, #136]	@ (8008b14 <xTaskIncrementTick+0x160>)
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4a1f      	ldr	r2, [pc, #124]	@ (8008b18 <xTaskIncrementTick+0x164>)
 8008a9a:	441a      	add	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7ff f82c 	bl	8007b00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aac:	4b1b      	ldr	r3, [pc, #108]	@ (8008b1c <xTaskIncrementTick+0x168>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d3b9      	bcc.n	8008a2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aba:	e7b6      	b.n	8008a2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008abc:	4b17      	ldr	r3, [pc, #92]	@ (8008b1c <xTaskIncrementTick+0x168>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac2:	4915      	ldr	r1, [pc, #84]	@ (8008b18 <xTaskIncrementTick+0x164>)
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d901      	bls.n	8008ad8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ad8:	4b11      	ldr	r3, [pc, #68]	@ (8008b20 <xTaskIncrementTick+0x16c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d007      	beq.n	8008af0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	e004      	b.n	8008af0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b24 <xTaskIncrementTick+0x170>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	4a0d      	ldr	r2, [pc, #52]	@ (8008b24 <xTaskIncrementTick+0x170>)
 8008aee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008af0:	697b      	ldr	r3, [r7, #20]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200007fc 	.word	0x200007fc
 8008b00:	200007d8 	.word	0x200007d8
 8008b04:	2000078c 	.word	0x2000078c
 8008b08:	20000790 	.word	0x20000790
 8008b0c:	200007ec 	.word	0x200007ec
 8008b10:	200007f4 	.word	0x200007f4
 8008b14:	200007dc 	.word	0x200007dc
 8008b18:	200006d8 	.word	0x200006d8
 8008b1c:	200006d4 	.word	0x200006d4
 8008b20:	200007e8 	.word	0x200007e8
 8008b24:	200007e4 	.word	0x200007e4

08008b28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8008bd8 <vTaskSwitchContext+0xb0>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b36:	4b29      	ldr	r3, [pc, #164]	@ (8008bdc <vTaskSwitchContext+0xb4>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b3c:	e045      	b.n	8008bca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008b3e:	4b27      	ldr	r3, [pc, #156]	@ (8008bdc <vTaskSwitchContext+0xb4>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b44:	4b26      	ldr	r3, [pc, #152]	@ (8008be0 <vTaskSwitchContext+0xb8>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	fab3 f383 	clz	r3, r3
 8008b50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b52:	7afb      	ldrb	r3, [r7, #11]
 8008b54:	f1c3 031f 	rsb	r3, r3, #31
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	4922      	ldr	r1, [pc, #136]	@ (8008be4 <vTaskSwitchContext+0xbc>)
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	440b      	add	r3, r1
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10b      	bne.n	8008b86 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	e7fd      	b.n	8008b82 <vTaskSwitchContext+0x5a>
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4a14      	ldr	r2, [pc, #80]	@ (8008be4 <vTaskSwitchContext+0xbc>)
 8008b92:	4413      	add	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	605a      	str	r2, [r3, #4]
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d104      	bne.n	8008bb6 <vTaskSwitchContext+0x8e>
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	605a      	str	r2, [r3, #4]
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8008be8 <vTaskSwitchContext+0xc0>)
 8008bbe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bc0:	4b09      	ldr	r3, [pc, #36]	@ (8008be8 <vTaskSwitchContext+0xc0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	334c      	adds	r3, #76	@ 0x4c
 8008bc6:	4a09      	ldr	r2, [pc, #36]	@ (8008bec <vTaskSwitchContext+0xc4>)
 8008bc8:	6013      	str	r3, [r2, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	200007fc 	.word	0x200007fc
 8008bdc:	200007e8 	.word	0x200007e8
 8008be0:	200007dc 	.word	0x200007dc
 8008be4:	200006d8 	.word	0x200006d8
 8008be8:	200006d4 	.word	0x200006d4
 8008bec:	20000030 	.word	0x20000030

08008bf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10b      	bne.n	8008c18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	60fb      	str	r3, [r7, #12]
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	e7fd      	b.n	8008c14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c18:	4b07      	ldr	r3, [pc, #28]	@ (8008c38 <vTaskPlaceOnEventList+0x48>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3318      	adds	r3, #24
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7fe ff91 	bl	8007b48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c26:	2101      	movs	r1, #1
 8008c28:	6838      	ldr	r0, [r7, #0]
 8008c2a:	f000 fa73 	bl	8009114 <prvAddCurrentTaskToDelayedList>
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	200006d4 	.word	0x200006d4

08008c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10b      	bne.n	8008c6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60fb      	str	r3, [r7, #12]
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	e7fd      	b.n	8008c66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe ffa3 	bl	8007bba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c74:	4b1d      	ldr	r3, [pc, #116]	@ (8008cec <xTaskRemoveFromEventList+0xb0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d11c      	bne.n	8008cb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe ff9a 	bl	8007bba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	409a      	lsls	r2, r3
 8008c8e:	4b18      	ldr	r3, [pc, #96]	@ (8008cf0 <xTaskRemoveFromEventList+0xb4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	4a16      	ldr	r2, [pc, #88]	@ (8008cf0 <xTaskRemoveFromEventList+0xb4>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4a13      	ldr	r2, [pc, #76]	@ (8008cf4 <xTaskRemoveFromEventList+0xb8>)
 8008ca6:	441a      	add	r2, r3
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f7fe ff26 	bl	8007b00 <vListInsertEnd>
 8008cb4:	e005      	b.n	8008cc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	3318      	adds	r3, #24
 8008cba:	4619      	mov	r1, r3
 8008cbc:	480e      	ldr	r0, [pc, #56]	@ (8008cf8 <xTaskRemoveFromEventList+0xbc>)
 8008cbe:	f7fe ff1f 	bl	8007b00 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cfc <xTaskRemoveFromEventList+0xc0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d905      	bls.n	8008cdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <xTaskRemoveFromEventList+0xc4>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e001      	b.n	8008ce0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ce0:	697b      	ldr	r3, [r7, #20]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	200007fc 	.word	0x200007fc
 8008cf0:	200007dc 	.word	0x200007dc
 8008cf4:	200006d8 	.word	0x200006d8
 8008cf8:	20000794 	.word	0x20000794
 8008cfc:	200006d4 	.word	0x200006d4
 8008d00:	200007e8 	.word	0x200007e8

08008d04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <vTaskInternalSetTimeOutState+0x24>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d14:	4b05      	ldr	r3, [pc, #20]	@ (8008d2c <vTaskInternalSetTimeOutState+0x28>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	605a      	str	r2, [r3, #4]
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	200007ec 	.word	0x200007ec
 8008d2c:	200007d8 	.word	0x200007d8

08008d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10b      	bne.n	8008d76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	60fb      	str	r3, [r7, #12]
}
 8008d70:	bf00      	nop
 8008d72:	bf00      	nop
 8008d74:	e7fd      	b.n	8008d72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008d76:	f000 fb67 	bl	8009448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008df0 <xTaskCheckForTimeOut+0xc0>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d92:	d102      	bne.n	8008d9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e023      	b.n	8008de2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b15      	ldr	r3, [pc, #84]	@ (8008df4 <xTaskCheckForTimeOut+0xc4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d007      	beq.n	8008db6 <xTaskCheckForTimeOut+0x86>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d302      	bcc.n	8008db6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	61fb      	str	r3, [r7, #28]
 8008db4:	e015      	b.n	8008de2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d20b      	bcs.n	8008dd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	1ad2      	subs	r2, r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff ff99 	bl	8008d04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	e004      	b.n	8008de2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008de2:	f000 fb63 	bl	80094ac <vPortExitCritical>

	return xReturn;
 8008de6:	69fb      	ldr	r3, [r7, #28]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	200007d8 	.word	0x200007d8
 8008df4:	200007ec 	.word	0x200007ec

08008df8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dfc:	4b03      	ldr	r3, [pc, #12]	@ (8008e0c <vTaskMissedYield+0x14>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	601a      	str	r2, [r3, #0]
}
 8008e02:	bf00      	nop
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	200007e8 	.word	0x200007e8

08008e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e18:	f000 f852 	bl	8008ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e1c:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <prvIdleTask+0x28>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d9f9      	bls.n	8008e18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e24:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <prvIdleTask+0x2c>)
 8008e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e34:	e7f0      	b.n	8008e18 <prvIdleTask+0x8>
 8008e36:	bf00      	nop
 8008e38:	200006d8 	.word	0x200006d8
 8008e3c:	e000ed04 	.word	0xe000ed04

08008e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e46:	2300      	movs	r3, #0
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	e00c      	b.n	8008e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4a12      	ldr	r2, [pc, #72]	@ (8008ea0 <prvInitialiseTaskLists+0x60>)
 8008e58:	4413      	add	r3, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fe23 	bl	8007aa6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3301      	adds	r3, #1
 8008e64:	607b      	str	r3, [r7, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b06      	cmp	r3, #6
 8008e6a:	d9ef      	bls.n	8008e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e6c:	480d      	ldr	r0, [pc, #52]	@ (8008ea4 <prvInitialiseTaskLists+0x64>)
 8008e6e:	f7fe fe1a 	bl	8007aa6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e72:	480d      	ldr	r0, [pc, #52]	@ (8008ea8 <prvInitialiseTaskLists+0x68>)
 8008e74:	f7fe fe17 	bl	8007aa6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e78:	480c      	ldr	r0, [pc, #48]	@ (8008eac <prvInitialiseTaskLists+0x6c>)
 8008e7a:	f7fe fe14 	bl	8007aa6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e7e:	480c      	ldr	r0, [pc, #48]	@ (8008eb0 <prvInitialiseTaskLists+0x70>)
 8008e80:	f7fe fe11 	bl	8007aa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e84:	480b      	ldr	r0, [pc, #44]	@ (8008eb4 <prvInitialiseTaskLists+0x74>)
 8008e86:	f7fe fe0e 	bl	8007aa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb8 <prvInitialiseTaskLists+0x78>)
 8008e8c:	4a05      	ldr	r2, [pc, #20]	@ (8008ea4 <prvInitialiseTaskLists+0x64>)
 8008e8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e90:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <prvInitialiseTaskLists+0x7c>)
 8008e92:	4a05      	ldr	r2, [pc, #20]	@ (8008ea8 <prvInitialiseTaskLists+0x68>)
 8008e94:	601a      	str	r2, [r3, #0]
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	200006d8 	.word	0x200006d8
 8008ea4:	20000764 	.word	0x20000764
 8008ea8:	20000778 	.word	0x20000778
 8008eac:	20000794 	.word	0x20000794
 8008eb0:	200007a8 	.word	0x200007a8
 8008eb4:	200007c0 	.word	0x200007c0
 8008eb8:	2000078c 	.word	0x2000078c
 8008ebc:	20000790 	.word	0x20000790

08008ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ec6:	e019      	b.n	8008efc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ec8:	f000 fabe 	bl	8009448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ecc:	4b10      	ldr	r3, [pc, #64]	@ (8008f10 <prvCheckTasksWaitingTermination+0x50>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fe fe6e 	bl	8007bba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ede:	4b0d      	ldr	r3, [pc, #52]	@ (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4a0a      	ldr	r2, [pc, #40]	@ (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008ef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ef2:	f000 fadb 	bl	80094ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f810 	bl	8008f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008efc:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e1      	bne.n	8008ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	200007a8 	.word	0x200007a8
 8008f14:	200007d4 	.word	0x200007d4
 8008f18:	200007bc 	.word	0x200007bc

08008f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	334c      	adds	r3, #76	@ 0x4c
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 fb09 	bl	800a540 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d108      	bne.n	8008f4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fc31 	bl	80097a4 <vPortFree>
				vPortFree( pxTCB );
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fc2e 	bl	80097a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f48:	e019      	b.n	8008f7e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d103      	bne.n	8008f5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc25 	bl	80097a4 <vPortFree>
	}
 8008f5a:	e010      	b.n	8008f7e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d00b      	beq.n	8008f7e <prvDeleteTCB+0x62>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	e7fd      	b.n	8008f7a <prvDeleteTCB+0x5e>
	}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f98:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fa0:	e008      	b.n	8008fb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa2:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a04      	ldr	r2, [pc, #16]	@ (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008fb2:	6013      	str	r3, [r2, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	2000078c 	.word	0x2000078c
 8008fc4:	200007f4 	.word	0x200007f4

08008fc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fce:	4b0b      	ldr	r3, [pc, #44]	@ (8008ffc <xTaskGetSchedulerState+0x34>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	607b      	str	r3, [r7, #4]
 8008fda:	e008      	b.n	8008fee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fdc:	4b08      	ldr	r3, [pc, #32]	@ (8009000 <xTaskGetSchedulerState+0x38>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d102      	bne.n	8008fea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	e001      	b.n	8008fee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fea:	2300      	movs	r3, #0
 8008fec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fee:	687b      	ldr	r3, [r7, #4]
	}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	200007e0 	.word	0x200007e0
 8009000:	200007fc 	.word	0x200007fc

08009004 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d070      	beq.n	80090fc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800901a:	4b3b      	ldr	r3, [pc, #236]	@ (8009108 <xTaskPriorityDisinherit+0x104>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	429a      	cmp	r2, r3
 8009022:	d00b      	beq.n	800903c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	60fb      	str	r3, [r7, #12]
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	e7fd      	b.n	8009038 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10b      	bne.n	800905c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	60bb      	str	r3, [r7, #8]
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	e7fd      	b.n	8009058 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009060:	1e5a      	subs	r2, r3, #1
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800906e:	429a      	cmp	r2, r3
 8009070:	d044      	beq.n	80090fc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009076:	2b00      	cmp	r3, #0
 8009078:	d140      	bne.n	80090fc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	3304      	adds	r3, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fd9b 	bl	8007bba <uxListRemove>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d115      	bne.n	80090b6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908e:	491f      	ldr	r1, [pc, #124]	@ (800910c <xTaskPriorityDisinherit+0x108>)
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <xTaskPriorityDisinherit+0xb2>
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a4:	2201      	movs	r2, #1
 80090a6:	fa02 f303 	lsl.w	r3, r2, r3
 80090aa:	43da      	mvns	r2, r3
 80090ac:	4b18      	ldr	r3, [pc, #96]	@ (8009110 <xTaskPriorityDisinherit+0x10c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4013      	ands	r3, r2
 80090b2:	4a17      	ldr	r2, [pc, #92]	@ (8009110 <xTaskPriorityDisinherit+0x10c>)
 80090b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c2:	f1c3 0207 	rsb	r2, r3, #7
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ce:	2201      	movs	r2, #1
 80090d0:	409a      	lsls	r2, r3
 80090d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009110 <xTaskPriorityDisinherit+0x10c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	4a0d      	ldr	r2, [pc, #52]	@ (8009110 <xTaskPriorityDisinherit+0x10c>)
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4a08      	ldr	r2, [pc, #32]	@ (800910c <xTaskPriorityDisinherit+0x108>)
 80090ea:	441a      	add	r2, r3
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	3304      	adds	r3, #4
 80090f0:	4619      	mov	r1, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	f7fe fd04 	bl	8007b00 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090f8:	2301      	movs	r3, #1
 80090fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090fc:	697b      	ldr	r3, [r7, #20]
	}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	200006d4 	.word	0x200006d4
 800910c:	200006d8 	.word	0x200006d8
 8009110:	200007dc 	.word	0x200007dc

08009114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800911e:	4b29      	ldr	r3, [pc, #164]	@ (80091c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009124:	4b28      	ldr	r3, [pc, #160]	@ (80091c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3304      	adds	r3, #4
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fd45 	bl	8007bba <uxListRemove>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10b      	bne.n	800914e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009136:	4b24      	ldr	r3, [pc, #144]	@ (80091c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913c:	2201      	movs	r2, #1
 800913e:	fa02 f303 	lsl.w	r3, r2, r3
 8009142:	43da      	mvns	r2, r3
 8009144:	4b21      	ldr	r3, [pc, #132]	@ (80091cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4013      	ands	r3, r2
 800914a:	4a20      	ldr	r2, [pc, #128]	@ (80091cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800914c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009154:	d10a      	bne.n	800916c <prvAddCurrentTaskToDelayedList+0x58>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d007      	beq.n	800916c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800915c:	4b1a      	ldr	r3, [pc, #104]	@ (80091c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3304      	adds	r3, #4
 8009162:	4619      	mov	r1, r3
 8009164:	481a      	ldr	r0, [pc, #104]	@ (80091d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009166:	f7fe fccb 	bl	8007b00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800916a:	e026      	b.n	80091ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4413      	add	r3, r2
 8009172:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009174:	4b14      	ldr	r3, [pc, #80]	@ (80091c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	429a      	cmp	r2, r3
 8009182:	d209      	bcs.n	8009198 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009184:	4b13      	ldr	r3, [pc, #76]	@ (80091d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4b0f      	ldr	r3, [pc, #60]	@ (80091c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3304      	adds	r3, #4
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f7fe fcd9 	bl	8007b48 <vListInsert>
}
 8009196:	e010      	b.n	80091ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009198:	4b0f      	ldr	r3, [pc, #60]	@ (80091d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	4b0a      	ldr	r3, [pc, #40]	@ (80091c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3304      	adds	r3, #4
 80091a2:	4619      	mov	r1, r3
 80091a4:	4610      	mov	r0, r2
 80091a6:	f7fe fccf 	bl	8007b48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091aa:	4b0c      	ldr	r3, [pc, #48]	@ (80091dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d202      	bcs.n	80091ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80091b4:	4a09      	ldr	r2, [pc, #36]	@ (80091dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6013      	str	r3, [r2, #0]
}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	200007d8 	.word	0x200007d8
 80091c8:	200006d4 	.word	0x200006d4
 80091cc:	200007dc 	.word	0x200007dc
 80091d0:	200007c0 	.word	0x200007c0
 80091d4:	20000790 	.word	0x20000790
 80091d8:	2000078c 	.word	0x2000078c
 80091dc:	200007f4 	.word	0x200007f4

080091e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3b04      	subs	r3, #4
 80091f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3b04      	subs	r3, #4
 80091fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f023 0201 	bic.w	r2, r3, #1
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3b04      	subs	r3, #4
 800920e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009210:	4a0c      	ldr	r2, [pc, #48]	@ (8009244 <pxPortInitialiseStack+0x64>)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3b14      	subs	r3, #20
 800921a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3b04      	subs	r3, #4
 8009226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f06f 0202 	mvn.w	r2, #2
 800922e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3b20      	subs	r3, #32
 8009234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009236:	68fb      	ldr	r3, [r7, #12]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	08009249 	.word	0x08009249

08009248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009252:	4b13      	ldr	r3, [pc, #76]	@ (80092a0 <prvTaskExitError+0x58>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800925a:	d00b      	beq.n	8009274 <prvTaskExitError+0x2c>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60fb      	str	r3, [r7, #12]
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	e7fd      	b.n	8009270 <prvTaskExitError+0x28>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	60bb      	str	r3, [r7, #8]
}
 8009286:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009288:	bf00      	nop
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0fc      	beq.n	800928a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20000020 	.word	0x20000020
	...

080092b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092b0:	4b07      	ldr	r3, [pc, #28]	@ (80092d0 <pxCurrentTCBConst2>)
 80092b2:	6819      	ldr	r1, [r3, #0]
 80092b4:	6808      	ldr	r0, [r1, #0]
 80092b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ba:	f380 8809 	msr	PSP, r0
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f380 8811 	msr	BASEPRI, r0
 80092ca:	4770      	bx	lr
 80092cc:	f3af 8000 	nop.w

080092d0 <pxCurrentTCBConst2>:
 80092d0:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop

080092d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092d8:	4808      	ldr	r0, [pc, #32]	@ (80092fc <prvPortStartFirstTask+0x24>)
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	6800      	ldr	r0, [r0, #0]
 80092de:	f380 8808 	msr	MSP, r0
 80092e2:	f04f 0000 	mov.w	r0, #0
 80092e6:	f380 8814 	msr	CONTROL, r0
 80092ea:	b662      	cpsie	i
 80092ec:	b661      	cpsie	f
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	df00      	svc	0
 80092f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092fa:	bf00      	nop
 80092fc:	e000ed08 	.word	0xe000ed08

08009300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009306:	4b47      	ldr	r3, [pc, #284]	@ (8009424 <xPortStartScheduler+0x124>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a47      	ldr	r2, [pc, #284]	@ (8009428 <xPortStartScheduler+0x128>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d10b      	bne.n	8009328 <xPortStartScheduler+0x28>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	613b      	str	r3, [r7, #16]
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	e7fd      	b.n	8009324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009328:	4b3e      	ldr	r3, [pc, #248]	@ (8009424 <xPortStartScheduler+0x124>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a3f      	ldr	r2, [pc, #252]	@ (800942c <xPortStartScheduler+0x12c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d10b      	bne.n	800934a <xPortStartScheduler+0x4a>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	60fb      	str	r3, [r7, #12]
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop
 8009348:	e7fd      	b.n	8009346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800934a:	4b39      	ldr	r3, [pc, #228]	@ (8009430 <xPortStartScheduler+0x130>)
 800934c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	22ff      	movs	r2, #255	@ 0xff
 800935a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	b2db      	uxtb	r3, r3
 8009362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800936c:	b2da      	uxtb	r2, r3
 800936e:	4b31      	ldr	r3, [pc, #196]	@ (8009434 <xPortStartScheduler+0x134>)
 8009370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009372:	4b31      	ldr	r3, [pc, #196]	@ (8009438 <xPortStartScheduler+0x138>)
 8009374:	2207      	movs	r2, #7
 8009376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009378:	e009      	b.n	800938e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800937a:	4b2f      	ldr	r3, [pc, #188]	@ (8009438 <xPortStartScheduler+0x138>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3b01      	subs	r3, #1
 8009380:	4a2d      	ldr	r2, [pc, #180]	@ (8009438 <xPortStartScheduler+0x138>)
 8009382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	b2db      	uxtb	r3, r3
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	b2db      	uxtb	r3, r3
 800938c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800938e:	78fb      	ldrb	r3, [r7, #3]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009396:	2b80      	cmp	r3, #128	@ 0x80
 8009398:	d0ef      	beq.n	800937a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800939a:	4b27      	ldr	r3, [pc, #156]	@ (8009438 <xPortStartScheduler+0x138>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f1c3 0307 	rsb	r3, r3, #7
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	d00b      	beq.n	80093be <xPortStartScheduler+0xbe>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	60bb      	str	r3, [r7, #8]
}
 80093b8:	bf00      	nop
 80093ba:	bf00      	nop
 80093bc:	e7fd      	b.n	80093ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093be:	4b1e      	ldr	r3, [pc, #120]	@ (8009438 <xPortStartScheduler+0x138>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	021b      	lsls	r3, r3, #8
 80093c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009438 <xPortStartScheduler+0x138>)
 80093c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009438 <xPortStartScheduler+0x138>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093d0:	4a19      	ldr	r2, [pc, #100]	@ (8009438 <xPortStartScheduler+0x138>)
 80093d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093dc:	4b17      	ldr	r3, [pc, #92]	@ (800943c <xPortStartScheduler+0x13c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a16      	ldr	r2, [pc, #88]	@ (800943c <xPortStartScheduler+0x13c>)
 80093e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093e8:	4b14      	ldr	r3, [pc, #80]	@ (800943c <xPortStartScheduler+0x13c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a13      	ldr	r2, [pc, #76]	@ (800943c <xPortStartScheduler+0x13c>)
 80093ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80093f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093f4:	f000 f8da 	bl	80095ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093f8:	4b11      	ldr	r3, [pc, #68]	@ (8009440 <xPortStartScheduler+0x140>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093fe:	f000 f8f9 	bl	80095f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009402:	4b10      	ldr	r3, [pc, #64]	@ (8009444 <xPortStartScheduler+0x144>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a0f      	ldr	r2, [pc, #60]	@ (8009444 <xPortStartScheduler+0x144>)
 8009408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800940c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800940e:	f7ff ff63 	bl	80092d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009412:	f7ff fb89 	bl	8008b28 <vTaskSwitchContext>
	prvTaskExitError();
 8009416:	f7ff ff17 	bl	8009248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	e000ed00 	.word	0xe000ed00
 8009428:	410fc271 	.word	0x410fc271
 800942c:	410fc270 	.word	0x410fc270
 8009430:	e000e400 	.word	0xe000e400
 8009434:	20000800 	.word	0x20000800
 8009438:	20000804 	.word	0x20000804
 800943c:	e000ed20 	.word	0xe000ed20
 8009440:	20000020 	.word	0x20000020
 8009444:	e000ef34 	.word	0xe000ef34

08009448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	607b      	str	r3, [r7, #4]
}
 8009460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009462:	4b10      	ldr	r3, [pc, #64]	@ (80094a4 <vPortEnterCritical+0x5c>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3301      	adds	r3, #1
 8009468:	4a0e      	ldr	r2, [pc, #56]	@ (80094a4 <vPortEnterCritical+0x5c>)
 800946a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800946c:	4b0d      	ldr	r3, [pc, #52]	@ (80094a4 <vPortEnterCritical+0x5c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d110      	bne.n	8009496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009474:	4b0c      	ldr	r3, [pc, #48]	@ (80094a8 <vPortEnterCritical+0x60>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00b      	beq.n	8009496 <vPortEnterCritical+0x4e>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	603b      	str	r3, [r7, #0]
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	e7fd      	b.n	8009492 <vPortEnterCritical+0x4a>
	}
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	20000020 	.word	0x20000020
 80094a8:	e000ed04 	.word	0xe000ed04

080094ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094b2:	4b12      	ldr	r3, [pc, #72]	@ (80094fc <vPortExitCritical+0x50>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10b      	bne.n	80094d2 <vPortExitCritical+0x26>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	607b      	str	r3, [r7, #4]
}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	e7fd      	b.n	80094ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094d2:	4b0a      	ldr	r3, [pc, #40]	@ (80094fc <vPortExitCritical+0x50>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	4a08      	ldr	r2, [pc, #32]	@ (80094fc <vPortExitCritical+0x50>)
 80094da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094dc:	4b07      	ldr	r3, [pc, #28]	@ (80094fc <vPortExitCritical+0x50>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d105      	bne.n	80094f0 <vPortExitCritical+0x44>
 80094e4:	2300      	movs	r3, #0
 80094e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80094ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	20000020 	.word	0x20000020

08009500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009500:	f3ef 8009 	mrs	r0, PSP
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	4b15      	ldr	r3, [pc, #84]	@ (8009560 <pxCurrentTCBConst>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	f01e 0f10 	tst.w	lr, #16
 8009510:	bf08      	it	eq
 8009512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951a:	6010      	str	r0, [r2, #0]
 800951c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009524:	f380 8811 	msr	BASEPRI, r0
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f7ff fafa 	bl	8008b28 <vTaskSwitchContext>
 8009534:	f04f 0000 	mov.w	r0, #0
 8009538:	f380 8811 	msr	BASEPRI, r0
 800953c:	bc09      	pop	{r0, r3}
 800953e:	6819      	ldr	r1, [r3, #0]
 8009540:	6808      	ldr	r0, [r1, #0]
 8009542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009546:	f01e 0f10 	tst.w	lr, #16
 800954a:	bf08      	it	eq
 800954c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009550:	f380 8809 	msr	PSP, r0
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	f3af 8000 	nop.w

08009560 <pxCurrentTCBConst>:
 8009560:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop

08009568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	607b      	str	r3, [r7, #4]
}
 8009580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009582:	f7ff fa17 	bl	80089b4 <xTaskIncrementTick>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d003      	beq.n	8009594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800958c:	4b06      	ldr	r3, [pc, #24]	@ (80095a8 <SysTick_Handler+0x40>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	2300      	movs	r3, #0
 8009596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f383 8811 	msr	BASEPRI, r3
}
 800959e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095b0:	4b0b      	ldr	r3, [pc, #44]	@ (80095e0 <vPortSetupTimerInterrupt+0x34>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095b6:	4b0b      	ldr	r3, [pc, #44]	@ (80095e4 <vPortSetupTimerInterrupt+0x38>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095bc:	4b0a      	ldr	r3, [pc, #40]	@ (80095e8 <vPortSetupTimerInterrupt+0x3c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a0a      	ldr	r2, [pc, #40]	@ (80095ec <vPortSetupTimerInterrupt+0x40>)
 80095c2:	fba2 2303 	umull	r2, r3, r2, r3
 80095c6:	099b      	lsrs	r3, r3, #6
 80095c8:	4a09      	ldr	r2, [pc, #36]	@ (80095f0 <vPortSetupTimerInterrupt+0x44>)
 80095ca:	3b01      	subs	r3, #1
 80095cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095ce:	4b04      	ldr	r3, [pc, #16]	@ (80095e0 <vPortSetupTimerInterrupt+0x34>)
 80095d0:	2207      	movs	r2, #7
 80095d2:	601a      	str	r2, [r3, #0]
}
 80095d4:	bf00      	nop
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	e000e010 	.word	0xe000e010
 80095e4:	e000e018 	.word	0xe000e018
 80095e8:	20000014 	.word	0x20000014
 80095ec:	10624dd3 	.word	0x10624dd3
 80095f0:	e000e014 	.word	0xe000e014

080095f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009604 <vPortEnableVFP+0x10>
 80095f8:	6801      	ldr	r1, [r0, #0]
 80095fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80095fe:	6001      	str	r1, [r0, #0]
 8009600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009602:	bf00      	nop
 8009604:	e000ed88 	.word	0xe000ed88

08009608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b08a      	sub	sp, #40	@ 0x28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009610:	2300      	movs	r3, #0
 8009612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009614:	f7ff f922 	bl	800885c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009618:	4b5c      	ldr	r3, [pc, #368]	@ (800978c <pvPortMalloc+0x184>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009620:	f000 f924 	bl	800986c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009624:	4b5a      	ldr	r3, [pc, #360]	@ (8009790 <pvPortMalloc+0x188>)
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4013      	ands	r3, r2
 800962c:	2b00      	cmp	r3, #0
 800962e:	f040 8095 	bne.w	800975c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01e      	beq.n	8009676 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009638:	2208      	movs	r2, #8
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4413      	add	r3, r2
 800963e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	2b00      	cmp	r3, #0
 8009648:	d015      	beq.n	8009676 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f023 0307 	bic.w	r3, r3, #7
 8009650:	3308      	adds	r3, #8
 8009652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f003 0307 	and.w	r3, r3, #7
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <pvPortMalloc+0x6e>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	617b      	str	r3, [r7, #20]
}
 8009670:	bf00      	nop
 8009672:	bf00      	nop
 8009674:	e7fd      	b.n	8009672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d06f      	beq.n	800975c <pvPortMalloc+0x154>
 800967c:	4b45      	ldr	r3, [pc, #276]	@ (8009794 <pvPortMalloc+0x18c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	429a      	cmp	r2, r3
 8009684:	d86a      	bhi.n	800975c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009686:	4b44      	ldr	r3, [pc, #272]	@ (8009798 <pvPortMalloc+0x190>)
 8009688:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800968a:	4b43      	ldr	r3, [pc, #268]	@ (8009798 <pvPortMalloc+0x190>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009690:	e004      	b.n	800969c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009694:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d903      	bls.n	80096ae <pvPortMalloc+0xa6>
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1f1      	bne.n	8009692 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096ae:	4b37      	ldr	r3, [pc, #220]	@ (800978c <pvPortMalloc+0x184>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d051      	beq.n	800975c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2208      	movs	r2, #8
 80096be:	4413      	add	r3, r2
 80096c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	1ad2      	subs	r2, r2, r3
 80096d2:	2308      	movs	r3, #8
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d920      	bls.n	800971c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4413      	add	r3, r2
 80096e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	f003 0307 	and.w	r3, r3, #7
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <pvPortMalloc+0xfc>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	613b      	str	r3, [r7, #16]
}
 80096fe:	bf00      	nop
 8009700:	bf00      	nop
 8009702:	e7fd      	b.n	8009700 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	1ad2      	subs	r2, r2, r3
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009716:	69b8      	ldr	r0, [r7, #24]
 8009718:	f000 f90a 	bl	8009930 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800971c:	4b1d      	ldr	r3, [pc, #116]	@ (8009794 <pvPortMalloc+0x18c>)
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	4a1b      	ldr	r2, [pc, #108]	@ (8009794 <pvPortMalloc+0x18c>)
 8009728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800972a:	4b1a      	ldr	r3, [pc, #104]	@ (8009794 <pvPortMalloc+0x18c>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	4b1b      	ldr	r3, [pc, #108]	@ (800979c <pvPortMalloc+0x194>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	429a      	cmp	r2, r3
 8009734:	d203      	bcs.n	800973e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009736:	4b17      	ldr	r3, [pc, #92]	@ (8009794 <pvPortMalloc+0x18c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a18      	ldr	r2, [pc, #96]	@ (800979c <pvPortMalloc+0x194>)
 800973c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	4b13      	ldr	r3, [pc, #76]	@ (8009790 <pvPortMalloc+0x188>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	431a      	orrs	r2, r3
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974e:	2200      	movs	r2, #0
 8009750:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009752:	4b13      	ldr	r3, [pc, #76]	@ (80097a0 <pvPortMalloc+0x198>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3301      	adds	r3, #1
 8009758:	4a11      	ldr	r2, [pc, #68]	@ (80097a0 <pvPortMalloc+0x198>)
 800975a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800975c:	f7ff f88c 	bl	8008878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00b      	beq.n	8009782 <pvPortMalloc+0x17a>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	60fb      	str	r3, [r7, #12]
}
 800977c:	bf00      	nop
 800977e:	bf00      	nop
 8009780:	e7fd      	b.n	800977e <pvPortMalloc+0x176>
	return pvReturn;
 8009782:	69fb      	ldr	r3, [r7, #28]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3728      	adds	r7, #40	@ 0x28
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20004410 	.word	0x20004410
 8009790:	20004424 	.word	0x20004424
 8009794:	20004414 	.word	0x20004414
 8009798:	20004408 	.word	0x20004408
 800979c:	20004418 	.word	0x20004418
 80097a0:	2000441c 	.word	0x2000441c

080097a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d04f      	beq.n	8009856 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097b6:	2308      	movs	r3, #8
 80097b8:	425b      	negs	r3, r3
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4413      	add	r3, r2
 80097be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	4b25      	ldr	r3, [pc, #148]	@ (8009860 <vPortFree+0xbc>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4013      	ands	r3, r2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10b      	bne.n	80097ea <vPortFree+0x46>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	60fb      	str	r3, [r7, #12]
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	e7fd      	b.n	80097e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <vPortFree+0x66>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	60bb      	str	r3, [r7, #8]
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	e7fd      	b.n	8009806 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	4b14      	ldr	r3, [pc, #80]	@ (8009860 <vPortFree+0xbc>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4013      	ands	r3, r2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01e      	beq.n	8009856 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d11a      	bne.n	8009856 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	4b0e      	ldr	r3, [pc, #56]	@ (8009860 <vPortFree+0xbc>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	43db      	mvns	r3, r3
 800982a:	401a      	ands	r2, r3
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009830:	f7ff f814 	bl	800885c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	4b0a      	ldr	r3, [pc, #40]	@ (8009864 <vPortFree+0xc0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4413      	add	r3, r2
 800983e:	4a09      	ldr	r2, [pc, #36]	@ (8009864 <vPortFree+0xc0>)
 8009840:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009842:	6938      	ldr	r0, [r7, #16]
 8009844:	f000 f874 	bl	8009930 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009848:	4b07      	ldr	r3, [pc, #28]	@ (8009868 <vPortFree+0xc4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3301      	adds	r3, #1
 800984e:	4a06      	ldr	r2, [pc, #24]	@ (8009868 <vPortFree+0xc4>)
 8009850:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009852:	f7ff f811 	bl	8008878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009856:	bf00      	nop
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20004424 	.word	0x20004424
 8009864:	20004414 	.word	0x20004414
 8009868:	20004420 	.word	0x20004420

0800986c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009872:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009876:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009878:	4b27      	ldr	r3, [pc, #156]	@ (8009918 <prvHeapInit+0xac>)
 800987a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00c      	beq.n	80098a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3307      	adds	r3, #7
 800988a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f023 0307 	bic.w	r3, r3, #7
 8009892:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	4a1f      	ldr	r2, [pc, #124]	@ (8009918 <prvHeapInit+0xac>)
 800989c:	4413      	add	r3, r2
 800989e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098a4:	4a1d      	ldr	r2, [pc, #116]	@ (800991c <prvHeapInit+0xb0>)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098aa:	4b1c      	ldr	r3, [pc, #112]	@ (800991c <prvHeapInit+0xb0>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	4413      	add	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098b8:	2208      	movs	r2, #8
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	1a9b      	subs	r3, r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 0307 	bic.w	r3, r3, #7
 80098c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4a15      	ldr	r2, [pc, #84]	@ (8009920 <prvHeapInit+0xb4>)
 80098cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098ce:	4b14      	ldr	r3, [pc, #80]	@ (8009920 <prvHeapInit+0xb4>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2200      	movs	r2, #0
 80098d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098d6:	4b12      	ldr	r3, [pc, #72]	@ (8009920 <prvHeapInit+0xb4>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	1ad2      	subs	r2, r2, r3
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009920 <prvHeapInit+0xb4>)
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4a0a      	ldr	r2, [pc, #40]	@ (8009924 <prvHeapInit+0xb8>)
 80098fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	4a09      	ldr	r2, [pc, #36]	@ (8009928 <prvHeapInit+0xbc>)
 8009902:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009904:	4b09      	ldr	r3, [pc, #36]	@ (800992c <prvHeapInit+0xc0>)
 8009906:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800990a:	601a      	str	r2, [r3, #0]
}
 800990c:	bf00      	nop
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	20000808 	.word	0x20000808
 800991c:	20004408 	.word	0x20004408
 8009920:	20004410 	.word	0x20004410
 8009924:	20004418 	.word	0x20004418
 8009928:	20004414 	.word	0x20004414
 800992c:	20004424 	.word	0x20004424

08009930 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009938:	4b28      	ldr	r3, [pc, #160]	@ (80099dc <prvInsertBlockIntoFreeList+0xac>)
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	e002      	b.n	8009944 <prvInsertBlockIntoFreeList+0x14>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	429a      	cmp	r2, r3
 800994c:	d8f7      	bhi.n	800993e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	4413      	add	r3, r2
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	429a      	cmp	r2, r3
 800995e:	d108      	bne.n	8009972 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	441a      	add	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	441a      	add	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d118      	bne.n	80099b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	4b15      	ldr	r3, [pc, #84]	@ (80099e0 <prvInsertBlockIntoFreeList+0xb0>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d00d      	beq.n	80099ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	441a      	add	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	e008      	b.n	80099c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099ae:	4b0c      	ldr	r3, [pc, #48]	@ (80099e0 <prvInsertBlockIntoFreeList+0xb0>)
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	e003      	b.n	80099c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d002      	beq.n	80099ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099ce:	bf00      	nop
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	20004408 	.word	0x20004408
 80099e0:	20004410 	.word	0x20004410

080099e4 <__cvt>:
 80099e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099e8:	ec57 6b10 	vmov	r6, r7, d0
 80099ec:	2f00      	cmp	r7, #0
 80099ee:	460c      	mov	r4, r1
 80099f0:	4619      	mov	r1, r3
 80099f2:	463b      	mov	r3, r7
 80099f4:	bfbb      	ittet	lt
 80099f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80099fa:	461f      	movlt	r7, r3
 80099fc:	2300      	movge	r3, #0
 80099fe:	232d      	movlt	r3, #45	@ 0x2d
 8009a00:	700b      	strb	r3, [r1, #0]
 8009a02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a08:	4691      	mov	r9, r2
 8009a0a:	f023 0820 	bic.w	r8, r3, #32
 8009a0e:	bfbc      	itt	lt
 8009a10:	4632      	movlt	r2, r6
 8009a12:	4616      	movlt	r6, r2
 8009a14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a18:	d005      	beq.n	8009a26 <__cvt+0x42>
 8009a1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a1e:	d100      	bne.n	8009a22 <__cvt+0x3e>
 8009a20:	3401      	adds	r4, #1
 8009a22:	2102      	movs	r1, #2
 8009a24:	e000      	b.n	8009a28 <__cvt+0x44>
 8009a26:	2103      	movs	r1, #3
 8009a28:	ab03      	add	r3, sp, #12
 8009a2a:	9301      	str	r3, [sp, #4]
 8009a2c:	ab02      	add	r3, sp, #8
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	ec47 6b10 	vmov	d0, r6, r7
 8009a34:	4653      	mov	r3, sl
 8009a36:	4622      	mov	r2, r4
 8009a38:	f000 fed2 	bl	800a7e0 <_dtoa_r>
 8009a3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a40:	4605      	mov	r5, r0
 8009a42:	d119      	bne.n	8009a78 <__cvt+0x94>
 8009a44:	f019 0f01 	tst.w	r9, #1
 8009a48:	d00e      	beq.n	8009a68 <__cvt+0x84>
 8009a4a:	eb00 0904 	add.w	r9, r0, r4
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2300      	movs	r3, #0
 8009a52:	4630      	mov	r0, r6
 8009a54:	4639      	mov	r1, r7
 8009a56:	f7f7 f837 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a5a:	b108      	cbz	r0, 8009a60 <__cvt+0x7c>
 8009a5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a60:	2230      	movs	r2, #48	@ 0x30
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	454b      	cmp	r3, r9
 8009a66:	d31e      	bcc.n	8009aa6 <__cvt+0xc2>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a6c:	1b5b      	subs	r3, r3, r5
 8009a6e:	4628      	mov	r0, r5
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	b004      	add	sp, #16
 8009a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a7c:	eb00 0904 	add.w	r9, r0, r4
 8009a80:	d1e5      	bne.n	8009a4e <__cvt+0x6a>
 8009a82:	7803      	ldrb	r3, [r0, #0]
 8009a84:	2b30      	cmp	r3, #48	@ 0x30
 8009a86:	d10a      	bne.n	8009a9e <__cvt+0xba>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	4639      	mov	r1, r7
 8009a90:	f7f7 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a94:	b918      	cbnz	r0, 8009a9e <__cvt+0xba>
 8009a96:	f1c4 0401 	rsb	r4, r4, #1
 8009a9a:	f8ca 4000 	str.w	r4, [sl]
 8009a9e:	f8da 3000 	ldr.w	r3, [sl]
 8009aa2:	4499      	add	r9, r3
 8009aa4:	e7d3      	b.n	8009a4e <__cvt+0x6a>
 8009aa6:	1c59      	adds	r1, r3, #1
 8009aa8:	9103      	str	r1, [sp, #12]
 8009aaa:	701a      	strb	r2, [r3, #0]
 8009aac:	e7d9      	b.n	8009a62 <__cvt+0x7e>

08009aae <__exponent>:
 8009aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	bfba      	itte	lt
 8009ab4:	4249      	neglt	r1, r1
 8009ab6:	232d      	movlt	r3, #45	@ 0x2d
 8009ab8:	232b      	movge	r3, #43	@ 0x2b
 8009aba:	2909      	cmp	r1, #9
 8009abc:	7002      	strb	r2, [r0, #0]
 8009abe:	7043      	strb	r3, [r0, #1]
 8009ac0:	dd29      	ble.n	8009b16 <__exponent+0x68>
 8009ac2:	f10d 0307 	add.w	r3, sp, #7
 8009ac6:	461d      	mov	r5, r3
 8009ac8:	270a      	movs	r7, #10
 8009aca:	461a      	mov	r2, r3
 8009acc:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ad0:	fb07 1416 	mls	r4, r7, r6, r1
 8009ad4:	3430      	adds	r4, #48	@ 0x30
 8009ad6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ada:	460c      	mov	r4, r1
 8009adc:	2c63      	cmp	r4, #99	@ 0x63
 8009ade:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	dcf1      	bgt.n	8009aca <__exponent+0x1c>
 8009ae6:	3130      	adds	r1, #48	@ 0x30
 8009ae8:	1e94      	subs	r4, r2, #2
 8009aea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009aee:	1c41      	adds	r1, r0, #1
 8009af0:	4623      	mov	r3, r4
 8009af2:	42ab      	cmp	r3, r5
 8009af4:	d30a      	bcc.n	8009b0c <__exponent+0x5e>
 8009af6:	f10d 0309 	add.w	r3, sp, #9
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	42ac      	cmp	r4, r5
 8009afe:	bf88      	it	hi
 8009b00:	2300      	movhi	r3, #0
 8009b02:	3302      	adds	r3, #2
 8009b04:	4403      	add	r3, r0
 8009b06:	1a18      	subs	r0, r3, r0
 8009b08:	b003      	add	sp, #12
 8009b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b14:	e7ed      	b.n	8009af2 <__exponent+0x44>
 8009b16:	2330      	movs	r3, #48	@ 0x30
 8009b18:	3130      	adds	r1, #48	@ 0x30
 8009b1a:	7083      	strb	r3, [r0, #2]
 8009b1c:	70c1      	strb	r1, [r0, #3]
 8009b1e:	1d03      	adds	r3, r0, #4
 8009b20:	e7f1      	b.n	8009b06 <__exponent+0x58>
	...

08009b24 <_printf_float>:
 8009b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b28:	b08d      	sub	sp, #52	@ 0x34
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b30:	4616      	mov	r6, r2
 8009b32:	461f      	mov	r7, r3
 8009b34:	4605      	mov	r5, r0
 8009b36:	f000 fcef 	bl	800a518 <_localeconv_r>
 8009b3a:	6803      	ldr	r3, [r0, #0]
 8009b3c:	9304      	str	r3, [sp, #16]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7f6 fb96 	bl	8000270 <strlen>
 8009b44:	2300      	movs	r3, #0
 8009b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b48:	f8d8 3000 	ldr.w	r3, [r8]
 8009b4c:	9005      	str	r0, [sp, #20]
 8009b4e:	3307      	adds	r3, #7
 8009b50:	f023 0307 	bic.w	r3, r3, #7
 8009b54:	f103 0208 	add.w	r2, r3, #8
 8009b58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b5c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b60:	f8c8 2000 	str.w	r2, [r8]
 8009b64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b6c:	9307      	str	r3, [sp, #28]
 8009b6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b7a:	4b9c      	ldr	r3, [pc, #624]	@ (8009dec <_printf_float+0x2c8>)
 8009b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b80:	f7f6 ffd4 	bl	8000b2c <__aeabi_dcmpun>
 8009b84:	bb70      	cbnz	r0, 8009be4 <_printf_float+0xc0>
 8009b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b8a:	4b98      	ldr	r3, [pc, #608]	@ (8009dec <_printf_float+0x2c8>)
 8009b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b90:	f7f6 ffae 	bl	8000af0 <__aeabi_dcmple>
 8009b94:	bb30      	cbnz	r0, 8009be4 <_printf_float+0xc0>
 8009b96:	2200      	movs	r2, #0
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	f7f6 ff9d 	bl	8000adc <__aeabi_dcmplt>
 8009ba2:	b110      	cbz	r0, 8009baa <_printf_float+0x86>
 8009ba4:	232d      	movs	r3, #45	@ 0x2d
 8009ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009baa:	4a91      	ldr	r2, [pc, #580]	@ (8009df0 <_printf_float+0x2cc>)
 8009bac:	4b91      	ldr	r3, [pc, #580]	@ (8009df4 <_printf_float+0x2d0>)
 8009bae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009bb2:	bf94      	ite	ls
 8009bb4:	4690      	movls	r8, r2
 8009bb6:	4698      	movhi	r8, r3
 8009bb8:	2303      	movs	r3, #3
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	f02b 0304 	bic.w	r3, fp, #4
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	f04f 0900 	mov.w	r9, #0
 8009bc6:	9700      	str	r7, [sp, #0]
 8009bc8:	4633      	mov	r3, r6
 8009bca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009bcc:	4621      	mov	r1, r4
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f000 f9d2 	bl	8009f78 <_printf_common>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f040 808d 	bne.w	8009cf4 <_printf_float+0x1d0>
 8009bda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bde:	b00d      	add	sp, #52	@ 0x34
 8009be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be4:	4642      	mov	r2, r8
 8009be6:	464b      	mov	r3, r9
 8009be8:	4640      	mov	r0, r8
 8009bea:	4649      	mov	r1, r9
 8009bec:	f7f6 ff9e 	bl	8000b2c <__aeabi_dcmpun>
 8009bf0:	b140      	cbz	r0, 8009c04 <_printf_float+0xe0>
 8009bf2:	464b      	mov	r3, r9
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bfbc      	itt	lt
 8009bf8:	232d      	movlt	r3, #45	@ 0x2d
 8009bfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8009df8 <_printf_float+0x2d4>)
 8009c00:	4b7e      	ldr	r3, [pc, #504]	@ (8009dfc <_printf_float+0x2d8>)
 8009c02:	e7d4      	b.n	8009bae <_printf_float+0x8a>
 8009c04:	6863      	ldr	r3, [r4, #4]
 8009c06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c0a:	9206      	str	r2, [sp, #24]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	d13b      	bne.n	8009c88 <_printf_float+0x164>
 8009c10:	2306      	movs	r3, #6
 8009c12:	6063      	str	r3, [r4, #4]
 8009c14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c18:	2300      	movs	r3, #0
 8009c1a:	6022      	str	r2, [r4, #0]
 8009c1c:	9303      	str	r3, [sp, #12]
 8009c1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c24:	ab09      	add	r3, sp, #36	@ 0x24
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	6861      	ldr	r1, [r4, #4]
 8009c2a:	ec49 8b10 	vmov	d0, r8, r9
 8009c2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c32:	4628      	mov	r0, r5
 8009c34:	f7ff fed6 	bl	80099e4 <__cvt>
 8009c38:	9b06      	ldr	r3, [sp, #24]
 8009c3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c3c:	2b47      	cmp	r3, #71	@ 0x47
 8009c3e:	4680      	mov	r8, r0
 8009c40:	d129      	bne.n	8009c96 <_printf_float+0x172>
 8009c42:	1cc8      	adds	r0, r1, #3
 8009c44:	db02      	blt.n	8009c4c <_printf_float+0x128>
 8009c46:	6863      	ldr	r3, [r4, #4]
 8009c48:	4299      	cmp	r1, r3
 8009c4a:	dd41      	ble.n	8009cd0 <_printf_float+0x1ac>
 8009c4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c50:	fa5f fa8a 	uxtb.w	sl, sl
 8009c54:	3901      	subs	r1, #1
 8009c56:	4652      	mov	r2, sl
 8009c58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c5e:	f7ff ff26 	bl	8009aae <__exponent>
 8009c62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c64:	1813      	adds	r3, r2, r0
 8009c66:	2a01      	cmp	r2, #1
 8009c68:	4681      	mov	r9, r0
 8009c6a:	6123      	str	r3, [r4, #16]
 8009c6c:	dc02      	bgt.n	8009c74 <_printf_float+0x150>
 8009c6e:	6822      	ldr	r2, [r4, #0]
 8009c70:	07d2      	lsls	r2, r2, #31
 8009c72:	d501      	bpl.n	8009c78 <_printf_float+0x154>
 8009c74:	3301      	adds	r3, #1
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0a2      	beq.n	8009bc6 <_printf_float+0xa2>
 8009c80:	232d      	movs	r3, #45	@ 0x2d
 8009c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c86:	e79e      	b.n	8009bc6 <_printf_float+0xa2>
 8009c88:	9a06      	ldr	r2, [sp, #24]
 8009c8a:	2a47      	cmp	r2, #71	@ 0x47
 8009c8c:	d1c2      	bne.n	8009c14 <_printf_float+0xf0>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1c0      	bne.n	8009c14 <_printf_float+0xf0>
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7bd      	b.n	8009c12 <_printf_float+0xee>
 8009c96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c9a:	d9db      	bls.n	8009c54 <_printf_float+0x130>
 8009c9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ca0:	d118      	bne.n	8009cd4 <_printf_float+0x1b0>
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	6863      	ldr	r3, [r4, #4]
 8009ca6:	dd0b      	ble.n	8009cc0 <_printf_float+0x19c>
 8009ca8:	6121      	str	r1, [r4, #16]
 8009caa:	b913      	cbnz	r3, 8009cb2 <_printf_float+0x18e>
 8009cac:	6822      	ldr	r2, [r4, #0]
 8009cae:	07d0      	lsls	r0, r2, #31
 8009cb0:	d502      	bpl.n	8009cb8 <_printf_float+0x194>
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	440b      	add	r3, r1
 8009cb6:	6123      	str	r3, [r4, #16]
 8009cb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009cba:	f04f 0900 	mov.w	r9, #0
 8009cbe:	e7db      	b.n	8009c78 <_printf_float+0x154>
 8009cc0:	b913      	cbnz	r3, 8009cc8 <_printf_float+0x1a4>
 8009cc2:	6822      	ldr	r2, [r4, #0]
 8009cc4:	07d2      	lsls	r2, r2, #31
 8009cc6:	d501      	bpl.n	8009ccc <_printf_float+0x1a8>
 8009cc8:	3302      	adds	r3, #2
 8009cca:	e7f4      	b.n	8009cb6 <_printf_float+0x192>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e7f2      	b.n	8009cb6 <_printf_float+0x192>
 8009cd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	db05      	blt.n	8009ce6 <_printf_float+0x1c2>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	6121      	str	r1, [r4, #16]
 8009cde:	07d8      	lsls	r0, r3, #31
 8009ce0:	d5ea      	bpl.n	8009cb8 <_printf_float+0x194>
 8009ce2:	1c4b      	adds	r3, r1, #1
 8009ce4:	e7e7      	b.n	8009cb6 <_printf_float+0x192>
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	bfd4      	ite	le
 8009cea:	f1c1 0202 	rsble	r2, r1, #2
 8009cee:	2201      	movgt	r2, #1
 8009cf0:	4413      	add	r3, r2
 8009cf2:	e7e0      	b.n	8009cb6 <_printf_float+0x192>
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	055a      	lsls	r2, r3, #21
 8009cf8:	d407      	bmi.n	8009d0a <_printf_float+0x1e6>
 8009cfa:	6923      	ldr	r3, [r4, #16]
 8009cfc:	4642      	mov	r2, r8
 8009cfe:	4631      	mov	r1, r6
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b8      	blx	r7
 8009d04:	3001      	adds	r0, #1
 8009d06:	d12b      	bne.n	8009d60 <_printf_float+0x23c>
 8009d08:	e767      	b.n	8009bda <_printf_float+0xb6>
 8009d0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d0e:	f240 80dd 	bls.w	8009ecc <_printf_float+0x3a8>
 8009d12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d16:	2200      	movs	r2, #0
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f7f6 fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d033      	beq.n	8009d8a <_printf_float+0x266>
 8009d22:	4a37      	ldr	r2, [pc, #220]	@ (8009e00 <_printf_float+0x2dc>)
 8009d24:	2301      	movs	r3, #1
 8009d26:	4631      	mov	r1, r6
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b8      	blx	r7
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	f43f af54 	beq.w	8009bda <_printf_float+0xb6>
 8009d32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d36:	4543      	cmp	r3, r8
 8009d38:	db02      	blt.n	8009d40 <_printf_float+0x21c>
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	07d8      	lsls	r0, r3, #31
 8009d3e:	d50f      	bpl.n	8009d60 <_printf_float+0x23c>
 8009d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	47b8      	blx	r7
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f43f af45 	beq.w	8009bda <_printf_float+0xb6>
 8009d50:	f04f 0900 	mov.w	r9, #0
 8009d54:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009d58:	f104 0a1a 	add.w	sl, r4, #26
 8009d5c:	45c8      	cmp	r8, r9
 8009d5e:	dc09      	bgt.n	8009d74 <_printf_float+0x250>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	079b      	lsls	r3, r3, #30
 8009d64:	f100 8103 	bmi.w	8009f6e <_printf_float+0x44a>
 8009d68:	68e0      	ldr	r0, [r4, #12]
 8009d6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d6c:	4298      	cmp	r0, r3
 8009d6e:	bfb8      	it	lt
 8009d70:	4618      	movlt	r0, r3
 8009d72:	e734      	b.n	8009bde <_printf_float+0xba>
 8009d74:	2301      	movs	r3, #1
 8009d76:	4652      	mov	r2, sl
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	47b8      	blx	r7
 8009d7e:	3001      	adds	r0, #1
 8009d80:	f43f af2b 	beq.w	8009bda <_printf_float+0xb6>
 8009d84:	f109 0901 	add.w	r9, r9, #1
 8009d88:	e7e8      	b.n	8009d5c <_printf_float+0x238>
 8009d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dc39      	bgt.n	8009e04 <_printf_float+0x2e0>
 8009d90:	4a1b      	ldr	r2, [pc, #108]	@ (8009e00 <_printf_float+0x2dc>)
 8009d92:	2301      	movs	r3, #1
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f43f af1d 	beq.w	8009bda <_printf_float+0xb6>
 8009da0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009da4:	ea59 0303 	orrs.w	r3, r9, r3
 8009da8:	d102      	bne.n	8009db0 <_printf_float+0x28c>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	07d9      	lsls	r1, r3, #31
 8009dae:	d5d7      	bpl.n	8009d60 <_printf_float+0x23c>
 8009db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f af0d 	beq.w	8009bda <_printf_float+0xb6>
 8009dc0:	f04f 0a00 	mov.w	sl, #0
 8009dc4:	f104 0b1a 	add.w	fp, r4, #26
 8009dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dca:	425b      	negs	r3, r3
 8009dcc:	4553      	cmp	r3, sl
 8009dce:	dc01      	bgt.n	8009dd4 <_printf_float+0x2b0>
 8009dd0:	464b      	mov	r3, r9
 8009dd2:	e793      	b.n	8009cfc <_printf_float+0x1d8>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	465a      	mov	r2, fp
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	f43f aefb 	beq.w	8009bda <_printf_float+0xb6>
 8009de4:	f10a 0a01 	add.w	sl, sl, #1
 8009de8:	e7ee      	b.n	8009dc8 <_printf_float+0x2a4>
 8009dea:	bf00      	nop
 8009dec:	7fefffff 	.word	0x7fefffff
 8009df0:	0800d7e0 	.word	0x0800d7e0
 8009df4:	0800d7e4 	.word	0x0800d7e4
 8009df8:	0800d7e8 	.word	0x0800d7e8
 8009dfc:	0800d7ec 	.word	0x0800d7ec
 8009e00:	0800d7f0 	.word	0x0800d7f0
 8009e04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e0a:	4553      	cmp	r3, sl
 8009e0c:	bfa8      	it	ge
 8009e0e:	4653      	movge	r3, sl
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	4699      	mov	r9, r3
 8009e14:	dc36      	bgt.n	8009e84 <_printf_float+0x360>
 8009e16:	f04f 0b00 	mov.w	fp, #0
 8009e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e1e:	f104 021a 	add.w	r2, r4, #26
 8009e22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e24:	9306      	str	r3, [sp, #24]
 8009e26:	eba3 0309 	sub.w	r3, r3, r9
 8009e2a:	455b      	cmp	r3, fp
 8009e2c:	dc31      	bgt.n	8009e92 <_printf_float+0x36e>
 8009e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e30:	459a      	cmp	sl, r3
 8009e32:	dc3a      	bgt.n	8009eaa <_printf_float+0x386>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	07da      	lsls	r2, r3, #31
 8009e38:	d437      	bmi.n	8009eaa <_printf_float+0x386>
 8009e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3c:	ebaa 0903 	sub.w	r9, sl, r3
 8009e40:	9b06      	ldr	r3, [sp, #24]
 8009e42:	ebaa 0303 	sub.w	r3, sl, r3
 8009e46:	4599      	cmp	r9, r3
 8009e48:	bfa8      	it	ge
 8009e4a:	4699      	movge	r9, r3
 8009e4c:	f1b9 0f00 	cmp.w	r9, #0
 8009e50:	dc33      	bgt.n	8009eba <_printf_float+0x396>
 8009e52:	f04f 0800 	mov.w	r8, #0
 8009e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e5a:	f104 0b1a 	add.w	fp, r4, #26
 8009e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e60:	ebaa 0303 	sub.w	r3, sl, r3
 8009e64:	eba3 0309 	sub.w	r3, r3, r9
 8009e68:	4543      	cmp	r3, r8
 8009e6a:	f77f af79 	ble.w	8009d60 <_printf_float+0x23c>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	465a      	mov	r2, fp
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f43f aeae 	beq.w	8009bda <_printf_float+0xb6>
 8009e7e:	f108 0801 	add.w	r8, r8, #1
 8009e82:	e7ec      	b.n	8009e5e <_printf_float+0x33a>
 8009e84:	4642      	mov	r2, r8
 8009e86:	4631      	mov	r1, r6
 8009e88:	4628      	mov	r0, r5
 8009e8a:	47b8      	blx	r7
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d1c2      	bne.n	8009e16 <_printf_float+0x2f2>
 8009e90:	e6a3      	b.n	8009bda <_printf_float+0xb6>
 8009e92:	2301      	movs	r3, #1
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	9206      	str	r2, [sp, #24]
 8009e9a:	47b8      	blx	r7
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	f43f ae9c 	beq.w	8009bda <_printf_float+0xb6>
 8009ea2:	9a06      	ldr	r2, [sp, #24]
 8009ea4:	f10b 0b01 	add.w	fp, fp, #1
 8009ea8:	e7bb      	b.n	8009e22 <_printf_float+0x2fe>
 8009eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d1c0      	bne.n	8009e3a <_printf_float+0x316>
 8009eb8:	e68f      	b.n	8009bda <_printf_float+0xb6>
 8009eba:	9a06      	ldr	r2, [sp, #24]
 8009ebc:	464b      	mov	r3, r9
 8009ebe:	4442      	add	r2, r8
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d1c3      	bne.n	8009e52 <_printf_float+0x32e>
 8009eca:	e686      	b.n	8009bda <_printf_float+0xb6>
 8009ecc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ed0:	f1ba 0f01 	cmp.w	sl, #1
 8009ed4:	dc01      	bgt.n	8009eda <_printf_float+0x3b6>
 8009ed6:	07db      	lsls	r3, r3, #31
 8009ed8:	d536      	bpl.n	8009f48 <_printf_float+0x424>
 8009eda:	2301      	movs	r3, #1
 8009edc:	4642      	mov	r2, r8
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	f43f ae78 	beq.w	8009bda <_printf_float+0xb6>
 8009eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b8      	blx	r7
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	f43f ae70 	beq.w	8009bda <_printf_float+0xb6>
 8009efa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009efe:	2200      	movs	r2, #0
 8009f00:	2300      	movs	r3, #0
 8009f02:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009f06:	f7f6 fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f0a:	b9c0      	cbnz	r0, 8009f3e <_printf_float+0x41a>
 8009f0c:	4653      	mov	r3, sl
 8009f0e:	f108 0201 	add.w	r2, r8, #1
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d10c      	bne.n	8009f36 <_printf_float+0x412>
 8009f1c:	e65d      	b.n	8009bda <_printf_float+0xb6>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	465a      	mov	r2, fp
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	f43f ae56 	beq.w	8009bda <_printf_float+0xb6>
 8009f2e:	f108 0801 	add.w	r8, r8, #1
 8009f32:	45d0      	cmp	r8, sl
 8009f34:	dbf3      	blt.n	8009f1e <_printf_float+0x3fa>
 8009f36:	464b      	mov	r3, r9
 8009f38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f3c:	e6df      	b.n	8009cfe <_printf_float+0x1da>
 8009f3e:	f04f 0800 	mov.w	r8, #0
 8009f42:	f104 0b1a 	add.w	fp, r4, #26
 8009f46:	e7f4      	b.n	8009f32 <_printf_float+0x40e>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	4642      	mov	r2, r8
 8009f4c:	e7e1      	b.n	8009f12 <_printf_float+0x3ee>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	464a      	mov	r2, r9
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f ae3e 	beq.w	8009bda <_printf_float+0xb6>
 8009f5e:	f108 0801 	add.w	r8, r8, #1
 8009f62:	68e3      	ldr	r3, [r4, #12]
 8009f64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f66:	1a5b      	subs	r3, r3, r1
 8009f68:	4543      	cmp	r3, r8
 8009f6a:	dcf0      	bgt.n	8009f4e <_printf_float+0x42a>
 8009f6c:	e6fc      	b.n	8009d68 <_printf_float+0x244>
 8009f6e:	f04f 0800 	mov.w	r8, #0
 8009f72:	f104 0919 	add.w	r9, r4, #25
 8009f76:	e7f4      	b.n	8009f62 <_printf_float+0x43e>

08009f78 <_printf_common>:
 8009f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f7c:	4616      	mov	r6, r2
 8009f7e:	4698      	mov	r8, r3
 8009f80:	688a      	ldr	r2, [r1, #8]
 8009f82:	690b      	ldr	r3, [r1, #16]
 8009f84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	bfb8      	it	lt
 8009f8c:	4613      	movlt	r3, r2
 8009f8e:	6033      	str	r3, [r6, #0]
 8009f90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f94:	4607      	mov	r7, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	b10a      	cbz	r2, 8009f9e <_printf_common+0x26>
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	6033      	str	r3, [r6, #0]
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	0699      	lsls	r1, r3, #26
 8009fa2:	bf42      	ittt	mi
 8009fa4:	6833      	ldrmi	r3, [r6, #0]
 8009fa6:	3302      	addmi	r3, #2
 8009fa8:	6033      	strmi	r3, [r6, #0]
 8009faa:	6825      	ldr	r5, [r4, #0]
 8009fac:	f015 0506 	ands.w	r5, r5, #6
 8009fb0:	d106      	bne.n	8009fc0 <_printf_common+0x48>
 8009fb2:	f104 0a19 	add.w	sl, r4, #25
 8009fb6:	68e3      	ldr	r3, [r4, #12]
 8009fb8:	6832      	ldr	r2, [r6, #0]
 8009fba:	1a9b      	subs	r3, r3, r2
 8009fbc:	42ab      	cmp	r3, r5
 8009fbe:	dc26      	bgt.n	800a00e <_printf_common+0x96>
 8009fc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	3b00      	subs	r3, #0
 8009fc8:	bf18      	it	ne
 8009fca:	2301      	movne	r3, #1
 8009fcc:	0692      	lsls	r2, r2, #26
 8009fce:	d42b      	bmi.n	800a028 <_printf_common+0xb0>
 8009fd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fd4:	4641      	mov	r1, r8
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	47c8      	blx	r9
 8009fda:	3001      	adds	r0, #1
 8009fdc:	d01e      	beq.n	800a01c <_printf_common+0xa4>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	6922      	ldr	r2, [r4, #16]
 8009fe2:	f003 0306 	and.w	r3, r3, #6
 8009fe6:	2b04      	cmp	r3, #4
 8009fe8:	bf02      	ittt	eq
 8009fea:	68e5      	ldreq	r5, [r4, #12]
 8009fec:	6833      	ldreq	r3, [r6, #0]
 8009fee:	1aed      	subeq	r5, r5, r3
 8009ff0:	68a3      	ldr	r3, [r4, #8]
 8009ff2:	bf0c      	ite	eq
 8009ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ff8:	2500      	movne	r5, #0
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	bfc4      	itt	gt
 8009ffe:	1a9b      	subgt	r3, r3, r2
 800a000:	18ed      	addgt	r5, r5, r3
 800a002:	2600      	movs	r6, #0
 800a004:	341a      	adds	r4, #26
 800a006:	42b5      	cmp	r5, r6
 800a008:	d11a      	bne.n	800a040 <_printf_common+0xc8>
 800a00a:	2000      	movs	r0, #0
 800a00c:	e008      	b.n	800a020 <_printf_common+0xa8>
 800a00e:	2301      	movs	r3, #1
 800a010:	4652      	mov	r2, sl
 800a012:	4641      	mov	r1, r8
 800a014:	4638      	mov	r0, r7
 800a016:	47c8      	blx	r9
 800a018:	3001      	adds	r0, #1
 800a01a:	d103      	bne.n	800a024 <_printf_common+0xac>
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a024:	3501      	adds	r5, #1
 800a026:	e7c6      	b.n	8009fb6 <_printf_common+0x3e>
 800a028:	18e1      	adds	r1, r4, r3
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	2030      	movs	r0, #48	@ 0x30
 800a02e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a032:	4422      	add	r2, r4
 800a034:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a038:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a03c:	3302      	adds	r3, #2
 800a03e:	e7c7      	b.n	8009fd0 <_printf_common+0x58>
 800a040:	2301      	movs	r3, #1
 800a042:	4622      	mov	r2, r4
 800a044:	4641      	mov	r1, r8
 800a046:	4638      	mov	r0, r7
 800a048:	47c8      	blx	r9
 800a04a:	3001      	adds	r0, #1
 800a04c:	d0e6      	beq.n	800a01c <_printf_common+0xa4>
 800a04e:	3601      	adds	r6, #1
 800a050:	e7d9      	b.n	800a006 <_printf_common+0x8e>
	...

0800a054 <_printf_i>:
 800a054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a058:	7e0f      	ldrb	r7, [r1, #24]
 800a05a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a05c:	2f78      	cmp	r7, #120	@ 0x78
 800a05e:	4691      	mov	r9, r2
 800a060:	4680      	mov	r8, r0
 800a062:	460c      	mov	r4, r1
 800a064:	469a      	mov	sl, r3
 800a066:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a06a:	d807      	bhi.n	800a07c <_printf_i+0x28>
 800a06c:	2f62      	cmp	r7, #98	@ 0x62
 800a06e:	d80a      	bhi.n	800a086 <_printf_i+0x32>
 800a070:	2f00      	cmp	r7, #0
 800a072:	f000 80d2 	beq.w	800a21a <_printf_i+0x1c6>
 800a076:	2f58      	cmp	r7, #88	@ 0x58
 800a078:	f000 80b9 	beq.w	800a1ee <_printf_i+0x19a>
 800a07c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a080:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a084:	e03a      	b.n	800a0fc <_printf_i+0xa8>
 800a086:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a08a:	2b15      	cmp	r3, #21
 800a08c:	d8f6      	bhi.n	800a07c <_printf_i+0x28>
 800a08e:	a101      	add	r1, pc, #4	@ (adr r1, 800a094 <_printf_i+0x40>)
 800a090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a094:	0800a0ed 	.word	0x0800a0ed
 800a098:	0800a101 	.word	0x0800a101
 800a09c:	0800a07d 	.word	0x0800a07d
 800a0a0:	0800a07d 	.word	0x0800a07d
 800a0a4:	0800a07d 	.word	0x0800a07d
 800a0a8:	0800a07d 	.word	0x0800a07d
 800a0ac:	0800a101 	.word	0x0800a101
 800a0b0:	0800a07d 	.word	0x0800a07d
 800a0b4:	0800a07d 	.word	0x0800a07d
 800a0b8:	0800a07d 	.word	0x0800a07d
 800a0bc:	0800a07d 	.word	0x0800a07d
 800a0c0:	0800a201 	.word	0x0800a201
 800a0c4:	0800a12b 	.word	0x0800a12b
 800a0c8:	0800a1bb 	.word	0x0800a1bb
 800a0cc:	0800a07d 	.word	0x0800a07d
 800a0d0:	0800a07d 	.word	0x0800a07d
 800a0d4:	0800a223 	.word	0x0800a223
 800a0d8:	0800a07d 	.word	0x0800a07d
 800a0dc:	0800a12b 	.word	0x0800a12b
 800a0e0:	0800a07d 	.word	0x0800a07d
 800a0e4:	0800a07d 	.word	0x0800a07d
 800a0e8:	0800a1c3 	.word	0x0800a1c3
 800a0ec:	6833      	ldr	r3, [r6, #0]
 800a0ee:	1d1a      	adds	r2, r3, #4
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6032      	str	r2, [r6, #0]
 800a0f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e09d      	b.n	800a23c <_printf_i+0x1e8>
 800a100:	6833      	ldr	r3, [r6, #0]
 800a102:	6820      	ldr	r0, [r4, #0]
 800a104:	1d19      	adds	r1, r3, #4
 800a106:	6031      	str	r1, [r6, #0]
 800a108:	0606      	lsls	r6, r0, #24
 800a10a:	d501      	bpl.n	800a110 <_printf_i+0xbc>
 800a10c:	681d      	ldr	r5, [r3, #0]
 800a10e:	e003      	b.n	800a118 <_printf_i+0xc4>
 800a110:	0645      	lsls	r5, r0, #25
 800a112:	d5fb      	bpl.n	800a10c <_printf_i+0xb8>
 800a114:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a118:	2d00      	cmp	r5, #0
 800a11a:	da03      	bge.n	800a124 <_printf_i+0xd0>
 800a11c:	232d      	movs	r3, #45	@ 0x2d
 800a11e:	426d      	negs	r5, r5
 800a120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a124:	4859      	ldr	r0, [pc, #356]	@ (800a28c <_printf_i+0x238>)
 800a126:	230a      	movs	r3, #10
 800a128:	e011      	b.n	800a14e <_printf_i+0xfa>
 800a12a:	6821      	ldr	r1, [r4, #0]
 800a12c:	6833      	ldr	r3, [r6, #0]
 800a12e:	0608      	lsls	r0, r1, #24
 800a130:	f853 5b04 	ldr.w	r5, [r3], #4
 800a134:	d402      	bmi.n	800a13c <_printf_i+0xe8>
 800a136:	0649      	lsls	r1, r1, #25
 800a138:	bf48      	it	mi
 800a13a:	b2ad      	uxthmi	r5, r5
 800a13c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a13e:	4853      	ldr	r0, [pc, #332]	@ (800a28c <_printf_i+0x238>)
 800a140:	6033      	str	r3, [r6, #0]
 800a142:	bf14      	ite	ne
 800a144:	230a      	movne	r3, #10
 800a146:	2308      	moveq	r3, #8
 800a148:	2100      	movs	r1, #0
 800a14a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a14e:	6866      	ldr	r6, [r4, #4]
 800a150:	60a6      	str	r6, [r4, #8]
 800a152:	2e00      	cmp	r6, #0
 800a154:	bfa2      	ittt	ge
 800a156:	6821      	ldrge	r1, [r4, #0]
 800a158:	f021 0104 	bicge.w	r1, r1, #4
 800a15c:	6021      	strge	r1, [r4, #0]
 800a15e:	b90d      	cbnz	r5, 800a164 <_printf_i+0x110>
 800a160:	2e00      	cmp	r6, #0
 800a162:	d04b      	beq.n	800a1fc <_printf_i+0x1a8>
 800a164:	4616      	mov	r6, r2
 800a166:	fbb5 f1f3 	udiv	r1, r5, r3
 800a16a:	fb03 5711 	mls	r7, r3, r1, r5
 800a16e:	5dc7      	ldrb	r7, [r0, r7]
 800a170:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a174:	462f      	mov	r7, r5
 800a176:	42bb      	cmp	r3, r7
 800a178:	460d      	mov	r5, r1
 800a17a:	d9f4      	bls.n	800a166 <_printf_i+0x112>
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d10b      	bne.n	800a198 <_printf_i+0x144>
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	07df      	lsls	r7, r3, #31
 800a184:	d508      	bpl.n	800a198 <_printf_i+0x144>
 800a186:	6923      	ldr	r3, [r4, #16]
 800a188:	6861      	ldr	r1, [r4, #4]
 800a18a:	4299      	cmp	r1, r3
 800a18c:	bfde      	ittt	le
 800a18e:	2330      	movle	r3, #48	@ 0x30
 800a190:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a194:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a198:	1b92      	subs	r2, r2, r6
 800a19a:	6122      	str	r2, [r4, #16]
 800a19c:	f8cd a000 	str.w	sl, [sp]
 800a1a0:	464b      	mov	r3, r9
 800a1a2:	aa03      	add	r2, sp, #12
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	f7ff fee6 	bl	8009f78 <_printf_common>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d14a      	bne.n	800a246 <_printf_i+0x1f2>
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1b4:	b004      	add	sp, #16
 800a1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	f043 0320 	orr.w	r3, r3, #32
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	4833      	ldr	r0, [pc, #204]	@ (800a290 <_printf_i+0x23c>)
 800a1c4:	2778      	movs	r7, #120	@ 0x78
 800a1c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	6831      	ldr	r1, [r6, #0]
 800a1ce:	061f      	lsls	r7, r3, #24
 800a1d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1d4:	d402      	bmi.n	800a1dc <_printf_i+0x188>
 800a1d6:	065f      	lsls	r7, r3, #25
 800a1d8:	bf48      	it	mi
 800a1da:	b2ad      	uxthmi	r5, r5
 800a1dc:	6031      	str	r1, [r6, #0]
 800a1de:	07d9      	lsls	r1, r3, #31
 800a1e0:	bf44      	itt	mi
 800a1e2:	f043 0320 	orrmi.w	r3, r3, #32
 800a1e6:	6023      	strmi	r3, [r4, #0]
 800a1e8:	b11d      	cbz	r5, 800a1f2 <_printf_i+0x19e>
 800a1ea:	2310      	movs	r3, #16
 800a1ec:	e7ac      	b.n	800a148 <_printf_i+0xf4>
 800a1ee:	4827      	ldr	r0, [pc, #156]	@ (800a28c <_printf_i+0x238>)
 800a1f0:	e7e9      	b.n	800a1c6 <_printf_i+0x172>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	f023 0320 	bic.w	r3, r3, #32
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	e7f6      	b.n	800a1ea <_printf_i+0x196>
 800a1fc:	4616      	mov	r6, r2
 800a1fe:	e7bd      	b.n	800a17c <_printf_i+0x128>
 800a200:	6833      	ldr	r3, [r6, #0]
 800a202:	6825      	ldr	r5, [r4, #0]
 800a204:	6961      	ldr	r1, [r4, #20]
 800a206:	1d18      	adds	r0, r3, #4
 800a208:	6030      	str	r0, [r6, #0]
 800a20a:	062e      	lsls	r6, r5, #24
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	d501      	bpl.n	800a214 <_printf_i+0x1c0>
 800a210:	6019      	str	r1, [r3, #0]
 800a212:	e002      	b.n	800a21a <_printf_i+0x1c6>
 800a214:	0668      	lsls	r0, r5, #25
 800a216:	d5fb      	bpl.n	800a210 <_printf_i+0x1bc>
 800a218:	8019      	strh	r1, [r3, #0]
 800a21a:	2300      	movs	r3, #0
 800a21c:	6123      	str	r3, [r4, #16]
 800a21e:	4616      	mov	r6, r2
 800a220:	e7bc      	b.n	800a19c <_printf_i+0x148>
 800a222:	6833      	ldr	r3, [r6, #0]
 800a224:	1d1a      	adds	r2, r3, #4
 800a226:	6032      	str	r2, [r6, #0]
 800a228:	681e      	ldr	r6, [r3, #0]
 800a22a:	6862      	ldr	r2, [r4, #4]
 800a22c:	2100      	movs	r1, #0
 800a22e:	4630      	mov	r0, r6
 800a230:	f7f5 ffce 	bl	80001d0 <memchr>
 800a234:	b108      	cbz	r0, 800a23a <_printf_i+0x1e6>
 800a236:	1b80      	subs	r0, r0, r6
 800a238:	6060      	str	r0, [r4, #4]
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	2300      	movs	r3, #0
 800a240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a244:	e7aa      	b.n	800a19c <_printf_i+0x148>
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	4632      	mov	r2, r6
 800a24a:	4649      	mov	r1, r9
 800a24c:	4640      	mov	r0, r8
 800a24e:	47d0      	blx	sl
 800a250:	3001      	adds	r0, #1
 800a252:	d0ad      	beq.n	800a1b0 <_printf_i+0x15c>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	079b      	lsls	r3, r3, #30
 800a258:	d413      	bmi.n	800a282 <_printf_i+0x22e>
 800a25a:	68e0      	ldr	r0, [r4, #12]
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	4298      	cmp	r0, r3
 800a260:	bfb8      	it	lt
 800a262:	4618      	movlt	r0, r3
 800a264:	e7a6      	b.n	800a1b4 <_printf_i+0x160>
 800a266:	2301      	movs	r3, #1
 800a268:	4632      	mov	r2, r6
 800a26a:	4649      	mov	r1, r9
 800a26c:	4640      	mov	r0, r8
 800a26e:	47d0      	blx	sl
 800a270:	3001      	adds	r0, #1
 800a272:	d09d      	beq.n	800a1b0 <_printf_i+0x15c>
 800a274:	3501      	adds	r5, #1
 800a276:	68e3      	ldr	r3, [r4, #12]
 800a278:	9903      	ldr	r1, [sp, #12]
 800a27a:	1a5b      	subs	r3, r3, r1
 800a27c:	42ab      	cmp	r3, r5
 800a27e:	dcf2      	bgt.n	800a266 <_printf_i+0x212>
 800a280:	e7eb      	b.n	800a25a <_printf_i+0x206>
 800a282:	2500      	movs	r5, #0
 800a284:	f104 0619 	add.w	r6, r4, #25
 800a288:	e7f5      	b.n	800a276 <_printf_i+0x222>
 800a28a:	bf00      	nop
 800a28c:	0800d7f2 	.word	0x0800d7f2
 800a290:	0800d803 	.word	0x0800d803

0800a294 <std>:
 800a294:	2300      	movs	r3, #0
 800a296:	b510      	push	{r4, lr}
 800a298:	4604      	mov	r4, r0
 800a29a:	e9c0 3300 	strd	r3, r3, [r0]
 800a29e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2a2:	6083      	str	r3, [r0, #8]
 800a2a4:	8181      	strh	r1, [r0, #12]
 800a2a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2a8:	81c2      	strh	r2, [r0, #14]
 800a2aa:	6183      	str	r3, [r0, #24]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	2208      	movs	r2, #8
 800a2b0:	305c      	adds	r0, #92	@ 0x5c
 800a2b2:	f000 f928 	bl	800a506 <memset>
 800a2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2ec <std+0x58>)
 800a2b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f0 <std+0x5c>)
 800a2bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2be:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f4 <std+0x60>)
 800a2c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f8 <std+0x64>)
 800a2c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2fc <std+0x68>)
 800a2c8:	6224      	str	r4, [r4, #32]
 800a2ca:	429c      	cmp	r4, r3
 800a2cc:	d006      	beq.n	800a2dc <std+0x48>
 800a2ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2d2:	4294      	cmp	r4, r2
 800a2d4:	d002      	beq.n	800a2dc <std+0x48>
 800a2d6:	33d0      	adds	r3, #208	@ 0xd0
 800a2d8:	429c      	cmp	r4, r3
 800a2da:	d105      	bne.n	800a2e8 <std+0x54>
 800a2dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e4:	f000 b9e2 	b.w	800a6ac <__retarget_lock_init_recursive>
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	bf00      	nop
 800a2ec:	0800a481 	.word	0x0800a481
 800a2f0:	0800a4a3 	.word	0x0800a4a3
 800a2f4:	0800a4db 	.word	0x0800a4db
 800a2f8:	0800a4ff 	.word	0x0800a4ff
 800a2fc:	20004428 	.word	0x20004428

0800a300 <stdio_exit_handler>:
 800a300:	4a02      	ldr	r2, [pc, #8]	@ (800a30c <stdio_exit_handler+0xc>)
 800a302:	4903      	ldr	r1, [pc, #12]	@ (800a310 <stdio_exit_handler+0x10>)
 800a304:	4803      	ldr	r0, [pc, #12]	@ (800a314 <stdio_exit_handler+0x14>)
 800a306:	f000 b869 	b.w	800a3dc <_fwalk_sglue>
 800a30a:	bf00      	nop
 800a30c:	20000024 	.word	0x20000024
 800a310:	0800c025 	.word	0x0800c025
 800a314:	20000034 	.word	0x20000034

0800a318 <cleanup_stdio>:
 800a318:	6841      	ldr	r1, [r0, #4]
 800a31a:	4b0c      	ldr	r3, [pc, #48]	@ (800a34c <cleanup_stdio+0x34>)
 800a31c:	4299      	cmp	r1, r3
 800a31e:	b510      	push	{r4, lr}
 800a320:	4604      	mov	r4, r0
 800a322:	d001      	beq.n	800a328 <cleanup_stdio+0x10>
 800a324:	f001 fe7e 	bl	800c024 <_fflush_r>
 800a328:	68a1      	ldr	r1, [r4, #8]
 800a32a:	4b09      	ldr	r3, [pc, #36]	@ (800a350 <cleanup_stdio+0x38>)
 800a32c:	4299      	cmp	r1, r3
 800a32e:	d002      	beq.n	800a336 <cleanup_stdio+0x1e>
 800a330:	4620      	mov	r0, r4
 800a332:	f001 fe77 	bl	800c024 <_fflush_r>
 800a336:	68e1      	ldr	r1, [r4, #12]
 800a338:	4b06      	ldr	r3, [pc, #24]	@ (800a354 <cleanup_stdio+0x3c>)
 800a33a:	4299      	cmp	r1, r3
 800a33c:	d004      	beq.n	800a348 <cleanup_stdio+0x30>
 800a33e:	4620      	mov	r0, r4
 800a340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a344:	f001 be6e 	b.w	800c024 <_fflush_r>
 800a348:	bd10      	pop	{r4, pc}
 800a34a:	bf00      	nop
 800a34c:	20004428 	.word	0x20004428
 800a350:	20004490 	.word	0x20004490
 800a354:	200044f8 	.word	0x200044f8

0800a358 <global_stdio_init.part.0>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	4b0b      	ldr	r3, [pc, #44]	@ (800a388 <global_stdio_init.part.0+0x30>)
 800a35c:	4c0b      	ldr	r4, [pc, #44]	@ (800a38c <global_stdio_init.part.0+0x34>)
 800a35e:	4a0c      	ldr	r2, [pc, #48]	@ (800a390 <global_stdio_init.part.0+0x38>)
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	4620      	mov	r0, r4
 800a364:	2200      	movs	r2, #0
 800a366:	2104      	movs	r1, #4
 800a368:	f7ff ff94 	bl	800a294 <std>
 800a36c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a370:	2201      	movs	r2, #1
 800a372:	2109      	movs	r1, #9
 800a374:	f7ff ff8e 	bl	800a294 <std>
 800a378:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a37c:	2202      	movs	r2, #2
 800a37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a382:	2112      	movs	r1, #18
 800a384:	f7ff bf86 	b.w	800a294 <std>
 800a388:	20004560 	.word	0x20004560
 800a38c:	20004428 	.word	0x20004428
 800a390:	0800a301 	.word	0x0800a301

0800a394 <__sfp_lock_acquire>:
 800a394:	4801      	ldr	r0, [pc, #4]	@ (800a39c <__sfp_lock_acquire+0x8>)
 800a396:	f000 b98a 	b.w	800a6ae <__retarget_lock_acquire_recursive>
 800a39a:	bf00      	nop
 800a39c:	20004569 	.word	0x20004569

0800a3a0 <__sfp_lock_release>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	@ (800a3a8 <__sfp_lock_release+0x8>)
 800a3a2:	f000 b985 	b.w	800a6b0 <__retarget_lock_release_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	20004569 	.word	0x20004569

0800a3ac <__sinit>:
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	f7ff fff0 	bl	800a394 <__sfp_lock_acquire>
 800a3b4:	6a23      	ldr	r3, [r4, #32]
 800a3b6:	b11b      	cbz	r3, 800a3c0 <__sinit+0x14>
 800a3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3bc:	f7ff bff0 	b.w	800a3a0 <__sfp_lock_release>
 800a3c0:	4b04      	ldr	r3, [pc, #16]	@ (800a3d4 <__sinit+0x28>)
 800a3c2:	6223      	str	r3, [r4, #32]
 800a3c4:	4b04      	ldr	r3, [pc, #16]	@ (800a3d8 <__sinit+0x2c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1f5      	bne.n	800a3b8 <__sinit+0xc>
 800a3cc:	f7ff ffc4 	bl	800a358 <global_stdio_init.part.0>
 800a3d0:	e7f2      	b.n	800a3b8 <__sinit+0xc>
 800a3d2:	bf00      	nop
 800a3d4:	0800a319 	.word	0x0800a319
 800a3d8:	20004560 	.word	0x20004560

0800a3dc <_fwalk_sglue>:
 800a3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	4688      	mov	r8, r1
 800a3e4:	4614      	mov	r4, r2
 800a3e6:	2600      	movs	r6, #0
 800a3e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a3f0:	d505      	bpl.n	800a3fe <_fwalk_sglue+0x22>
 800a3f2:	6824      	ldr	r4, [r4, #0]
 800a3f4:	2c00      	cmp	r4, #0
 800a3f6:	d1f7      	bne.n	800a3e8 <_fwalk_sglue+0xc>
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d907      	bls.n	800a414 <_fwalk_sglue+0x38>
 800a404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a408:	3301      	adds	r3, #1
 800a40a:	d003      	beq.n	800a414 <_fwalk_sglue+0x38>
 800a40c:	4629      	mov	r1, r5
 800a40e:	4638      	mov	r0, r7
 800a410:	47c0      	blx	r8
 800a412:	4306      	orrs	r6, r0
 800a414:	3568      	adds	r5, #104	@ 0x68
 800a416:	e7e9      	b.n	800a3ec <_fwalk_sglue+0x10>

0800a418 <sniprintf>:
 800a418:	b40c      	push	{r2, r3}
 800a41a:	b530      	push	{r4, r5, lr}
 800a41c:	4b17      	ldr	r3, [pc, #92]	@ (800a47c <sniprintf+0x64>)
 800a41e:	1e0c      	subs	r4, r1, #0
 800a420:	681d      	ldr	r5, [r3, #0]
 800a422:	b09d      	sub	sp, #116	@ 0x74
 800a424:	da08      	bge.n	800a438 <sniprintf+0x20>
 800a426:	238b      	movs	r3, #139	@ 0x8b
 800a428:	602b      	str	r3, [r5, #0]
 800a42a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a42e:	b01d      	add	sp, #116	@ 0x74
 800a430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a434:	b002      	add	sp, #8
 800a436:	4770      	bx	lr
 800a438:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a43c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a440:	bf14      	ite	ne
 800a442:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a446:	4623      	moveq	r3, r4
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	9307      	str	r3, [sp, #28]
 800a44c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a450:	9002      	str	r0, [sp, #8]
 800a452:	9006      	str	r0, [sp, #24]
 800a454:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a458:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a45a:	ab21      	add	r3, sp, #132	@ 0x84
 800a45c:	a902      	add	r1, sp, #8
 800a45e:	4628      	mov	r0, r5
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	f001 fc5f 	bl	800bd24 <_svfiprintf_r>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	bfbc      	itt	lt
 800a46a:	238b      	movlt	r3, #139	@ 0x8b
 800a46c:	602b      	strlt	r3, [r5, #0]
 800a46e:	2c00      	cmp	r4, #0
 800a470:	d0dd      	beq.n	800a42e <sniprintf+0x16>
 800a472:	9b02      	ldr	r3, [sp, #8]
 800a474:	2200      	movs	r2, #0
 800a476:	701a      	strb	r2, [r3, #0]
 800a478:	e7d9      	b.n	800a42e <sniprintf+0x16>
 800a47a:	bf00      	nop
 800a47c:	20000030 	.word	0x20000030

0800a480 <__sread>:
 800a480:	b510      	push	{r4, lr}
 800a482:	460c      	mov	r4, r1
 800a484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a488:	f000 f8c2 	bl	800a610 <_read_r>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	bfab      	itete	ge
 800a490:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a492:	89a3      	ldrhlt	r3, [r4, #12]
 800a494:	181b      	addge	r3, r3, r0
 800a496:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a49a:	bfac      	ite	ge
 800a49c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a49e:	81a3      	strhlt	r3, [r4, #12]
 800a4a0:	bd10      	pop	{r4, pc}

0800a4a2 <__swrite>:
 800a4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a6:	461f      	mov	r7, r3
 800a4a8:	898b      	ldrh	r3, [r1, #12]
 800a4aa:	05db      	lsls	r3, r3, #23
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	d505      	bpl.n	800a4c0 <__swrite+0x1e>
 800a4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f000 f896 	bl	800a5ec <_lseek_r>
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4ca:	81a3      	strh	r3, [r4, #12]
 800a4cc:	4632      	mov	r2, r6
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d6:	f000 b8ad 	b.w	800a634 <_write_r>

0800a4da <__sseek>:
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	460c      	mov	r4, r1
 800a4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e2:	f000 f883 	bl	800a5ec <_lseek_r>
 800a4e6:	1c43      	adds	r3, r0, #1
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	bf15      	itete	ne
 800a4ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4f6:	81a3      	strheq	r3, [r4, #12]
 800a4f8:	bf18      	it	ne
 800a4fa:	81a3      	strhne	r3, [r4, #12]
 800a4fc:	bd10      	pop	{r4, pc}

0800a4fe <__sclose>:
 800a4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a502:	f000 b80d 	b.w	800a520 <_close_r>

0800a506 <memset>:
 800a506:	4402      	add	r2, r0
 800a508:	4603      	mov	r3, r0
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d100      	bne.n	800a510 <memset+0xa>
 800a50e:	4770      	bx	lr
 800a510:	f803 1b01 	strb.w	r1, [r3], #1
 800a514:	e7f9      	b.n	800a50a <memset+0x4>
	...

0800a518 <_localeconv_r>:
 800a518:	4800      	ldr	r0, [pc, #0]	@ (800a51c <_localeconv_r+0x4>)
 800a51a:	4770      	bx	lr
 800a51c:	20000170 	.word	0x20000170

0800a520 <_close_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d06      	ldr	r5, [pc, #24]	@ (800a53c <_close_r+0x1c>)
 800a524:	2300      	movs	r3, #0
 800a526:	4604      	mov	r4, r0
 800a528:	4608      	mov	r0, r1
 800a52a:	602b      	str	r3, [r5, #0]
 800a52c:	f7f9 fde8 	bl	8004100 <_close>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	d102      	bne.n	800a53a <_close_r+0x1a>
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	b103      	cbz	r3, 800a53a <_close_r+0x1a>
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	20004564 	.word	0x20004564

0800a540 <_reclaim_reent>:
 800a540:	4b29      	ldr	r3, [pc, #164]	@ (800a5e8 <_reclaim_reent+0xa8>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4283      	cmp	r3, r0
 800a546:	b570      	push	{r4, r5, r6, lr}
 800a548:	4604      	mov	r4, r0
 800a54a:	d04b      	beq.n	800a5e4 <_reclaim_reent+0xa4>
 800a54c:	69c3      	ldr	r3, [r0, #28]
 800a54e:	b1ab      	cbz	r3, 800a57c <_reclaim_reent+0x3c>
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	b16b      	cbz	r3, 800a570 <_reclaim_reent+0x30>
 800a554:	2500      	movs	r5, #0
 800a556:	69e3      	ldr	r3, [r4, #28]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	5959      	ldr	r1, [r3, r5]
 800a55c:	2900      	cmp	r1, #0
 800a55e:	d13b      	bne.n	800a5d8 <_reclaim_reent+0x98>
 800a560:	3504      	adds	r5, #4
 800a562:	2d80      	cmp	r5, #128	@ 0x80
 800a564:	d1f7      	bne.n	800a556 <_reclaim_reent+0x16>
 800a566:	69e3      	ldr	r3, [r4, #28]
 800a568:	4620      	mov	r0, r4
 800a56a:	68d9      	ldr	r1, [r3, #12]
 800a56c:	f000 fefc 	bl	800b368 <_free_r>
 800a570:	69e3      	ldr	r3, [r4, #28]
 800a572:	6819      	ldr	r1, [r3, #0]
 800a574:	b111      	cbz	r1, 800a57c <_reclaim_reent+0x3c>
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fef6 	bl	800b368 <_free_r>
 800a57c:	6961      	ldr	r1, [r4, #20]
 800a57e:	b111      	cbz	r1, 800a586 <_reclaim_reent+0x46>
 800a580:	4620      	mov	r0, r4
 800a582:	f000 fef1 	bl	800b368 <_free_r>
 800a586:	69e1      	ldr	r1, [r4, #28]
 800a588:	b111      	cbz	r1, 800a590 <_reclaim_reent+0x50>
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 feec 	bl	800b368 <_free_r>
 800a590:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a592:	b111      	cbz	r1, 800a59a <_reclaim_reent+0x5a>
 800a594:	4620      	mov	r0, r4
 800a596:	f000 fee7 	bl	800b368 <_free_r>
 800a59a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a59c:	b111      	cbz	r1, 800a5a4 <_reclaim_reent+0x64>
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f000 fee2 	bl	800b368 <_free_r>
 800a5a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a5a6:	b111      	cbz	r1, 800a5ae <_reclaim_reent+0x6e>
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 fedd 	bl	800b368 <_free_r>
 800a5ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a5b0:	b111      	cbz	r1, 800a5b8 <_reclaim_reent+0x78>
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 fed8 	bl	800b368 <_free_r>
 800a5b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a5ba:	b111      	cbz	r1, 800a5c2 <_reclaim_reent+0x82>
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f000 fed3 	bl	800b368 <_free_r>
 800a5c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a5c4:	b111      	cbz	r1, 800a5cc <_reclaim_reent+0x8c>
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 fece 	bl	800b368 <_free_r>
 800a5cc:	6a23      	ldr	r3, [r4, #32]
 800a5ce:	b14b      	cbz	r3, 800a5e4 <_reclaim_reent+0xa4>
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a5d6:	4718      	bx	r3
 800a5d8:	680e      	ldr	r6, [r1, #0]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 fec4 	bl	800b368 <_free_r>
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	e7bb      	b.n	800a55c <_reclaim_reent+0x1c>
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000030 	.word	0x20000030

0800a5ec <_lseek_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d07      	ldr	r5, [pc, #28]	@ (800a60c <_lseek_r+0x20>)
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	4608      	mov	r0, r1
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	602a      	str	r2, [r5, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f7f9 fda7 	bl	800414e <_lseek>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_lseek_r+0x1e>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	b103      	cbz	r3, 800a60a <_lseek_r+0x1e>
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20004564 	.word	0x20004564

0800a610 <_read_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d07      	ldr	r5, [pc, #28]	@ (800a630 <_read_r+0x20>)
 800a614:	4604      	mov	r4, r0
 800a616:	4608      	mov	r0, r1
 800a618:	4611      	mov	r1, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	f7f9 fd35 	bl	800408e <_read>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_read_r+0x1e>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_read_r+0x1e>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	20004564 	.word	0x20004564

0800a634 <_write_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4d07      	ldr	r5, [pc, #28]	@ (800a654 <_write_r+0x20>)
 800a638:	4604      	mov	r4, r0
 800a63a:	4608      	mov	r0, r1
 800a63c:	4611      	mov	r1, r2
 800a63e:	2200      	movs	r2, #0
 800a640:	602a      	str	r2, [r5, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	f7f9 fd40 	bl	80040c8 <_write>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_write_r+0x1e>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_write_r+0x1e>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	20004564 	.word	0x20004564

0800a658 <__errno>:
 800a658:	4b01      	ldr	r3, [pc, #4]	@ (800a660 <__errno+0x8>)
 800a65a:	6818      	ldr	r0, [r3, #0]
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	20000030 	.word	0x20000030

0800a664 <__libc_init_array>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	4d0d      	ldr	r5, [pc, #52]	@ (800a69c <__libc_init_array+0x38>)
 800a668:	4c0d      	ldr	r4, [pc, #52]	@ (800a6a0 <__libc_init_array+0x3c>)
 800a66a:	1b64      	subs	r4, r4, r5
 800a66c:	10a4      	asrs	r4, r4, #2
 800a66e:	2600      	movs	r6, #0
 800a670:	42a6      	cmp	r6, r4
 800a672:	d109      	bne.n	800a688 <__libc_init_array+0x24>
 800a674:	4d0b      	ldr	r5, [pc, #44]	@ (800a6a4 <__libc_init_array+0x40>)
 800a676:	4c0c      	ldr	r4, [pc, #48]	@ (800a6a8 <__libc_init_array+0x44>)
 800a678:	f002 ffc4 	bl	800d604 <_init>
 800a67c:	1b64      	subs	r4, r4, r5
 800a67e:	10a4      	asrs	r4, r4, #2
 800a680:	2600      	movs	r6, #0
 800a682:	42a6      	cmp	r6, r4
 800a684:	d105      	bne.n	800a692 <__libc_init_array+0x2e>
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	f855 3b04 	ldr.w	r3, [r5], #4
 800a68c:	4798      	blx	r3
 800a68e:	3601      	adds	r6, #1
 800a690:	e7ee      	b.n	800a670 <__libc_init_array+0xc>
 800a692:	f855 3b04 	ldr.w	r3, [r5], #4
 800a696:	4798      	blx	r3
 800a698:	3601      	adds	r6, #1
 800a69a:	e7f2      	b.n	800a682 <__libc_init_array+0x1e>
 800a69c:	0800db88 	.word	0x0800db88
 800a6a0:	0800db88 	.word	0x0800db88
 800a6a4:	0800db88 	.word	0x0800db88
 800a6a8:	0800db8c 	.word	0x0800db8c

0800a6ac <__retarget_lock_init_recursive>:
 800a6ac:	4770      	bx	lr

0800a6ae <__retarget_lock_acquire_recursive>:
 800a6ae:	4770      	bx	lr

0800a6b0 <__retarget_lock_release_recursive>:
 800a6b0:	4770      	bx	lr

0800a6b2 <memcpy>:
 800a6b2:	440a      	add	r2, r1
 800a6b4:	4291      	cmp	r1, r2
 800a6b6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a6ba:	d100      	bne.n	800a6be <memcpy+0xc>
 800a6bc:	4770      	bx	lr
 800a6be:	b510      	push	{r4, lr}
 800a6c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6c8:	4291      	cmp	r1, r2
 800a6ca:	d1f9      	bne.n	800a6c0 <memcpy+0xe>
 800a6cc:	bd10      	pop	{r4, pc}

0800a6ce <quorem>:
 800a6ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d2:	6903      	ldr	r3, [r0, #16]
 800a6d4:	690c      	ldr	r4, [r1, #16]
 800a6d6:	42a3      	cmp	r3, r4
 800a6d8:	4607      	mov	r7, r0
 800a6da:	db7e      	blt.n	800a7da <quorem+0x10c>
 800a6dc:	3c01      	subs	r4, #1
 800a6de:	f101 0814 	add.w	r8, r1, #20
 800a6e2:	00a3      	lsls	r3, r4, #2
 800a6e4:	f100 0514 	add.w	r5, r0, #20
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a700:	fbb2 f6f3 	udiv	r6, r2, r3
 800a704:	d32e      	bcc.n	800a764 <quorem+0x96>
 800a706:	f04f 0a00 	mov.w	sl, #0
 800a70a:	46c4      	mov	ip, r8
 800a70c:	46ae      	mov	lr, r5
 800a70e:	46d3      	mov	fp, sl
 800a710:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a714:	b298      	uxth	r0, r3
 800a716:	fb06 a000 	mla	r0, r6, r0, sl
 800a71a:	0c02      	lsrs	r2, r0, #16
 800a71c:	0c1b      	lsrs	r3, r3, #16
 800a71e:	fb06 2303 	mla	r3, r6, r3, r2
 800a722:	f8de 2000 	ldr.w	r2, [lr]
 800a726:	b280      	uxth	r0, r0
 800a728:	b292      	uxth	r2, r2
 800a72a:	1a12      	subs	r2, r2, r0
 800a72c:	445a      	add	r2, fp
 800a72e:	f8de 0000 	ldr.w	r0, [lr]
 800a732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a736:	b29b      	uxth	r3, r3
 800a738:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a73c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a740:	b292      	uxth	r2, r2
 800a742:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a746:	45e1      	cmp	r9, ip
 800a748:	f84e 2b04 	str.w	r2, [lr], #4
 800a74c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a750:	d2de      	bcs.n	800a710 <quorem+0x42>
 800a752:	9b00      	ldr	r3, [sp, #0]
 800a754:	58eb      	ldr	r3, [r5, r3]
 800a756:	b92b      	cbnz	r3, 800a764 <quorem+0x96>
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	3b04      	subs	r3, #4
 800a75c:	429d      	cmp	r5, r3
 800a75e:	461a      	mov	r2, r3
 800a760:	d32f      	bcc.n	800a7c2 <quorem+0xf4>
 800a762:	613c      	str	r4, [r7, #16]
 800a764:	4638      	mov	r0, r7
 800a766:	f001 f979 	bl	800ba5c <__mcmp>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	db25      	blt.n	800a7ba <quorem+0xec>
 800a76e:	4629      	mov	r1, r5
 800a770:	2000      	movs	r0, #0
 800a772:	f858 2b04 	ldr.w	r2, [r8], #4
 800a776:	f8d1 c000 	ldr.w	ip, [r1]
 800a77a:	fa1f fe82 	uxth.w	lr, r2
 800a77e:	fa1f f38c 	uxth.w	r3, ip
 800a782:	eba3 030e 	sub.w	r3, r3, lr
 800a786:	4403      	add	r3, r0
 800a788:	0c12      	lsrs	r2, r2, #16
 800a78a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a78e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a792:	b29b      	uxth	r3, r3
 800a794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a798:	45c1      	cmp	r9, r8
 800a79a:	f841 3b04 	str.w	r3, [r1], #4
 800a79e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7a2:	d2e6      	bcs.n	800a772 <quorem+0xa4>
 800a7a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ac:	b922      	cbnz	r2, 800a7b8 <quorem+0xea>
 800a7ae:	3b04      	subs	r3, #4
 800a7b0:	429d      	cmp	r5, r3
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	d30b      	bcc.n	800a7ce <quorem+0x100>
 800a7b6:	613c      	str	r4, [r7, #16]
 800a7b8:	3601      	adds	r6, #1
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	b003      	add	sp, #12
 800a7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c2:	6812      	ldr	r2, [r2, #0]
 800a7c4:	3b04      	subs	r3, #4
 800a7c6:	2a00      	cmp	r2, #0
 800a7c8:	d1cb      	bne.n	800a762 <quorem+0x94>
 800a7ca:	3c01      	subs	r4, #1
 800a7cc:	e7c6      	b.n	800a75c <quorem+0x8e>
 800a7ce:	6812      	ldr	r2, [r2, #0]
 800a7d0:	3b04      	subs	r3, #4
 800a7d2:	2a00      	cmp	r2, #0
 800a7d4:	d1ef      	bne.n	800a7b6 <quorem+0xe8>
 800a7d6:	3c01      	subs	r4, #1
 800a7d8:	e7ea      	b.n	800a7b0 <quorem+0xe2>
 800a7da:	2000      	movs	r0, #0
 800a7dc:	e7ee      	b.n	800a7bc <quorem+0xee>
	...

0800a7e0 <_dtoa_r>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	69c7      	ldr	r7, [r0, #28]
 800a7e6:	b099      	sub	sp, #100	@ 0x64
 800a7e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7ec:	ec55 4b10 	vmov	r4, r5, d0
 800a7f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a7f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a7f4:	4683      	mov	fp, r0
 800a7f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7fa:	b97f      	cbnz	r7, 800a81c <_dtoa_r+0x3c>
 800a7fc:	2010      	movs	r0, #16
 800a7fe:	f000 fdfd 	bl	800b3fc <malloc>
 800a802:	4602      	mov	r2, r0
 800a804:	f8cb 001c 	str.w	r0, [fp, #28]
 800a808:	b920      	cbnz	r0, 800a814 <_dtoa_r+0x34>
 800a80a:	4ba7      	ldr	r3, [pc, #668]	@ (800aaa8 <_dtoa_r+0x2c8>)
 800a80c:	21ef      	movs	r1, #239	@ 0xef
 800a80e:	48a7      	ldr	r0, [pc, #668]	@ (800aaac <_dtoa_r+0x2cc>)
 800a810:	f001 fc5a 	bl	800c0c8 <__assert_func>
 800a814:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a818:	6007      	str	r7, [r0, #0]
 800a81a:	60c7      	str	r7, [r0, #12]
 800a81c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a820:	6819      	ldr	r1, [r3, #0]
 800a822:	b159      	cbz	r1, 800a83c <_dtoa_r+0x5c>
 800a824:	685a      	ldr	r2, [r3, #4]
 800a826:	604a      	str	r2, [r1, #4]
 800a828:	2301      	movs	r3, #1
 800a82a:	4093      	lsls	r3, r2
 800a82c:	608b      	str	r3, [r1, #8]
 800a82e:	4658      	mov	r0, fp
 800a830:	f000 feda 	bl	800b5e8 <_Bfree>
 800a834:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
 800a83c:	1e2b      	subs	r3, r5, #0
 800a83e:	bfb9      	ittee	lt
 800a840:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a844:	9303      	strlt	r3, [sp, #12]
 800a846:	2300      	movge	r3, #0
 800a848:	6033      	strge	r3, [r6, #0]
 800a84a:	9f03      	ldr	r7, [sp, #12]
 800a84c:	4b98      	ldr	r3, [pc, #608]	@ (800aab0 <_dtoa_r+0x2d0>)
 800a84e:	bfbc      	itt	lt
 800a850:	2201      	movlt	r2, #1
 800a852:	6032      	strlt	r2, [r6, #0]
 800a854:	43bb      	bics	r3, r7
 800a856:	d112      	bne.n	800a87e <_dtoa_r+0x9e>
 800a858:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a85a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a864:	4323      	orrs	r3, r4
 800a866:	f000 854d 	beq.w	800b304 <_dtoa_r+0xb24>
 800a86a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a86c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aac4 <_dtoa_r+0x2e4>
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 854f 	beq.w	800b314 <_dtoa_r+0xb34>
 800a876:	f10a 0303 	add.w	r3, sl, #3
 800a87a:	f000 bd49 	b.w	800b310 <_dtoa_r+0xb30>
 800a87e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a882:	2200      	movs	r2, #0
 800a884:	ec51 0b17 	vmov	r0, r1, d7
 800a888:	2300      	movs	r3, #0
 800a88a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a88e:	f7f6 f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a892:	4680      	mov	r8, r0
 800a894:	b158      	cbz	r0, 800a8ae <_dtoa_r+0xce>
 800a896:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a898:	2301      	movs	r3, #1
 800a89a:	6013      	str	r3, [r2, #0]
 800a89c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a89e:	b113      	cbz	r3, 800a8a6 <_dtoa_r+0xc6>
 800a8a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a8a2:	4b84      	ldr	r3, [pc, #528]	@ (800aab4 <_dtoa_r+0x2d4>)
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aac8 <_dtoa_r+0x2e8>
 800a8aa:	f000 bd33 	b.w	800b314 <_dtoa_r+0xb34>
 800a8ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a8b2:	aa16      	add	r2, sp, #88	@ 0x58
 800a8b4:	a917      	add	r1, sp, #92	@ 0x5c
 800a8b6:	4658      	mov	r0, fp
 800a8b8:	f001 f980 	bl	800bbbc <__d2b>
 800a8bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a8c0:	4681      	mov	r9, r0
 800a8c2:	2e00      	cmp	r6, #0
 800a8c4:	d077      	beq.n	800a9b6 <_dtoa_r+0x1d6>
 800a8c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a8cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a8d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a8dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	4b74      	ldr	r3, [pc, #464]	@ (800aab8 <_dtoa_r+0x2d8>)
 800a8e6:	f7f5 fccf 	bl	8000288 <__aeabi_dsub>
 800a8ea:	a369      	add	r3, pc, #420	@ (adr r3, 800aa90 <_dtoa_r+0x2b0>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f7f5 fe82 	bl	80005f8 <__aeabi_dmul>
 800a8f4:	a368      	add	r3, pc, #416	@ (adr r3, 800aa98 <_dtoa_r+0x2b8>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fcc7 	bl	800028c <__adddf3>
 800a8fe:	4604      	mov	r4, r0
 800a900:	4630      	mov	r0, r6
 800a902:	460d      	mov	r5, r1
 800a904:	f7f5 fe0e 	bl	8000524 <__aeabi_i2d>
 800a908:	a365      	add	r3, pc, #404	@ (adr r3, 800aaa0 <_dtoa_r+0x2c0>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f7f5 fe73 	bl	80005f8 <__aeabi_dmul>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4620      	mov	r0, r4
 800a918:	4629      	mov	r1, r5
 800a91a:	f7f5 fcb7 	bl	800028c <__adddf3>
 800a91e:	4604      	mov	r4, r0
 800a920:	460d      	mov	r5, r1
 800a922:	f7f6 f919 	bl	8000b58 <__aeabi_d2iz>
 800a926:	2200      	movs	r2, #0
 800a928:	4607      	mov	r7, r0
 800a92a:	2300      	movs	r3, #0
 800a92c:	4620      	mov	r0, r4
 800a92e:	4629      	mov	r1, r5
 800a930:	f7f6 f8d4 	bl	8000adc <__aeabi_dcmplt>
 800a934:	b140      	cbz	r0, 800a948 <_dtoa_r+0x168>
 800a936:	4638      	mov	r0, r7
 800a938:	f7f5 fdf4 	bl	8000524 <__aeabi_i2d>
 800a93c:	4622      	mov	r2, r4
 800a93e:	462b      	mov	r3, r5
 800a940:	f7f6 f8c2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a944:	b900      	cbnz	r0, 800a948 <_dtoa_r+0x168>
 800a946:	3f01      	subs	r7, #1
 800a948:	2f16      	cmp	r7, #22
 800a94a:	d851      	bhi.n	800a9f0 <_dtoa_r+0x210>
 800a94c:	4b5b      	ldr	r3, [pc, #364]	@ (800aabc <_dtoa_r+0x2dc>)
 800a94e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a95a:	f7f6 f8bf 	bl	8000adc <__aeabi_dcmplt>
 800a95e:	2800      	cmp	r0, #0
 800a960:	d048      	beq.n	800a9f4 <_dtoa_r+0x214>
 800a962:	3f01      	subs	r7, #1
 800a964:	2300      	movs	r3, #0
 800a966:	9312      	str	r3, [sp, #72]	@ 0x48
 800a968:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a96a:	1b9b      	subs	r3, r3, r6
 800a96c:	1e5a      	subs	r2, r3, #1
 800a96e:	bf44      	itt	mi
 800a970:	f1c3 0801 	rsbmi	r8, r3, #1
 800a974:	2300      	movmi	r3, #0
 800a976:	9208      	str	r2, [sp, #32]
 800a978:	bf54      	ite	pl
 800a97a:	f04f 0800 	movpl.w	r8, #0
 800a97e:	9308      	strmi	r3, [sp, #32]
 800a980:	2f00      	cmp	r7, #0
 800a982:	db39      	blt.n	800a9f8 <_dtoa_r+0x218>
 800a984:	9b08      	ldr	r3, [sp, #32]
 800a986:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a988:	443b      	add	r3, r7
 800a98a:	9308      	str	r3, [sp, #32]
 800a98c:	2300      	movs	r3, #0
 800a98e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a992:	2b09      	cmp	r3, #9
 800a994:	d864      	bhi.n	800aa60 <_dtoa_r+0x280>
 800a996:	2b05      	cmp	r3, #5
 800a998:	bfc4      	itt	gt
 800a99a:	3b04      	subgt	r3, #4
 800a99c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a0:	f1a3 0302 	sub.w	r3, r3, #2
 800a9a4:	bfcc      	ite	gt
 800a9a6:	2400      	movgt	r4, #0
 800a9a8:	2401      	movle	r4, #1
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	d863      	bhi.n	800aa76 <_dtoa_r+0x296>
 800a9ae:	e8df f003 	tbb	[pc, r3]
 800a9b2:	372a      	.short	0x372a
 800a9b4:	5535      	.short	0x5535
 800a9b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a9ba:	441e      	add	r6, r3
 800a9bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a9c0:	2b20      	cmp	r3, #32
 800a9c2:	bfc1      	itttt	gt
 800a9c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a9c8:	409f      	lslgt	r7, r3
 800a9ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a9ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a9d2:	bfd6      	itet	le
 800a9d4:	f1c3 0320 	rsble	r3, r3, #32
 800a9d8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a9dc:	fa04 f003 	lslle.w	r0, r4, r3
 800a9e0:	f7f5 fd90 	bl	8000504 <__aeabi_ui2d>
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a9ea:	3e01      	subs	r6, #1
 800a9ec:	9214      	str	r2, [sp, #80]	@ 0x50
 800a9ee:	e777      	b.n	800a8e0 <_dtoa_r+0x100>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e7b8      	b.n	800a966 <_dtoa_r+0x186>
 800a9f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a9f6:	e7b7      	b.n	800a968 <_dtoa_r+0x188>
 800a9f8:	427b      	negs	r3, r7
 800a9fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	eba8 0807 	sub.w	r8, r8, r7
 800aa02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa04:	e7c4      	b.n	800a990 <_dtoa_r+0x1b0>
 800aa06:	2300      	movs	r3, #0
 800aa08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dc35      	bgt.n	800aa7c <_dtoa_r+0x29c>
 800aa10:	2301      	movs	r3, #1
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	9307      	str	r3, [sp, #28]
 800aa16:	461a      	mov	r2, r3
 800aa18:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa1a:	e00b      	b.n	800aa34 <_dtoa_r+0x254>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e7f3      	b.n	800aa08 <_dtoa_r+0x228>
 800aa20:	2300      	movs	r3, #0
 800aa22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa26:	18fb      	adds	r3, r7, r3
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	9307      	str	r3, [sp, #28]
 800aa30:	bfb8      	it	lt
 800aa32:	2301      	movlt	r3, #1
 800aa34:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aa38:	2100      	movs	r1, #0
 800aa3a:	2204      	movs	r2, #4
 800aa3c:	f102 0514 	add.w	r5, r2, #20
 800aa40:	429d      	cmp	r5, r3
 800aa42:	d91f      	bls.n	800aa84 <_dtoa_r+0x2a4>
 800aa44:	6041      	str	r1, [r0, #4]
 800aa46:	4658      	mov	r0, fp
 800aa48:	f000 fd8e 	bl	800b568 <_Balloc>
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d13c      	bne.n	800aacc <_dtoa_r+0x2ec>
 800aa52:	4b1b      	ldr	r3, [pc, #108]	@ (800aac0 <_dtoa_r+0x2e0>)
 800aa54:	4602      	mov	r2, r0
 800aa56:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa5a:	e6d8      	b.n	800a80e <_dtoa_r+0x2e>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e7e0      	b.n	800aa22 <_dtoa_r+0x242>
 800aa60:	2401      	movs	r4, #1
 800aa62:	2300      	movs	r3, #0
 800aa64:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	9307      	str	r3, [sp, #28]
 800aa70:	2200      	movs	r2, #0
 800aa72:	2312      	movs	r3, #18
 800aa74:	e7d0      	b.n	800aa18 <_dtoa_r+0x238>
 800aa76:	2301      	movs	r3, #1
 800aa78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa7a:	e7f5      	b.n	800aa68 <_dtoa_r+0x288>
 800aa7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	9307      	str	r3, [sp, #28]
 800aa82:	e7d7      	b.n	800aa34 <_dtoa_r+0x254>
 800aa84:	3101      	adds	r1, #1
 800aa86:	0052      	lsls	r2, r2, #1
 800aa88:	e7d8      	b.n	800aa3c <_dtoa_r+0x25c>
 800aa8a:	bf00      	nop
 800aa8c:	f3af 8000 	nop.w
 800aa90:	636f4361 	.word	0x636f4361
 800aa94:	3fd287a7 	.word	0x3fd287a7
 800aa98:	8b60c8b3 	.word	0x8b60c8b3
 800aa9c:	3fc68a28 	.word	0x3fc68a28
 800aaa0:	509f79fb 	.word	0x509f79fb
 800aaa4:	3fd34413 	.word	0x3fd34413
 800aaa8:	0800d821 	.word	0x0800d821
 800aaac:	0800d838 	.word	0x0800d838
 800aab0:	7ff00000 	.word	0x7ff00000
 800aab4:	0800d7f1 	.word	0x0800d7f1
 800aab8:	3ff80000 	.word	0x3ff80000
 800aabc:	0800d930 	.word	0x0800d930
 800aac0:	0800d890 	.word	0x0800d890
 800aac4:	0800d81d 	.word	0x0800d81d
 800aac8:	0800d7f0 	.word	0x0800d7f0
 800aacc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aad0:	6018      	str	r0, [r3, #0]
 800aad2:	9b07      	ldr	r3, [sp, #28]
 800aad4:	2b0e      	cmp	r3, #14
 800aad6:	f200 80a4 	bhi.w	800ac22 <_dtoa_r+0x442>
 800aada:	2c00      	cmp	r4, #0
 800aadc:	f000 80a1 	beq.w	800ac22 <_dtoa_r+0x442>
 800aae0:	2f00      	cmp	r7, #0
 800aae2:	dd33      	ble.n	800ab4c <_dtoa_r+0x36c>
 800aae4:	4bad      	ldr	r3, [pc, #692]	@ (800ad9c <_dtoa_r+0x5bc>)
 800aae6:	f007 020f 	and.w	r2, r7, #15
 800aaea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaee:	ed93 7b00 	vldr	d7, [r3]
 800aaf2:	05f8      	lsls	r0, r7, #23
 800aaf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aaf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aafc:	d516      	bpl.n	800ab2c <_dtoa_r+0x34c>
 800aafe:	4ba8      	ldr	r3, [pc, #672]	@ (800ada0 <_dtoa_r+0x5c0>)
 800ab00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab08:	f7f5 fea0 	bl	800084c <__aeabi_ddiv>
 800ab0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab10:	f004 040f 	and.w	r4, r4, #15
 800ab14:	2603      	movs	r6, #3
 800ab16:	4da2      	ldr	r5, [pc, #648]	@ (800ada0 <_dtoa_r+0x5c0>)
 800ab18:	b954      	cbnz	r4, 800ab30 <_dtoa_r+0x350>
 800ab1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab22:	f7f5 fe93 	bl	800084c <__aeabi_ddiv>
 800ab26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab2a:	e028      	b.n	800ab7e <_dtoa_r+0x39e>
 800ab2c:	2602      	movs	r6, #2
 800ab2e:	e7f2      	b.n	800ab16 <_dtoa_r+0x336>
 800ab30:	07e1      	lsls	r1, r4, #31
 800ab32:	d508      	bpl.n	800ab46 <_dtoa_r+0x366>
 800ab34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab3c:	f7f5 fd5c 	bl	80005f8 <__aeabi_dmul>
 800ab40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab44:	3601      	adds	r6, #1
 800ab46:	1064      	asrs	r4, r4, #1
 800ab48:	3508      	adds	r5, #8
 800ab4a:	e7e5      	b.n	800ab18 <_dtoa_r+0x338>
 800ab4c:	f000 80d2 	beq.w	800acf4 <_dtoa_r+0x514>
 800ab50:	427c      	negs	r4, r7
 800ab52:	4b92      	ldr	r3, [pc, #584]	@ (800ad9c <_dtoa_r+0x5bc>)
 800ab54:	4d92      	ldr	r5, [pc, #584]	@ (800ada0 <_dtoa_r+0x5c0>)
 800ab56:	f004 020f 	and.w	r2, r4, #15
 800ab5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab66:	f7f5 fd47 	bl	80005f8 <__aeabi_dmul>
 800ab6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab6e:	1124      	asrs	r4, r4, #4
 800ab70:	2300      	movs	r3, #0
 800ab72:	2602      	movs	r6, #2
 800ab74:	2c00      	cmp	r4, #0
 800ab76:	f040 80b2 	bne.w	800acde <_dtoa_r+0x4fe>
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1d3      	bne.n	800ab26 <_dtoa_r+0x346>
 800ab7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 80b7 	beq.w	800acf8 <_dtoa_r+0x518>
 800ab8a:	4b86      	ldr	r3, [pc, #536]	@ (800ada4 <_dtoa_r+0x5c4>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	4620      	mov	r0, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	f7f5 ffa3 	bl	8000adc <__aeabi_dcmplt>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f000 80ae 	beq.w	800acf8 <_dtoa_r+0x518>
 800ab9c:	9b07      	ldr	r3, [sp, #28]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 80aa 	beq.w	800acf8 <_dtoa_r+0x518>
 800aba4:	9b00      	ldr	r3, [sp, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	dd37      	ble.n	800ac1a <_dtoa_r+0x43a>
 800abaa:	1e7b      	subs	r3, r7, #1
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	4620      	mov	r0, r4
 800abb0:	4b7d      	ldr	r3, [pc, #500]	@ (800ada8 <_dtoa_r+0x5c8>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	4629      	mov	r1, r5
 800abb6:	f7f5 fd1f 	bl	80005f8 <__aeabi_dmul>
 800abba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abbe:	9c00      	ldr	r4, [sp, #0]
 800abc0:	3601      	adds	r6, #1
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7f5 fcae 	bl	8000524 <__aeabi_i2d>
 800abc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abcc:	f7f5 fd14 	bl	80005f8 <__aeabi_dmul>
 800abd0:	4b76      	ldr	r3, [pc, #472]	@ (800adac <_dtoa_r+0x5cc>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	f7f5 fb5a 	bl	800028c <__adddf3>
 800abd8:	4605      	mov	r5, r0
 800abda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800abde:	2c00      	cmp	r4, #0
 800abe0:	f040 808d 	bne.w	800acfe <_dtoa_r+0x51e>
 800abe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe8:	4b71      	ldr	r3, [pc, #452]	@ (800adb0 <_dtoa_r+0x5d0>)
 800abea:	2200      	movs	r2, #0
 800abec:	f7f5 fb4c 	bl	8000288 <__aeabi_dsub>
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abf8:	462a      	mov	r2, r5
 800abfa:	4633      	mov	r3, r6
 800abfc:	f7f5 ff8c 	bl	8000b18 <__aeabi_dcmpgt>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	f040 828b 	bne.w	800b11c <_dtoa_r+0x93c>
 800ac06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac0a:	462a      	mov	r2, r5
 800ac0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac10:	f7f5 ff64 	bl	8000adc <__aeabi_dcmplt>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f040 8128 	bne.w	800ae6a <_dtoa_r+0x68a>
 800ac1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ac22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f2c0 815a 	blt.w	800aede <_dtoa_r+0x6fe>
 800ac2a:	2f0e      	cmp	r7, #14
 800ac2c:	f300 8157 	bgt.w	800aede <_dtoa_r+0x6fe>
 800ac30:	4b5a      	ldr	r3, [pc, #360]	@ (800ad9c <_dtoa_r+0x5bc>)
 800ac32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac36:	ed93 7b00 	vldr	d7, [r3]
 800ac3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	ed8d 7b00 	vstr	d7, [sp]
 800ac42:	da03      	bge.n	800ac4c <_dtoa_r+0x46c>
 800ac44:	9b07      	ldr	r3, [sp, #28]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f340 8101 	ble.w	800ae4e <_dtoa_r+0x66e>
 800ac4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac50:	4656      	mov	r6, sl
 800ac52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac56:	4620      	mov	r0, r4
 800ac58:	4629      	mov	r1, r5
 800ac5a:	f7f5 fdf7 	bl	800084c <__aeabi_ddiv>
 800ac5e:	f7f5 ff7b 	bl	8000b58 <__aeabi_d2iz>
 800ac62:	4680      	mov	r8, r0
 800ac64:	f7f5 fc5e 	bl	8000524 <__aeabi_i2d>
 800ac68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac6c:	f7f5 fcc4 	bl	80005f8 <__aeabi_dmul>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4620      	mov	r0, r4
 800ac76:	4629      	mov	r1, r5
 800ac78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ac7c:	f7f5 fb04 	bl	8000288 <__aeabi_dsub>
 800ac80:	f806 4b01 	strb.w	r4, [r6], #1
 800ac84:	9d07      	ldr	r5, [sp, #28]
 800ac86:	eba6 040a 	sub.w	r4, r6, sl
 800ac8a:	42a5      	cmp	r5, r4
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	f040 8117 	bne.w	800aec2 <_dtoa_r+0x6e2>
 800ac94:	f7f5 fafa 	bl	800028c <__adddf3>
 800ac98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	460d      	mov	r5, r1
 800aca0:	f7f5 ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f040 80f9 	bne.w	800ae9c <_dtoa_r+0x6bc>
 800acaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acae:	4620      	mov	r0, r4
 800acb0:	4629      	mov	r1, r5
 800acb2:	f7f5 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 800acb6:	b118      	cbz	r0, 800acc0 <_dtoa_r+0x4e0>
 800acb8:	f018 0f01 	tst.w	r8, #1
 800acbc:	f040 80ee 	bne.w	800ae9c <_dtoa_r+0x6bc>
 800acc0:	4649      	mov	r1, r9
 800acc2:	4658      	mov	r0, fp
 800acc4:	f000 fc90 	bl	800b5e8 <_Bfree>
 800acc8:	2300      	movs	r3, #0
 800acca:	7033      	strb	r3, [r6, #0]
 800accc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acce:	3701      	adds	r7, #1
 800acd0:	601f      	str	r7, [r3, #0]
 800acd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 831d 	beq.w	800b314 <_dtoa_r+0xb34>
 800acda:	601e      	str	r6, [r3, #0]
 800acdc:	e31a      	b.n	800b314 <_dtoa_r+0xb34>
 800acde:	07e2      	lsls	r2, r4, #31
 800ace0:	d505      	bpl.n	800acee <_dtoa_r+0x50e>
 800ace2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ace6:	f7f5 fc87 	bl	80005f8 <__aeabi_dmul>
 800acea:	3601      	adds	r6, #1
 800acec:	2301      	movs	r3, #1
 800acee:	1064      	asrs	r4, r4, #1
 800acf0:	3508      	adds	r5, #8
 800acf2:	e73f      	b.n	800ab74 <_dtoa_r+0x394>
 800acf4:	2602      	movs	r6, #2
 800acf6:	e742      	b.n	800ab7e <_dtoa_r+0x39e>
 800acf8:	9c07      	ldr	r4, [sp, #28]
 800acfa:	9704      	str	r7, [sp, #16]
 800acfc:	e761      	b.n	800abc2 <_dtoa_r+0x3e2>
 800acfe:	4b27      	ldr	r3, [pc, #156]	@ (800ad9c <_dtoa_r+0x5bc>)
 800ad00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad0a:	4454      	add	r4, sl
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	d053      	beq.n	800adb8 <_dtoa_r+0x5d8>
 800ad10:	4928      	ldr	r1, [pc, #160]	@ (800adb4 <_dtoa_r+0x5d4>)
 800ad12:	2000      	movs	r0, #0
 800ad14:	f7f5 fd9a 	bl	800084c <__aeabi_ddiv>
 800ad18:	4633      	mov	r3, r6
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	f7f5 fab4 	bl	8000288 <__aeabi_dsub>
 800ad20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad24:	4656      	mov	r6, sl
 800ad26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad2a:	f7f5 ff15 	bl	8000b58 <__aeabi_d2iz>
 800ad2e:	4605      	mov	r5, r0
 800ad30:	f7f5 fbf8 	bl	8000524 <__aeabi_i2d>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad3c:	f7f5 faa4 	bl	8000288 <__aeabi_dsub>
 800ad40:	3530      	adds	r5, #48	@ 0x30
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad4a:	f806 5b01 	strb.w	r5, [r6], #1
 800ad4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad52:	f7f5 fec3 	bl	8000adc <__aeabi_dcmplt>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d171      	bne.n	800ae3e <_dtoa_r+0x65e>
 800ad5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad5e:	4911      	ldr	r1, [pc, #68]	@ (800ada4 <_dtoa_r+0x5c4>)
 800ad60:	2000      	movs	r0, #0
 800ad62:	f7f5 fa91 	bl	8000288 <__aeabi_dsub>
 800ad66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad6a:	f7f5 feb7 	bl	8000adc <__aeabi_dcmplt>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	f040 8095 	bne.w	800ae9e <_dtoa_r+0x6be>
 800ad74:	42a6      	cmp	r6, r4
 800ad76:	f43f af50 	beq.w	800ac1a <_dtoa_r+0x43a>
 800ad7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad7e:	4b0a      	ldr	r3, [pc, #40]	@ (800ada8 <_dtoa_r+0x5c8>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	f7f5 fc39 	bl	80005f8 <__aeabi_dmul>
 800ad86:	4b08      	ldr	r3, [pc, #32]	@ (800ada8 <_dtoa_r+0x5c8>)
 800ad88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad92:	f7f5 fc31 	bl	80005f8 <__aeabi_dmul>
 800ad96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad9a:	e7c4      	b.n	800ad26 <_dtoa_r+0x546>
 800ad9c:	0800d930 	.word	0x0800d930
 800ada0:	0800d908 	.word	0x0800d908
 800ada4:	3ff00000 	.word	0x3ff00000
 800ada8:	40240000 	.word	0x40240000
 800adac:	401c0000 	.word	0x401c0000
 800adb0:	40140000 	.word	0x40140000
 800adb4:	3fe00000 	.word	0x3fe00000
 800adb8:	4631      	mov	r1, r6
 800adba:	4628      	mov	r0, r5
 800adbc:	f7f5 fc1c 	bl	80005f8 <__aeabi_dmul>
 800adc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800adc4:	9415      	str	r4, [sp, #84]	@ 0x54
 800adc6:	4656      	mov	r6, sl
 800adc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adcc:	f7f5 fec4 	bl	8000b58 <__aeabi_d2iz>
 800add0:	4605      	mov	r5, r0
 800add2:	f7f5 fba7 	bl	8000524 <__aeabi_i2d>
 800add6:	4602      	mov	r2, r0
 800add8:	460b      	mov	r3, r1
 800adda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adde:	f7f5 fa53 	bl	8000288 <__aeabi_dsub>
 800ade2:	3530      	adds	r5, #48	@ 0x30
 800ade4:	f806 5b01 	strb.w	r5, [r6], #1
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	42a6      	cmp	r6, r4
 800adee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adf2:	f04f 0200 	mov.w	r2, #0
 800adf6:	d124      	bne.n	800ae42 <_dtoa_r+0x662>
 800adf8:	4bac      	ldr	r3, [pc, #688]	@ (800b0ac <_dtoa_r+0x8cc>)
 800adfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800adfe:	f7f5 fa45 	bl	800028c <__adddf3>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae0a:	f7f5 fe85 	bl	8000b18 <__aeabi_dcmpgt>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d145      	bne.n	800ae9e <_dtoa_r+0x6be>
 800ae12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae16:	49a5      	ldr	r1, [pc, #660]	@ (800b0ac <_dtoa_r+0x8cc>)
 800ae18:	2000      	movs	r0, #0
 800ae1a:	f7f5 fa35 	bl	8000288 <__aeabi_dsub>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae26:	f7f5 fe59 	bl	8000adc <__aeabi_dcmplt>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	f43f aef5 	beq.w	800ac1a <_dtoa_r+0x43a>
 800ae30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ae32:	1e73      	subs	r3, r6, #1
 800ae34:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae3a:	2b30      	cmp	r3, #48	@ 0x30
 800ae3c:	d0f8      	beq.n	800ae30 <_dtoa_r+0x650>
 800ae3e:	9f04      	ldr	r7, [sp, #16]
 800ae40:	e73e      	b.n	800acc0 <_dtoa_r+0x4e0>
 800ae42:	4b9b      	ldr	r3, [pc, #620]	@ (800b0b0 <_dtoa_r+0x8d0>)
 800ae44:	f7f5 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ae48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae4c:	e7bc      	b.n	800adc8 <_dtoa_r+0x5e8>
 800ae4e:	d10c      	bne.n	800ae6a <_dtoa_r+0x68a>
 800ae50:	4b98      	ldr	r3, [pc, #608]	@ (800b0b4 <_dtoa_r+0x8d4>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae58:	f7f5 fbce 	bl	80005f8 <__aeabi_dmul>
 800ae5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae60:	f7f5 fe50 	bl	8000b04 <__aeabi_dcmpge>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f000 8157 	beq.w	800b118 <_dtoa_r+0x938>
 800ae6a:	2400      	movs	r4, #0
 800ae6c:	4625      	mov	r5, r4
 800ae6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae70:	43db      	mvns	r3, r3
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	4656      	mov	r6, sl
 800ae76:	2700      	movs	r7, #0
 800ae78:	4621      	mov	r1, r4
 800ae7a:	4658      	mov	r0, fp
 800ae7c:	f000 fbb4 	bl	800b5e8 <_Bfree>
 800ae80:	2d00      	cmp	r5, #0
 800ae82:	d0dc      	beq.n	800ae3e <_dtoa_r+0x65e>
 800ae84:	b12f      	cbz	r7, 800ae92 <_dtoa_r+0x6b2>
 800ae86:	42af      	cmp	r7, r5
 800ae88:	d003      	beq.n	800ae92 <_dtoa_r+0x6b2>
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	4658      	mov	r0, fp
 800ae8e:	f000 fbab 	bl	800b5e8 <_Bfree>
 800ae92:	4629      	mov	r1, r5
 800ae94:	4658      	mov	r0, fp
 800ae96:	f000 fba7 	bl	800b5e8 <_Bfree>
 800ae9a:	e7d0      	b.n	800ae3e <_dtoa_r+0x65e>
 800ae9c:	9704      	str	r7, [sp, #16]
 800ae9e:	4633      	mov	r3, r6
 800aea0:	461e      	mov	r6, r3
 800aea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aea6:	2a39      	cmp	r2, #57	@ 0x39
 800aea8:	d107      	bne.n	800aeba <_dtoa_r+0x6da>
 800aeaa:	459a      	cmp	sl, r3
 800aeac:	d1f8      	bne.n	800aea0 <_dtoa_r+0x6c0>
 800aeae:	9a04      	ldr	r2, [sp, #16]
 800aeb0:	3201      	adds	r2, #1
 800aeb2:	9204      	str	r2, [sp, #16]
 800aeb4:	2230      	movs	r2, #48	@ 0x30
 800aeb6:	f88a 2000 	strb.w	r2, [sl]
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	3201      	adds	r2, #1
 800aebe:	701a      	strb	r2, [r3, #0]
 800aec0:	e7bd      	b.n	800ae3e <_dtoa_r+0x65e>
 800aec2:	4b7b      	ldr	r3, [pc, #492]	@ (800b0b0 <_dtoa_r+0x8d0>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	f7f5 fb97 	bl	80005f8 <__aeabi_dmul>
 800aeca:	2200      	movs	r2, #0
 800aecc:	2300      	movs	r3, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	460d      	mov	r5, r1
 800aed2:	f7f5 fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	f43f aebb 	beq.w	800ac52 <_dtoa_r+0x472>
 800aedc:	e6f0      	b.n	800acc0 <_dtoa_r+0x4e0>
 800aede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aee0:	2a00      	cmp	r2, #0
 800aee2:	f000 80db 	beq.w	800b09c <_dtoa_r+0x8bc>
 800aee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee8:	2a01      	cmp	r2, #1
 800aeea:	f300 80bf 	bgt.w	800b06c <_dtoa_r+0x88c>
 800aeee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aef0:	2a00      	cmp	r2, #0
 800aef2:	f000 80b7 	beq.w	800b064 <_dtoa_r+0x884>
 800aef6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aefa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aefc:	4646      	mov	r6, r8
 800aefe:	9a08      	ldr	r2, [sp, #32]
 800af00:	2101      	movs	r1, #1
 800af02:	441a      	add	r2, r3
 800af04:	4658      	mov	r0, fp
 800af06:	4498      	add	r8, r3
 800af08:	9208      	str	r2, [sp, #32]
 800af0a:	f000 fc21 	bl	800b750 <__i2b>
 800af0e:	4605      	mov	r5, r0
 800af10:	b15e      	cbz	r6, 800af2a <_dtoa_r+0x74a>
 800af12:	9b08      	ldr	r3, [sp, #32]
 800af14:	2b00      	cmp	r3, #0
 800af16:	dd08      	ble.n	800af2a <_dtoa_r+0x74a>
 800af18:	42b3      	cmp	r3, r6
 800af1a:	9a08      	ldr	r2, [sp, #32]
 800af1c:	bfa8      	it	ge
 800af1e:	4633      	movge	r3, r6
 800af20:	eba8 0803 	sub.w	r8, r8, r3
 800af24:	1af6      	subs	r6, r6, r3
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	9308      	str	r3, [sp, #32]
 800af2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af2c:	b1f3      	cbz	r3, 800af6c <_dtoa_r+0x78c>
 800af2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 80b7 	beq.w	800b0a4 <_dtoa_r+0x8c4>
 800af36:	b18c      	cbz	r4, 800af5c <_dtoa_r+0x77c>
 800af38:	4629      	mov	r1, r5
 800af3a:	4622      	mov	r2, r4
 800af3c:	4658      	mov	r0, fp
 800af3e:	f000 fcc7 	bl	800b8d0 <__pow5mult>
 800af42:	464a      	mov	r2, r9
 800af44:	4601      	mov	r1, r0
 800af46:	4605      	mov	r5, r0
 800af48:	4658      	mov	r0, fp
 800af4a:	f000 fc17 	bl	800b77c <__multiply>
 800af4e:	4649      	mov	r1, r9
 800af50:	9004      	str	r0, [sp, #16]
 800af52:	4658      	mov	r0, fp
 800af54:	f000 fb48 	bl	800b5e8 <_Bfree>
 800af58:	9b04      	ldr	r3, [sp, #16]
 800af5a:	4699      	mov	r9, r3
 800af5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af5e:	1b1a      	subs	r2, r3, r4
 800af60:	d004      	beq.n	800af6c <_dtoa_r+0x78c>
 800af62:	4649      	mov	r1, r9
 800af64:	4658      	mov	r0, fp
 800af66:	f000 fcb3 	bl	800b8d0 <__pow5mult>
 800af6a:	4681      	mov	r9, r0
 800af6c:	2101      	movs	r1, #1
 800af6e:	4658      	mov	r0, fp
 800af70:	f000 fbee 	bl	800b750 <__i2b>
 800af74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af76:	4604      	mov	r4, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 81cf 	beq.w	800b31c <_dtoa_r+0xb3c>
 800af7e:	461a      	mov	r2, r3
 800af80:	4601      	mov	r1, r0
 800af82:	4658      	mov	r0, fp
 800af84:	f000 fca4 	bl	800b8d0 <__pow5mult>
 800af88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	4604      	mov	r4, r0
 800af8e:	f300 8095 	bgt.w	800b0bc <_dtoa_r+0x8dc>
 800af92:	9b02      	ldr	r3, [sp, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f040 8087 	bne.w	800b0a8 <_dtoa_r+0x8c8>
 800af9a:	9b03      	ldr	r3, [sp, #12]
 800af9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f040 8089 	bne.w	800b0b8 <_dtoa_r+0x8d8>
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afac:	0d1b      	lsrs	r3, r3, #20
 800afae:	051b      	lsls	r3, r3, #20
 800afb0:	b12b      	cbz	r3, 800afbe <_dtoa_r+0x7de>
 800afb2:	9b08      	ldr	r3, [sp, #32]
 800afb4:	3301      	adds	r3, #1
 800afb6:	9308      	str	r3, [sp, #32]
 800afb8:	f108 0801 	add.w	r8, r8, #1
 800afbc:	2301      	movs	r3, #1
 800afbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800afc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 81b0 	beq.w	800b328 <_dtoa_r+0xb48>
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afce:	6918      	ldr	r0, [r3, #16]
 800afd0:	f000 fb72 	bl	800b6b8 <__hi0bits>
 800afd4:	f1c0 0020 	rsb	r0, r0, #32
 800afd8:	9b08      	ldr	r3, [sp, #32]
 800afda:	4418      	add	r0, r3
 800afdc:	f010 001f 	ands.w	r0, r0, #31
 800afe0:	d077      	beq.n	800b0d2 <_dtoa_r+0x8f2>
 800afe2:	f1c0 0320 	rsb	r3, r0, #32
 800afe6:	2b04      	cmp	r3, #4
 800afe8:	dd6b      	ble.n	800b0c2 <_dtoa_r+0x8e2>
 800afea:	9b08      	ldr	r3, [sp, #32]
 800afec:	f1c0 001c 	rsb	r0, r0, #28
 800aff0:	4403      	add	r3, r0
 800aff2:	4480      	add	r8, r0
 800aff4:	4406      	add	r6, r0
 800aff6:	9308      	str	r3, [sp, #32]
 800aff8:	f1b8 0f00 	cmp.w	r8, #0
 800affc:	dd05      	ble.n	800b00a <_dtoa_r+0x82a>
 800affe:	4649      	mov	r1, r9
 800b000:	4642      	mov	r2, r8
 800b002:	4658      	mov	r0, fp
 800b004:	f000 fcbe 	bl	800b984 <__lshift>
 800b008:	4681      	mov	r9, r0
 800b00a:	9b08      	ldr	r3, [sp, #32]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	dd05      	ble.n	800b01c <_dtoa_r+0x83c>
 800b010:	4621      	mov	r1, r4
 800b012:	461a      	mov	r2, r3
 800b014:	4658      	mov	r0, fp
 800b016:	f000 fcb5 	bl	800b984 <__lshift>
 800b01a:	4604      	mov	r4, r0
 800b01c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d059      	beq.n	800b0d6 <_dtoa_r+0x8f6>
 800b022:	4621      	mov	r1, r4
 800b024:	4648      	mov	r0, r9
 800b026:	f000 fd19 	bl	800ba5c <__mcmp>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	da53      	bge.n	800b0d6 <_dtoa_r+0x8f6>
 800b02e:	1e7b      	subs	r3, r7, #1
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	4649      	mov	r1, r9
 800b034:	2300      	movs	r3, #0
 800b036:	220a      	movs	r2, #10
 800b038:	4658      	mov	r0, fp
 800b03a:	f000 faf7 	bl	800b62c <__multadd>
 800b03e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b040:	4681      	mov	r9, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 8172 	beq.w	800b32c <_dtoa_r+0xb4c>
 800b048:	2300      	movs	r3, #0
 800b04a:	4629      	mov	r1, r5
 800b04c:	220a      	movs	r2, #10
 800b04e:	4658      	mov	r0, fp
 800b050:	f000 faec 	bl	800b62c <__multadd>
 800b054:	9b00      	ldr	r3, [sp, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	4605      	mov	r5, r0
 800b05a:	dc67      	bgt.n	800b12c <_dtoa_r+0x94c>
 800b05c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b05e:	2b02      	cmp	r3, #2
 800b060:	dc41      	bgt.n	800b0e6 <_dtoa_r+0x906>
 800b062:	e063      	b.n	800b12c <_dtoa_r+0x94c>
 800b064:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b066:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b06a:	e746      	b.n	800aefa <_dtoa_r+0x71a>
 800b06c:	9b07      	ldr	r3, [sp, #28]
 800b06e:	1e5c      	subs	r4, r3, #1
 800b070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b072:	42a3      	cmp	r3, r4
 800b074:	bfbf      	itttt	lt
 800b076:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b078:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b07a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b07c:	1ae3      	sublt	r3, r4, r3
 800b07e:	bfb4      	ite	lt
 800b080:	18d2      	addlt	r2, r2, r3
 800b082:	1b1c      	subge	r4, r3, r4
 800b084:	9b07      	ldr	r3, [sp, #28]
 800b086:	bfbc      	itt	lt
 800b088:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b08a:	2400      	movlt	r4, #0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	bfb5      	itete	lt
 800b090:	eba8 0603 	sublt.w	r6, r8, r3
 800b094:	9b07      	ldrge	r3, [sp, #28]
 800b096:	2300      	movlt	r3, #0
 800b098:	4646      	movge	r6, r8
 800b09a:	e730      	b.n	800aefe <_dtoa_r+0x71e>
 800b09c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b09e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b0a0:	4646      	mov	r6, r8
 800b0a2:	e735      	b.n	800af10 <_dtoa_r+0x730>
 800b0a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0a6:	e75c      	b.n	800af62 <_dtoa_r+0x782>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e788      	b.n	800afbe <_dtoa_r+0x7de>
 800b0ac:	3fe00000 	.word	0x3fe00000
 800b0b0:	40240000 	.word	0x40240000
 800b0b4:	40140000 	.word	0x40140000
 800b0b8:	9b02      	ldr	r3, [sp, #8]
 800b0ba:	e780      	b.n	800afbe <_dtoa_r+0x7de>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0c0:	e782      	b.n	800afc8 <_dtoa_r+0x7e8>
 800b0c2:	d099      	beq.n	800aff8 <_dtoa_r+0x818>
 800b0c4:	9a08      	ldr	r2, [sp, #32]
 800b0c6:	331c      	adds	r3, #28
 800b0c8:	441a      	add	r2, r3
 800b0ca:	4498      	add	r8, r3
 800b0cc:	441e      	add	r6, r3
 800b0ce:	9208      	str	r2, [sp, #32]
 800b0d0:	e792      	b.n	800aff8 <_dtoa_r+0x818>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	e7f6      	b.n	800b0c4 <_dtoa_r+0x8e4>
 800b0d6:	9b07      	ldr	r3, [sp, #28]
 800b0d8:	9704      	str	r7, [sp, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	dc20      	bgt.n	800b120 <_dtoa_r+0x940>
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	dd1e      	ble.n	800b124 <_dtoa_r+0x944>
 800b0e6:	9b00      	ldr	r3, [sp, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f47f aec0 	bne.w	800ae6e <_dtoa_r+0x68e>
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	2205      	movs	r2, #5
 800b0f2:	4658      	mov	r0, fp
 800b0f4:	f000 fa9a 	bl	800b62c <__multadd>
 800b0f8:	4601      	mov	r1, r0
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	4648      	mov	r0, r9
 800b0fe:	f000 fcad 	bl	800ba5c <__mcmp>
 800b102:	2800      	cmp	r0, #0
 800b104:	f77f aeb3 	ble.w	800ae6e <_dtoa_r+0x68e>
 800b108:	4656      	mov	r6, sl
 800b10a:	2331      	movs	r3, #49	@ 0x31
 800b10c:	f806 3b01 	strb.w	r3, [r6], #1
 800b110:	9b04      	ldr	r3, [sp, #16]
 800b112:	3301      	adds	r3, #1
 800b114:	9304      	str	r3, [sp, #16]
 800b116:	e6ae      	b.n	800ae76 <_dtoa_r+0x696>
 800b118:	9c07      	ldr	r4, [sp, #28]
 800b11a:	9704      	str	r7, [sp, #16]
 800b11c:	4625      	mov	r5, r4
 800b11e:	e7f3      	b.n	800b108 <_dtoa_r+0x928>
 800b120:	9b07      	ldr	r3, [sp, #28]
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b126:	2b00      	cmp	r3, #0
 800b128:	f000 8104 	beq.w	800b334 <_dtoa_r+0xb54>
 800b12c:	2e00      	cmp	r6, #0
 800b12e:	dd05      	ble.n	800b13c <_dtoa_r+0x95c>
 800b130:	4629      	mov	r1, r5
 800b132:	4632      	mov	r2, r6
 800b134:	4658      	mov	r0, fp
 800b136:	f000 fc25 	bl	800b984 <__lshift>
 800b13a:	4605      	mov	r5, r0
 800b13c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d05a      	beq.n	800b1f8 <_dtoa_r+0xa18>
 800b142:	6869      	ldr	r1, [r5, #4]
 800b144:	4658      	mov	r0, fp
 800b146:	f000 fa0f 	bl	800b568 <_Balloc>
 800b14a:	4606      	mov	r6, r0
 800b14c:	b928      	cbnz	r0, 800b15a <_dtoa_r+0x97a>
 800b14e:	4b84      	ldr	r3, [pc, #528]	@ (800b360 <_dtoa_r+0xb80>)
 800b150:	4602      	mov	r2, r0
 800b152:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b156:	f7ff bb5a 	b.w	800a80e <_dtoa_r+0x2e>
 800b15a:	692a      	ldr	r2, [r5, #16]
 800b15c:	3202      	adds	r2, #2
 800b15e:	0092      	lsls	r2, r2, #2
 800b160:	f105 010c 	add.w	r1, r5, #12
 800b164:	300c      	adds	r0, #12
 800b166:	f7ff faa4 	bl	800a6b2 <memcpy>
 800b16a:	2201      	movs	r2, #1
 800b16c:	4631      	mov	r1, r6
 800b16e:	4658      	mov	r0, fp
 800b170:	f000 fc08 	bl	800b984 <__lshift>
 800b174:	f10a 0301 	add.w	r3, sl, #1
 800b178:	9307      	str	r3, [sp, #28]
 800b17a:	9b00      	ldr	r3, [sp, #0]
 800b17c:	4453      	add	r3, sl
 800b17e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b180:	9b02      	ldr	r3, [sp, #8]
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	462f      	mov	r7, r5
 800b188:	930a      	str	r3, [sp, #40]	@ 0x28
 800b18a:	4605      	mov	r5, r0
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	4621      	mov	r1, r4
 800b190:	3b01      	subs	r3, #1
 800b192:	4648      	mov	r0, r9
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	f7ff fa9a 	bl	800a6ce <quorem>
 800b19a:	4639      	mov	r1, r7
 800b19c:	9002      	str	r0, [sp, #8]
 800b19e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b1a2:	4648      	mov	r0, r9
 800b1a4:	f000 fc5a 	bl	800ba5c <__mcmp>
 800b1a8:	462a      	mov	r2, r5
 800b1aa:	9008      	str	r0, [sp, #32]
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	4658      	mov	r0, fp
 800b1b0:	f000 fc70 	bl	800ba94 <__mdiff>
 800b1b4:	68c2      	ldr	r2, [r0, #12]
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	bb02      	cbnz	r2, 800b1fc <_dtoa_r+0xa1c>
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	4648      	mov	r0, r9
 800b1be:	f000 fc4d 	bl	800ba5c <__mcmp>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4658      	mov	r0, fp
 800b1c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1ca:	f000 fa0d 	bl	800b5e8 <_Bfree>
 800b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1d2:	9e07      	ldr	r6, [sp, #28]
 800b1d4:	ea43 0102 	orr.w	r1, r3, r2
 800b1d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1da:	4319      	orrs	r1, r3
 800b1dc:	d110      	bne.n	800b200 <_dtoa_r+0xa20>
 800b1de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b1e2:	d029      	beq.n	800b238 <_dtoa_r+0xa58>
 800b1e4:	9b08      	ldr	r3, [sp, #32]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	dd02      	ble.n	800b1f0 <_dtoa_r+0xa10>
 800b1ea:	9b02      	ldr	r3, [sp, #8]
 800b1ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b1f0:	9b00      	ldr	r3, [sp, #0]
 800b1f2:	f883 8000 	strb.w	r8, [r3]
 800b1f6:	e63f      	b.n	800ae78 <_dtoa_r+0x698>
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	e7bb      	b.n	800b174 <_dtoa_r+0x994>
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	e7e1      	b.n	800b1c4 <_dtoa_r+0x9e4>
 800b200:	9b08      	ldr	r3, [sp, #32]
 800b202:	2b00      	cmp	r3, #0
 800b204:	db04      	blt.n	800b210 <_dtoa_r+0xa30>
 800b206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b208:	430b      	orrs	r3, r1
 800b20a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b20c:	430b      	orrs	r3, r1
 800b20e:	d120      	bne.n	800b252 <_dtoa_r+0xa72>
 800b210:	2a00      	cmp	r2, #0
 800b212:	dded      	ble.n	800b1f0 <_dtoa_r+0xa10>
 800b214:	4649      	mov	r1, r9
 800b216:	2201      	movs	r2, #1
 800b218:	4658      	mov	r0, fp
 800b21a:	f000 fbb3 	bl	800b984 <__lshift>
 800b21e:	4621      	mov	r1, r4
 800b220:	4681      	mov	r9, r0
 800b222:	f000 fc1b 	bl	800ba5c <__mcmp>
 800b226:	2800      	cmp	r0, #0
 800b228:	dc03      	bgt.n	800b232 <_dtoa_r+0xa52>
 800b22a:	d1e1      	bne.n	800b1f0 <_dtoa_r+0xa10>
 800b22c:	f018 0f01 	tst.w	r8, #1
 800b230:	d0de      	beq.n	800b1f0 <_dtoa_r+0xa10>
 800b232:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b236:	d1d8      	bne.n	800b1ea <_dtoa_r+0xa0a>
 800b238:	9a00      	ldr	r2, [sp, #0]
 800b23a:	2339      	movs	r3, #57	@ 0x39
 800b23c:	7013      	strb	r3, [r2, #0]
 800b23e:	4633      	mov	r3, r6
 800b240:	461e      	mov	r6, r3
 800b242:	3b01      	subs	r3, #1
 800b244:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b248:	2a39      	cmp	r2, #57	@ 0x39
 800b24a:	d052      	beq.n	800b2f2 <_dtoa_r+0xb12>
 800b24c:	3201      	adds	r2, #1
 800b24e:	701a      	strb	r2, [r3, #0]
 800b250:	e612      	b.n	800ae78 <_dtoa_r+0x698>
 800b252:	2a00      	cmp	r2, #0
 800b254:	dd07      	ble.n	800b266 <_dtoa_r+0xa86>
 800b256:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b25a:	d0ed      	beq.n	800b238 <_dtoa_r+0xa58>
 800b25c:	9a00      	ldr	r2, [sp, #0]
 800b25e:	f108 0301 	add.w	r3, r8, #1
 800b262:	7013      	strb	r3, [r2, #0]
 800b264:	e608      	b.n	800ae78 <_dtoa_r+0x698>
 800b266:	9b07      	ldr	r3, [sp, #28]
 800b268:	9a07      	ldr	r2, [sp, #28]
 800b26a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b270:	4293      	cmp	r3, r2
 800b272:	d028      	beq.n	800b2c6 <_dtoa_r+0xae6>
 800b274:	4649      	mov	r1, r9
 800b276:	2300      	movs	r3, #0
 800b278:	220a      	movs	r2, #10
 800b27a:	4658      	mov	r0, fp
 800b27c:	f000 f9d6 	bl	800b62c <__multadd>
 800b280:	42af      	cmp	r7, r5
 800b282:	4681      	mov	r9, r0
 800b284:	f04f 0300 	mov.w	r3, #0
 800b288:	f04f 020a 	mov.w	r2, #10
 800b28c:	4639      	mov	r1, r7
 800b28e:	4658      	mov	r0, fp
 800b290:	d107      	bne.n	800b2a2 <_dtoa_r+0xac2>
 800b292:	f000 f9cb 	bl	800b62c <__multadd>
 800b296:	4607      	mov	r7, r0
 800b298:	4605      	mov	r5, r0
 800b29a:	9b07      	ldr	r3, [sp, #28]
 800b29c:	3301      	adds	r3, #1
 800b29e:	9307      	str	r3, [sp, #28]
 800b2a0:	e774      	b.n	800b18c <_dtoa_r+0x9ac>
 800b2a2:	f000 f9c3 	bl	800b62c <__multadd>
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	4607      	mov	r7, r0
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	220a      	movs	r2, #10
 800b2ae:	4658      	mov	r0, fp
 800b2b0:	f000 f9bc 	bl	800b62c <__multadd>
 800b2b4:	4605      	mov	r5, r0
 800b2b6:	e7f0      	b.n	800b29a <_dtoa_r+0xaba>
 800b2b8:	9b00      	ldr	r3, [sp, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	bfcc      	ite	gt
 800b2be:	461e      	movgt	r6, r3
 800b2c0:	2601      	movle	r6, #1
 800b2c2:	4456      	add	r6, sl
 800b2c4:	2700      	movs	r7, #0
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	4658      	mov	r0, fp
 800b2cc:	f000 fb5a 	bl	800b984 <__lshift>
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	4681      	mov	r9, r0
 800b2d4:	f000 fbc2 	bl	800ba5c <__mcmp>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	dcb0      	bgt.n	800b23e <_dtoa_r+0xa5e>
 800b2dc:	d102      	bne.n	800b2e4 <_dtoa_r+0xb04>
 800b2de:	f018 0f01 	tst.w	r8, #1
 800b2e2:	d1ac      	bne.n	800b23e <_dtoa_r+0xa5e>
 800b2e4:	4633      	mov	r3, r6
 800b2e6:	461e      	mov	r6, r3
 800b2e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2ec:	2a30      	cmp	r2, #48	@ 0x30
 800b2ee:	d0fa      	beq.n	800b2e6 <_dtoa_r+0xb06>
 800b2f0:	e5c2      	b.n	800ae78 <_dtoa_r+0x698>
 800b2f2:	459a      	cmp	sl, r3
 800b2f4:	d1a4      	bne.n	800b240 <_dtoa_r+0xa60>
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	2331      	movs	r3, #49	@ 0x31
 800b2fe:	f88a 3000 	strb.w	r3, [sl]
 800b302:	e5b9      	b.n	800ae78 <_dtoa_r+0x698>
 800b304:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b306:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b364 <_dtoa_r+0xb84>
 800b30a:	b11b      	cbz	r3, 800b314 <_dtoa_r+0xb34>
 800b30c:	f10a 0308 	add.w	r3, sl, #8
 800b310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b312:	6013      	str	r3, [r2, #0]
 800b314:	4650      	mov	r0, sl
 800b316:	b019      	add	sp, #100	@ 0x64
 800b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b31e:	2b01      	cmp	r3, #1
 800b320:	f77f ae37 	ble.w	800af92 <_dtoa_r+0x7b2>
 800b324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b326:	930a      	str	r3, [sp, #40]	@ 0x28
 800b328:	2001      	movs	r0, #1
 800b32a:	e655      	b.n	800afd8 <_dtoa_r+0x7f8>
 800b32c:	9b00      	ldr	r3, [sp, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f77f aed6 	ble.w	800b0e0 <_dtoa_r+0x900>
 800b334:	4656      	mov	r6, sl
 800b336:	4621      	mov	r1, r4
 800b338:	4648      	mov	r0, r9
 800b33a:	f7ff f9c8 	bl	800a6ce <quorem>
 800b33e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b342:	f806 8b01 	strb.w	r8, [r6], #1
 800b346:	9b00      	ldr	r3, [sp, #0]
 800b348:	eba6 020a 	sub.w	r2, r6, sl
 800b34c:	4293      	cmp	r3, r2
 800b34e:	ddb3      	ble.n	800b2b8 <_dtoa_r+0xad8>
 800b350:	4649      	mov	r1, r9
 800b352:	2300      	movs	r3, #0
 800b354:	220a      	movs	r2, #10
 800b356:	4658      	mov	r0, fp
 800b358:	f000 f968 	bl	800b62c <__multadd>
 800b35c:	4681      	mov	r9, r0
 800b35e:	e7ea      	b.n	800b336 <_dtoa_r+0xb56>
 800b360:	0800d890 	.word	0x0800d890
 800b364:	0800d814 	.word	0x0800d814

0800b368 <_free_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4605      	mov	r5, r0
 800b36c:	2900      	cmp	r1, #0
 800b36e:	d041      	beq.n	800b3f4 <_free_r+0x8c>
 800b370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b374:	1f0c      	subs	r4, r1, #4
 800b376:	2b00      	cmp	r3, #0
 800b378:	bfb8      	it	lt
 800b37a:	18e4      	addlt	r4, r4, r3
 800b37c:	f000 f8e8 	bl	800b550 <__malloc_lock>
 800b380:	4a1d      	ldr	r2, [pc, #116]	@ (800b3f8 <_free_r+0x90>)
 800b382:	6813      	ldr	r3, [r2, #0]
 800b384:	b933      	cbnz	r3, 800b394 <_free_r+0x2c>
 800b386:	6063      	str	r3, [r4, #4]
 800b388:	6014      	str	r4, [r2, #0]
 800b38a:	4628      	mov	r0, r5
 800b38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b390:	f000 b8e4 	b.w	800b55c <__malloc_unlock>
 800b394:	42a3      	cmp	r3, r4
 800b396:	d908      	bls.n	800b3aa <_free_r+0x42>
 800b398:	6820      	ldr	r0, [r4, #0]
 800b39a:	1821      	adds	r1, r4, r0
 800b39c:	428b      	cmp	r3, r1
 800b39e:	bf01      	itttt	eq
 800b3a0:	6819      	ldreq	r1, [r3, #0]
 800b3a2:	685b      	ldreq	r3, [r3, #4]
 800b3a4:	1809      	addeq	r1, r1, r0
 800b3a6:	6021      	streq	r1, [r4, #0]
 800b3a8:	e7ed      	b.n	800b386 <_free_r+0x1e>
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	b10b      	cbz	r3, 800b3b4 <_free_r+0x4c>
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	d9fa      	bls.n	800b3aa <_free_r+0x42>
 800b3b4:	6811      	ldr	r1, [r2, #0]
 800b3b6:	1850      	adds	r0, r2, r1
 800b3b8:	42a0      	cmp	r0, r4
 800b3ba:	d10b      	bne.n	800b3d4 <_free_r+0x6c>
 800b3bc:	6820      	ldr	r0, [r4, #0]
 800b3be:	4401      	add	r1, r0
 800b3c0:	1850      	adds	r0, r2, r1
 800b3c2:	4283      	cmp	r3, r0
 800b3c4:	6011      	str	r1, [r2, #0]
 800b3c6:	d1e0      	bne.n	800b38a <_free_r+0x22>
 800b3c8:	6818      	ldr	r0, [r3, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	6053      	str	r3, [r2, #4]
 800b3ce:	4408      	add	r0, r1
 800b3d0:	6010      	str	r0, [r2, #0]
 800b3d2:	e7da      	b.n	800b38a <_free_r+0x22>
 800b3d4:	d902      	bls.n	800b3dc <_free_r+0x74>
 800b3d6:	230c      	movs	r3, #12
 800b3d8:	602b      	str	r3, [r5, #0]
 800b3da:	e7d6      	b.n	800b38a <_free_r+0x22>
 800b3dc:	6820      	ldr	r0, [r4, #0]
 800b3de:	1821      	adds	r1, r4, r0
 800b3e0:	428b      	cmp	r3, r1
 800b3e2:	bf04      	itt	eq
 800b3e4:	6819      	ldreq	r1, [r3, #0]
 800b3e6:	685b      	ldreq	r3, [r3, #4]
 800b3e8:	6063      	str	r3, [r4, #4]
 800b3ea:	bf04      	itt	eq
 800b3ec:	1809      	addeq	r1, r1, r0
 800b3ee:	6021      	streq	r1, [r4, #0]
 800b3f0:	6054      	str	r4, [r2, #4]
 800b3f2:	e7ca      	b.n	800b38a <_free_r+0x22>
 800b3f4:	bd38      	pop	{r3, r4, r5, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20004570 	.word	0x20004570

0800b3fc <malloc>:
 800b3fc:	4b02      	ldr	r3, [pc, #8]	@ (800b408 <malloc+0xc>)
 800b3fe:	4601      	mov	r1, r0
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	f000 b825 	b.w	800b450 <_malloc_r>
 800b406:	bf00      	nop
 800b408:	20000030 	.word	0x20000030

0800b40c <sbrk_aligned>:
 800b40c:	b570      	push	{r4, r5, r6, lr}
 800b40e:	4e0f      	ldr	r6, [pc, #60]	@ (800b44c <sbrk_aligned+0x40>)
 800b410:	460c      	mov	r4, r1
 800b412:	6831      	ldr	r1, [r6, #0]
 800b414:	4605      	mov	r5, r0
 800b416:	b911      	cbnz	r1, 800b41e <sbrk_aligned+0x12>
 800b418:	f000 fe46 	bl	800c0a8 <_sbrk_r>
 800b41c:	6030      	str	r0, [r6, #0]
 800b41e:	4621      	mov	r1, r4
 800b420:	4628      	mov	r0, r5
 800b422:	f000 fe41 	bl	800c0a8 <_sbrk_r>
 800b426:	1c43      	adds	r3, r0, #1
 800b428:	d103      	bne.n	800b432 <sbrk_aligned+0x26>
 800b42a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b42e:	4620      	mov	r0, r4
 800b430:	bd70      	pop	{r4, r5, r6, pc}
 800b432:	1cc4      	adds	r4, r0, #3
 800b434:	f024 0403 	bic.w	r4, r4, #3
 800b438:	42a0      	cmp	r0, r4
 800b43a:	d0f8      	beq.n	800b42e <sbrk_aligned+0x22>
 800b43c:	1a21      	subs	r1, r4, r0
 800b43e:	4628      	mov	r0, r5
 800b440:	f000 fe32 	bl	800c0a8 <_sbrk_r>
 800b444:	3001      	adds	r0, #1
 800b446:	d1f2      	bne.n	800b42e <sbrk_aligned+0x22>
 800b448:	e7ef      	b.n	800b42a <sbrk_aligned+0x1e>
 800b44a:	bf00      	nop
 800b44c:	2000456c 	.word	0x2000456c

0800b450 <_malloc_r>:
 800b450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b454:	1ccd      	adds	r5, r1, #3
 800b456:	f025 0503 	bic.w	r5, r5, #3
 800b45a:	3508      	adds	r5, #8
 800b45c:	2d0c      	cmp	r5, #12
 800b45e:	bf38      	it	cc
 800b460:	250c      	movcc	r5, #12
 800b462:	2d00      	cmp	r5, #0
 800b464:	4606      	mov	r6, r0
 800b466:	db01      	blt.n	800b46c <_malloc_r+0x1c>
 800b468:	42a9      	cmp	r1, r5
 800b46a:	d904      	bls.n	800b476 <_malloc_r+0x26>
 800b46c:	230c      	movs	r3, #12
 800b46e:	6033      	str	r3, [r6, #0]
 800b470:	2000      	movs	r0, #0
 800b472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b54c <_malloc_r+0xfc>
 800b47a:	f000 f869 	bl	800b550 <__malloc_lock>
 800b47e:	f8d8 3000 	ldr.w	r3, [r8]
 800b482:	461c      	mov	r4, r3
 800b484:	bb44      	cbnz	r4, 800b4d8 <_malloc_r+0x88>
 800b486:	4629      	mov	r1, r5
 800b488:	4630      	mov	r0, r6
 800b48a:	f7ff ffbf 	bl	800b40c <sbrk_aligned>
 800b48e:	1c43      	adds	r3, r0, #1
 800b490:	4604      	mov	r4, r0
 800b492:	d158      	bne.n	800b546 <_malloc_r+0xf6>
 800b494:	f8d8 4000 	ldr.w	r4, [r8]
 800b498:	4627      	mov	r7, r4
 800b49a:	2f00      	cmp	r7, #0
 800b49c:	d143      	bne.n	800b526 <_malloc_r+0xd6>
 800b49e:	2c00      	cmp	r4, #0
 800b4a0:	d04b      	beq.n	800b53a <_malloc_r+0xea>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	4639      	mov	r1, r7
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	eb04 0903 	add.w	r9, r4, r3
 800b4ac:	f000 fdfc 	bl	800c0a8 <_sbrk_r>
 800b4b0:	4581      	cmp	r9, r0
 800b4b2:	d142      	bne.n	800b53a <_malloc_r+0xea>
 800b4b4:	6821      	ldr	r1, [r4, #0]
 800b4b6:	1a6d      	subs	r5, r5, r1
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff ffa6 	bl	800b40c <sbrk_aligned>
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	d03a      	beq.n	800b53a <_malloc_r+0xea>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	442b      	add	r3, r5
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	bb62      	cbnz	r2, 800b52c <_malloc_r+0xdc>
 800b4d2:	f8c8 7000 	str.w	r7, [r8]
 800b4d6:	e00f      	b.n	800b4f8 <_malloc_r+0xa8>
 800b4d8:	6822      	ldr	r2, [r4, #0]
 800b4da:	1b52      	subs	r2, r2, r5
 800b4dc:	d420      	bmi.n	800b520 <_malloc_r+0xd0>
 800b4de:	2a0b      	cmp	r2, #11
 800b4e0:	d917      	bls.n	800b512 <_malloc_r+0xc2>
 800b4e2:	1961      	adds	r1, r4, r5
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	6025      	str	r5, [r4, #0]
 800b4e8:	bf18      	it	ne
 800b4ea:	6059      	strne	r1, [r3, #4]
 800b4ec:	6863      	ldr	r3, [r4, #4]
 800b4ee:	bf08      	it	eq
 800b4f0:	f8c8 1000 	streq.w	r1, [r8]
 800b4f4:	5162      	str	r2, [r4, r5]
 800b4f6:	604b      	str	r3, [r1, #4]
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f000 f82f 	bl	800b55c <__malloc_unlock>
 800b4fe:	f104 000b 	add.w	r0, r4, #11
 800b502:	1d23      	adds	r3, r4, #4
 800b504:	f020 0007 	bic.w	r0, r0, #7
 800b508:	1ac2      	subs	r2, r0, r3
 800b50a:	bf1c      	itt	ne
 800b50c:	1a1b      	subne	r3, r3, r0
 800b50e:	50a3      	strne	r3, [r4, r2]
 800b510:	e7af      	b.n	800b472 <_malloc_r+0x22>
 800b512:	6862      	ldr	r2, [r4, #4]
 800b514:	42a3      	cmp	r3, r4
 800b516:	bf0c      	ite	eq
 800b518:	f8c8 2000 	streq.w	r2, [r8]
 800b51c:	605a      	strne	r2, [r3, #4]
 800b51e:	e7eb      	b.n	800b4f8 <_malloc_r+0xa8>
 800b520:	4623      	mov	r3, r4
 800b522:	6864      	ldr	r4, [r4, #4]
 800b524:	e7ae      	b.n	800b484 <_malloc_r+0x34>
 800b526:	463c      	mov	r4, r7
 800b528:	687f      	ldr	r7, [r7, #4]
 800b52a:	e7b6      	b.n	800b49a <_malloc_r+0x4a>
 800b52c:	461a      	mov	r2, r3
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	42a3      	cmp	r3, r4
 800b532:	d1fb      	bne.n	800b52c <_malloc_r+0xdc>
 800b534:	2300      	movs	r3, #0
 800b536:	6053      	str	r3, [r2, #4]
 800b538:	e7de      	b.n	800b4f8 <_malloc_r+0xa8>
 800b53a:	230c      	movs	r3, #12
 800b53c:	6033      	str	r3, [r6, #0]
 800b53e:	4630      	mov	r0, r6
 800b540:	f000 f80c 	bl	800b55c <__malloc_unlock>
 800b544:	e794      	b.n	800b470 <_malloc_r+0x20>
 800b546:	6005      	str	r5, [r0, #0]
 800b548:	e7d6      	b.n	800b4f8 <_malloc_r+0xa8>
 800b54a:	bf00      	nop
 800b54c:	20004570 	.word	0x20004570

0800b550 <__malloc_lock>:
 800b550:	4801      	ldr	r0, [pc, #4]	@ (800b558 <__malloc_lock+0x8>)
 800b552:	f7ff b8ac 	b.w	800a6ae <__retarget_lock_acquire_recursive>
 800b556:	bf00      	nop
 800b558:	20004568 	.word	0x20004568

0800b55c <__malloc_unlock>:
 800b55c:	4801      	ldr	r0, [pc, #4]	@ (800b564 <__malloc_unlock+0x8>)
 800b55e:	f7ff b8a7 	b.w	800a6b0 <__retarget_lock_release_recursive>
 800b562:	bf00      	nop
 800b564:	20004568 	.word	0x20004568

0800b568 <_Balloc>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	69c6      	ldr	r6, [r0, #28]
 800b56c:	4604      	mov	r4, r0
 800b56e:	460d      	mov	r5, r1
 800b570:	b976      	cbnz	r6, 800b590 <_Balloc+0x28>
 800b572:	2010      	movs	r0, #16
 800b574:	f7ff ff42 	bl	800b3fc <malloc>
 800b578:	4602      	mov	r2, r0
 800b57a:	61e0      	str	r0, [r4, #28]
 800b57c:	b920      	cbnz	r0, 800b588 <_Balloc+0x20>
 800b57e:	4b18      	ldr	r3, [pc, #96]	@ (800b5e0 <_Balloc+0x78>)
 800b580:	4818      	ldr	r0, [pc, #96]	@ (800b5e4 <_Balloc+0x7c>)
 800b582:	216b      	movs	r1, #107	@ 0x6b
 800b584:	f000 fda0 	bl	800c0c8 <__assert_func>
 800b588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b58c:	6006      	str	r6, [r0, #0]
 800b58e:	60c6      	str	r6, [r0, #12]
 800b590:	69e6      	ldr	r6, [r4, #28]
 800b592:	68f3      	ldr	r3, [r6, #12]
 800b594:	b183      	cbz	r3, 800b5b8 <_Balloc+0x50>
 800b596:	69e3      	ldr	r3, [r4, #28]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b59e:	b9b8      	cbnz	r0, 800b5d0 <_Balloc+0x68>
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	fa01 f605 	lsl.w	r6, r1, r5
 800b5a6:	1d72      	adds	r2, r6, #5
 800b5a8:	0092      	lsls	r2, r2, #2
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 fdaa 	bl	800c104 <_calloc_r>
 800b5b0:	b160      	cbz	r0, 800b5cc <_Balloc+0x64>
 800b5b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5b6:	e00e      	b.n	800b5d6 <_Balloc+0x6e>
 800b5b8:	2221      	movs	r2, #33	@ 0x21
 800b5ba:	2104      	movs	r1, #4
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 fda1 	bl	800c104 <_calloc_r>
 800b5c2:	69e3      	ldr	r3, [r4, #28]
 800b5c4:	60f0      	str	r0, [r6, #12]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1e4      	bne.n	800b596 <_Balloc+0x2e>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	bd70      	pop	{r4, r5, r6, pc}
 800b5d0:	6802      	ldr	r2, [r0, #0]
 800b5d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5dc:	e7f7      	b.n	800b5ce <_Balloc+0x66>
 800b5de:	bf00      	nop
 800b5e0:	0800d821 	.word	0x0800d821
 800b5e4:	0800d8a1 	.word	0x0800d8a1

0800b5e8 <_Bfree>:
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	69c6      	ldr	r6, [r0, #28]
 800b5ec:	4605      	mov	r5, r0
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	b976      	cbnz	r6, 800b610 <_Bfree+0x28>
 800b5f2:	2010      	movs	r0, #16
 800b5f4:	f7ff ff02 	bl	800b3fc <malloc>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	61e8      	str	r0, [r5, #28]
 800b5fc:	b920      	cbnz	r0, 800b608 <_Bfree+0x20>
 800b5fe:	4b09      	ldr	r3, [pc, #36]	@ (800b624 <_Bfree+0x3c>)
 800b600:	4809      	ldr	r0, [pc, #36]	@ (800b628 <_Bfree+0x40>)
 800b602:	218f      	movs	r1, #143	@ 0x8f
 800b604:	f000 fd60 	bl	800c0c8 <__assert_func>
 800b608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b60c:	6006      	str	r6, [r0, #0]
 800b60e:	60c6      	str	r6, [r0, #12]
 800b610:	b13c      	cbz	r4, 800b622 <_Bfree+0x3a>
 800b612:	69eb      	ldr	r3, [r5, #28]
 800b614:	6862      	ldr	r2, [r4, #4]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b61c:	6021      	str	r1, [r4, #0]
 800b61e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	0800d821 	.word	0x0800d821
 800b628:	0800d8a1 	.word	0x0800d8a1

0800b62c <__multadd>:
 800b62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b630:	690d      	ldr	r5, [r1, #16]
 800b632:	4607      	mov	r7, r0
 800b634:	460c      	mov	r4, r1
 800b636:	461e      	mov	r6, r3
 800b638:	f101 0c14 	add.w	ip, r1, #20
 800b63c:	2000      	movs	r0, #0
 800b63e:	f8dc 3000 	ldr.w	r3, [ip]
 800b642:	b299      	uxth	r1, r3
 800b644:	fb02 6101 	mla	r1, r2, r1, r6
 800b648:	0c1e      	lsrs	r6, r3, #16
 800b64a:	0c0b      	lsrs	r3, r1, #16
 800b64c:	fb02 3306 	mla	r3, r2, r6, r3
 800b650:	b289      	uxth	r1, r1
 800b652:	3001      	adds	r0, #1
 800b654:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b658:	4285      	cmp	r5, r0
 800b65a:	f84c 1b04 	str.w	r1, [ip], #4
 800b65e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b662:	dcec      	bgt.n	800b63e <__multadd+0x12>
 800b664:	b30e      	cbz	r6, 800b6aa <__multadd+0x7e>
 800b666:	68a3      	ldr	r3, [r4, #8]
 800b668:	42ab      	cmp	r3, r5
 800b66a:	dc19      	bgt.n	800b6a0 <__multadd+0x74>
 800b66c:	6861      	ldr	r1, [r4, #4]
 800b66e:	4638      	mov	r0, r7
 800b670:	3101      	adds	r1, #1
 800b672:	f7ff ff79 	bl	800b568 <_Balloc>
 800b676:	4680      	mov	r8, r0
 800b678:	b928      	cbnz	r0, 800b686 <__multadd+0x5a>
 800b67a:	4602      	mov	r2, r0
 800b67c:	4b0c      	ldr	r3, [pc, #48]	@ (800b6b0 <__multadd+0x84>)
 800b67e:	480d      	ldr	r0, [pc, #52]	@ (800b6b4 <__multadd+0x88>)
 800b680:	21ba      	movs	r1, #186	@ 0xba
 800b682:	f000 fd21 	bl	800c0c8 <__assert_func>
 800b686:	6922      	ldr	r2, [r4, #16]
 800b688:	3202      	adds	r2, #2
 800b68a:	f104 010c 	add.w	r1, r4, #12
 800b68e:	0092      	lsls	r2, r2, #2
 800b690:	300c      	adds	r0, #12
 800b692:	f7ff f80e 	bl	800a6b2 <memcpy>
 800b696:	4621      	mov	r1, r4
 800b698:	4638      	mov	r0, r7
 800b69a:	f7ff ffa5 	bl	800b5e8 <_Bfree>
 800b69e:	4644      	mov	r4, r8
 800b6a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6a4:	3501      	adds	r5, #1
 800b6a6:	615e      	str	r6, [r3, #20]
 800b6a8:	6125      	str	r5, [r4, #16]
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b0:	0800d890 	.word	0x0800d890
 800b6b4:	0800d8a1 	.word	0x0800d8a1

0800b6b8 <__hi0bits>:
 800b6b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b6bc:	4603      	mov	r3, r0
 800b6be:	bf36      	itet	cc
 800b6c0:	0403      	lslcc	r3, r0, #16
 800b6c2:	2000      	movcs	r0, #0
 800b6c4:	2010      	movcc	r0, #16
 800b6c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6ca:	bf3c      	itt	cc
 800b6cc:	021b      	lslcc	r3, r3, #8
 800b6ce:	3008      	addcc	r0, #8
 800b6d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6d4:	bf3c      	itt	cc
 800b6d6:	011b      	lslcc	r3, r3, #4
 800b6d8:	3004      	addcc	r0, #4
 800b6da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6de:	bf3c      	itt	cc
 800b6e0:	009b      	lslcc	r3, r3, #2
 800b6e2:	3002      	addcc	r0, #2
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	db05      	blt.n	800b6f4 <__hi0bits+0x3c>
 800b6e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b6ec:	f100 0001 	add.w	r0, r0, #1
 800b6f0:	bf08      	it	eq
 800b6f2:	2020      	moveq	r0, #32
 800b6f4:	4770      	bx	lr

0800b6f6 <__lo0bits>:
 800b6f6:	6803      	ldr	r3, [r0, #0]
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	f013 0007 	ands.w	r0, r3, #7
 800b6fe:	d00b      	beq.n	800b718 <__lo0bits+0x22>
 800b700:	07d9      	lsls	r1, r3, #31
 800b702:	d421      	bmi.n	800b748 <__lo0bits+0x52>
 800b704:	0798      	lsls	r0, r3, #30
 800b706:	bf49      	itett	mi
 800b708:	085b      	lsrmi	r3, r3, #1
 800b70a:	089b      	lsrpl	r3, r3, #2
 800b70c:	2001      	movmi	r0, #1
 800b70e:	6013      	strmi	r3, [r2, #0]
 800b710:	bf5c      	itt	pl
 800b712:	6013      	strpl	r3, [r2, #0]
 800b714:	2002      	movpl	r0, #2
 800b716:	4770      	bx	lr
 800b718:	b299      	uxth	r1, r3
 800b71a:	b909      	cbnz	r1, 800b720 <__lo0bits+0x2a>
 800b71c:	0c1b      	lsrs	r3, r3, #16
 800b71e:	2010      	movs	r0, #16
 800b720:	b2d9      	uxtb	r1, r3
 800b722:	b909      	cbnz	r1, 800b728 <__lo0bits+0x32>
 800b724:	3008      	adds	r0, #8
 800b726:	0a1b      	lsrs	r3, r3, #8
 800b728:	0719      	lsls	r1, r3, #28
 800b72a:	bf04      	itt	eq
 800b72c:	091b      	lsreq	r3, r3, #4
 800b72e:	3004      	addeq	r0, #4
 800b730:	0799      	lsls	r1, r3, #30
 800b732:	bf04      	itt	eq
 800b734:	089b      	lsreq	r3, r3, #2
 800b736:	3002      	addeq	r0, #2
 800b738:	07d9      	lsls	r1, r3, #31
 800b73a:	d403      	bmi.n	800b744 <__lo0bits+0x4e>
 800b73c:	085b      	lsrs	r3, r3, #1
 800b73e:	f100 0001 	add.w	r0, r0, #1
 800b742:	d003      	beq.n	800b74c <__lo0bits+0x56>
 800b744:	6013      	str	r3, [r2, #0]
 800b746:	4770      	bx	lr
 800b748:	2000      	movs	r0, #0
 800b74a:	4770      	bx	lr
 800b74c:	2020      	movs	r0, #32
 800b74e:	4770      	bx	lr

0800b750 <__i2b>:
 800b750:	b510      	push	{r4, lr}
 800b752:	460c      	mov	r4, r1
 800b754:	2101      	movs	r1, #1
 800b756:	f7ff ff07 	bl	800b568 <_Balloc>
 800b75a:	4602      	mov	r2, r0
 800b75c:	b928      	cbnz	r0, 800b76a <__i2b+0x1a>
 800b75e:	4b05      	ldr	r3, [pc, #20]	@ (800b774 <__i2b+0x24>)
 800b760:	4805      	ldr	r0, [pc, #20]	@ (800b778 <__i2b+0x28>)
 800b762:	f240 1145 	movw	r1, #325	@ 0x145
 800b766:	f000 fcaf 	bl	800c0c8 <__assert_func>
 800b76a:	2301      	movs	r3, #1
 800b76c:	6144      	str	r4, [r0, #20]
 800b76e:	6103      	str	r3, [r0, #16]
 800b770:	bd10      	pop	{r4, pc}
 800b772:	bf00      	nop
 800b774:	0800d890 	.word	0x0800d890
 800b778:	0800d8a1 	.word	0x0800d8a1

0800b77c <__multiply>:
 800b77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	4614      	mov	r4, r2
 800b782:	690a      	ldr	r2, [r1, #16]
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	429a      	cmp	r2, r3
 800b788:	bfa8      	it	ge
 800b78a:	4623      	movge	r3, r4
 800b78c:	460f      	mov	r7, r1
 800b78e:	bfa4      	itt	ge
 800b790:	460c      	movge	r4, r1
 800b792:	461f      	movge	r7, r3
 800b794:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b798:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b79c:	68a3      	ldr	r3, [r4, #8]
 800b79e:	6861      	ldr	r1, [r4, #4]
 800b7a0:	eb0a 0609 	add.w	r6, sl, r9
 800b7a4:	42b3      	cmp	r3, r6
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	bfb8      	it	lt
 800b7aa:	3101      	addlt	r1, #1
 800b7ac:	f7ff fedc 	bl	800b568 <_Balloc>
 800b7b0:	b930      	cbnz	r0, 800b7c0 <__multiply+0x44>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	4b44      	ldr	r3, [pc, #272]	@ (800b8c8 <__multiply+0x14c>)
 800b7b6:	4845      	ldr	r0, [pc, #276]	@ (800b8cc <__multiply+0x150>)
 800b7b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b7bc:	f000 fc84 	bl	800c0c8 <__assert_func>
 800b7c0:	f100 0514 	add.w	r5, r0, #20
 800b7c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7c8:	462b      	mov	r3, r5
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	4543      	cmp	r3, r8
 800b7ce:	d321      	bcc.n	800b814 <__multiply+0x98>
 800b7d0:	f107 0114 	add.w	r1, r7, #20
 800b7d4:	f104 0214 	add.w	r2, r4, #20
 800b7d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b7dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b7e0:	9302      	str	r3, [sp, #8]
 800b7e2:	1b13      	subs	r3, r2, r4
 800b7e4:	3b15      	subs	r3, #21
 800b7e6:	f023 0303 	bic.w	r3, r3, #3
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	f104 0715 	add.w	r7, r4, #21
 800b7f0:	42ba      	cmp	r2, r7
 800b7f2:	bf38      	it	cc
 800b7f4:	2304      	movcc	r3, #4
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	9b02      	ldr	r3, [sp, #8]
 800b7fa:	9103      	str	r1, [sp, #12]
 800b7fc:	428b      	cmp	r3, r1
 800b7fe:	d80c      	bhi.n	800b81a <__multiply+0x9e>
 800b800:	2e00      	cmp	r6, #0
 800b802:	dd03      	ble.n	800b80c <__multiply+0x90>
 800b804:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d05b      	beq.n	800b8c4 <__multiply+0x148>
 800b80c:	6106      	str	r6, [r0, #16]
 800b80e:	b005      	add	sp, #20
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	f843 2b04 	str.w	r2, [r3], #4
 800b818:	e7d8      	b.n	800b7cc <__multiply+0x50>
 800b81a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b81e:	f1ba 0f00 	cmp.w	sl, #0
 800b822:	d024      	beq.n	800b86e <__multiply+0xf2>
 800b824:	f104 0e14 	add.w	lr, r4, #20
 800b828:	46a9      	mov	r9, r5
 800b82a:	f04f 0c00 	mov.w	ip, #0
 800b82e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b832:	f8d9 3000 	ldr.w	r3, [r9]
 800b836:	fa1f fb87 	uxth.w	fp, r7
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b840:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b844:	f8d9 7000 	ldr.w	r7, [r9]
 800b848:	4463      	add	r3, ip
 800b84a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b84e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b852:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b856:	b29b      	uxth	r3, r3
 800b858:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b85c:	4572      	cmp	r2, lr
 800b85e:	f849 3b04 	str.w	r3, [r9], #4
 800b862:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b866:	d8e2      	bhi.n	800b82e <__multiply+0xb2>
 800b868:	9b01      	ldr	r3, [sp, #4]
 800b86a:	f845 c003 	str.w	ip, [r5, r3]
 800b86e:	9b03      	ldr	r3, [sp, #12]
 800b870:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b874:	3104      	adds	r1, #4
 800b876:	f1b9 0f00 	cmp.w	r9, #0
 800b87a:	d021      	beq.n	800b8c0 <__multiply+0x144>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	f104 0c14 	add.w	ip, r4, #20
 800b882:	46ae      	mov	lr, r5
 800b884:	f04f 0a00 	mov.w	sl, #0
 800b888:	f8bc b000 	ldrh.w	fp, [ip]
 800b88c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b890:	fb09 770b 	mla	r7, r9, fp, r7
 800b894:	4457      	add	r7, sl
 800b896:	b29b      	uxth	r3, r3
 800b898:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b89c:	f84e 3b04 	str.w	r3, [lr], #4
 800b8a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b8a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8a8:	f8be 3000 	ldrh.w	r3, [lr]
 800b8ac:	fb09 330a 	mla	r3, r9, sl, r3
 800b8b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b8b4:	4562      	cmp	r2, ip
 800b8b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8ba:	d8e5      	bhi.n	800b888 <__multiply+0x10c>
 800b8bc:	9f01      	ldr	r7, [sp, #4]
 800b8be:	51eb      	str	r3, [r5, r7]
 800b8c0:	3504      	adds	r5, #4
 800b8c2:	e799      	b.n	800b7f8 <__multiply+0x7c>
 800b8c4:	3e01      	subs	r6, #1
 800b8c6:	e79b      	b.n	800b800 <__multiply+0x84>
 800b8c8:	0800d890 	.word	0x0800d890
 800b8cc:	0800d8a1 	.word	0x0800d8a1

0800b8d0 <__pow5mult>:
 800b8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8d4:	4615      	mov	r5, r2
 800b8d6:	f012 0203 	ands.w	r2, r2, #3
 800b8da:	4607      	mov	r7, r0
 800b8dc:	460e      	mov	r6, r1
 800b8de:	d007      	beq.n	800b8f0 <__pow5mult+0x20>
 800b8e0:	4c25      	ldr	r4, [pc, #148]	@ (800b978 <__pow5mult+0xa8>)
 800b8e2:	3a01      	subs	r2, #1
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8ea:	f7ff fe9f 	bl	800b62c <__multadd>
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	10ad      	asrs	r5, r5, #2
 800b8f2:	d03d      	beq.n	800b970 <__pow5mult+0xa0>
 800b8f4:	69fc      	ldr	r4, [r7, #28]
 800b8f6:	b97c      	cbnz	r4, 800b918 <__pow5mult+0x48>
 800b8f8:	2010      	movs	r0, #16
 800b8fa:	f7ff fd7f 	bl	800b3fc <malloc>
 800b8fe:	4602      	mov	r2, r0
 800b900:	61f8      	str	r0, [r7, #28]
 800b902:	b928      	cbnz	r0, 800b910 <__pow5mult+0x40>
 800b904:	4b1d      	ldr	r3, [pc, #116]	@ (800b97c <__pow5mult+0xac>)
 800b906:	481e      	ldr	r0, [pc, #120]	@ (800b980 <__pow5mult+0xb0>)
 800b908:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b90c:	f000 fbdc 	bl	800c0c8 <__assert_func>
 800b910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b914:	6004      	str	r4, [r0, #0]
 800b916:	60c4      	str	r4, [r0, #12]
 800b918:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b91c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b920:	b94c      	cbnz	r4, 800b936 <__pow5mult+0x66>
 800b922:	f240 2171 	movw	r1, #625	@ 0x271
 800b926:	4638      	mov	r0, r7
 800b928:	f7ff ff12 	bl	800b750 <__i2b>
 800b92c:	2300      	movs	r3, #0
 800b92e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b932:	4604      	mov	r4, r0
 800b934:	6003      	str	r3, [r0, #0]
 800b936:	f04f 0900 	mov.w	r9, #0
 800b93a:	07eb      	lsls	r3, r5, #31
 800b93c:	d50a      	bpl.n	800b954 <__pow5mult+0x84>
 800b93e:	4631      	mov	r1, r6
 800b940:	4622      	mov	r2, r4
 800b942:	4638      	mov	r0, r7
 800b944:	f7ff ff1a 	bl	800b77c <__multiply>
 800b948:	4631      	mov	r1, r6
 800b94a:	4680      	mov	r8, r0
 800b94c:	4638      	mov	r0, r7
 800b94e:	f7ff fe4b 	bl	800b5e8 <_Bfree>
 800b952:	4646      	mov	r6, r8
 800b954:	106d      	asrs	r5, r5, #1
 800b956:	d00b      	beq.n	800b970 <__pow5mult+0xa0>
 800b958:	6820      	ldr	r0, [r4, #0]
 800b95a:	b938      	cbnz	r0, 800b96c <__pow5mult+0x9c>
 800b95c:	4622      	mov	r2, r4
 800b95e:	4621      	mov	r1, r4
 800b960:	4638      	mov	r0, r7
 800b962:	f7ff ff0b 	bl	800b77c <__multiply>
 800b966:	6020      	str	r0, [r4, #0]
 800b968:	f8c0 9000 	str.w	r9, [r0]
 800b96c:	4604      	mov	r4, r0
 800b96e:	e7e4      	b.n	800b93a <__pow5mult+0x6a>
 800b970:	4630      	mov	r0, r6
 800b972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b976:	bf00      	nop
 800b978:	0800d8fc 	.word	0x0800d8fc
 800b97c:	0800d821 	.word	0x0800d821
 800b980:	0800d8a1 	.word	0x0800d8a1

0800b984 <__lshift>:
 800b984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b988:	460c      	mov	r4, r1
 800b98a:	6849      	ldr	r1, [r1, #4]
 800b98c:	6923      	ldr	r3, [r4, #16]
 800b98e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b992:	68a3      	ldr	r3, [r4, #8]
 800b994:	4607      	mov	r7, r0
 800b996:	4691      	mov	r9, r2
 800b998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b99c:	f108 0601 	add.w	r6, r8, #1
 800b9a0:	42b3      	cmp	r3, r6
 800b9a2:	db0b      	blt.n	800b9bc <__lshift+0x38>
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	f7ff fddf 	bl	800b568 <_Balloc>
 800b9aa:	4605      	mov	r5, r0
 800b9ac:	b948      	cbnz	r0, 800b9c2 <__lshift+0x3e>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	4b28      	ldr	r3, [pc, #160]	@ (800ba54 <__lshift+0xd0>)
 800b9b2:	4829      	ldr	r0, [pc, #164]	@ (800ba58 <__lshift+0xd4>)
 800b9b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b9b8:	f000 fb86 	bl	800c0c8 <__assert_func>
 800b9bc:	3101      	adds	r1, #1
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	e7ee      	b.n	800b9a0 <__lshift+0x1c>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f100 0114 	add.w	r1, r0, #20
 800b9c8:	f100 0210 	add.w	r2, r0, #16
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	4553      	cmp	r3, sl
 800b9d0:	db33      	blt.n	800ba3a <__lshift+0xb6>
 800b9d2:	6920      	ldr	r0, [r4, #16]
 800b9d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9d8:	f104 0314 	add.w	r3, r4, #20
 800b9dc:	f019 091f 	ands.w	r9, r9, #31
 800b9e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9e8:	d02b      	beq.n	800ba42 <__lshift+0xbe>
 800b9ea:	f1c9 0e20 	rsb	lr, r9, #32
 800b9ee:	468a      	mov	sl, r1
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	6818      	ldr	r0, [r3, #0]
 800b9f4:	fa00 f009 	lsl.w	r0, r0, r9
 800b9f8:	4310      	orrs	r0, r2
 800b9fa:	f84a 0b04 	str.w	r0, [sl], #4
 800b9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba02:	459c      	cmp	ip, r3
 800ba04:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba08:	d8f3      	bhi.n	800b9f2 <__lshift+0x6e>
 800ba0a:	ebac 0304 	sub.w	r3, ip, r4
 800ba0e:	3b15      	subs	r3, #21
 800ba10:	f023 0303 	bic.w	r3, r3, #3
 800ba14:	3304      	adds	r3, #4
 800ba16:	f104 0015 	add.w	r0, r4, #21
 800ba1a:	4584      	cmp	ip, r0
 800ba1c:	bf38      	it	cc
 800ba1e:	2304      	movcc	r3, #4
 800ba20:	50ca      	str	r2, [r1, r3]
 800ba22:	b10a      	cbz	r2, 800ba28 <__lshift+0xa4>
 800ba24:	f108 0602 	add.w	r6, r8, #2
 800ba28:	3e01      	subs	r6, #1
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	612e      	str	r6, [r5, #16]
 800ba2e:	4621      	mov	r1, r4
 800ba30:	f7ff fdda 	bl	800b5e8 <_Bfree>
 800ba34:	4628      	mov	r0, r5
 800ba36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba3e:	3301      	adds	r3, #1
 800ba40:	e7c5      	b.n	800b9ce <__lshift+0x4a>
 800ba42:	3904      	subs	r1, #4
 800ba44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba48:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba4c:	459c      	cmp	ip, r3
 800ba4e:	d8f9      	bhi.n	800ba44 <__lshift+0xc0>
 800ba50:	e7ea      	b.n	800ba28 <__lshift+0xa4>
 800ba52:	bf00      	nop
 800ba54:	0800d890 	.word	0x0800d890
 800ba58:	0800d8a1 	.word	0x0800d8a1

0800ba5c <__mcmp>:
 800ba5c:	690a      	ldr	r2, [r1, #16]
 800ba5e:	4603      	mov	r3, r0
 800ba60:	6900      	ldr	r0, [r0, #16]
 800ba62:	1a80      	subs	r0, r0, r2
 800ba64:	b530      	push	{r4, r5, lr}
 800ba66:	d10e      	bne.n	800ba86 <__mcmp+0x2a>
 800ba68:	3314      	adds	r3, #20
 800ba6a:	3114      	adds	r1, #20
 800ba6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba7c:	4295      	cmp	r5, r2
 800ba7e:	d003      	beq.n	800ba88 <__mcmp+0x2c>
 800ba80:	d205      	bcs.n	800ba8e <__mcmp+0x32>
 800ba82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba86:	bd30      	pop	{r4, r5, pc}
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	d3f3      	bcc.n	800ba74 <__mcmp+0x18>
 800ba8c:	e7fb      	b.n	800ba86 <__mcmp+0x2a>
 800ba8e:	2001      	movs	r0, #1
 800ba90:	e7f9      	b.n	800ba86 <__mcmp+0x2a>
	...

0800ba94 <__mdiff>:
 800ba94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	4689      	mov	r9, r1
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	4648      	mov	r0, r9
 800baa0:	4614      	mov	r4, r2
 800baa2:	f7ff ffdb 	bl	800ba5c <__mcmp>
 800baa6:	1e05      	subs	r5, r0, #0
 800baa8:	d112      	bne.n	800bad0 <__mdiff+0x3c>
 800baaa:	4629      	mov	r1, r5
 800baac:	4630      	mov	r0, r6
 800baae:	f7ff fd5b 	bl	800b568 <_Balloc>
 800bab2:	4602      	mov	r2, r0
 800bab4:	b928      	cbnz	r0, 800bac2 <__mdiff+0x2e>
 800bab6:	4b3f      	ldr	r3, [pc, #252]	@ (800bbb4 <__mdiff+0x120>)
 800bab8:	f240 2137 	movw	r1, #567	@ 0x237
 800babc:	483e      	ldr	r0, [pc, #248]	@ (800bbb8 <__mdiff+0x124>)
 800babe:	f000 fb03 	bl	800c0c8 <__assert_func>
 800bac2:	2301      	movs	r3, #1
 800bac4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bac8:	4610      	mov	r0, r2
 800baca:	b003      	add	sp, #12
 800bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad0:	bfbc      	itt	lt
 800bad2:	464b      	movlt	r3, r9
 800bad4:	46a1      	movlt	r9, r4
 800bad6:	4630      	mov	r0, r6
 800bad8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800badc:	bfba      	itte	lt
 800bade:	461c      	movlt	r4, r3
 800bae0:	2501      	movlt	r5, #1
 800bae2:	2500      	movge	r5, #0
 800bae4:	f7ff fd40 	bl	800b568 <_Balloc>
 800bae8:	4602      	mov	r2, r0
 800baea:	b918      	cbnz	r0, 800baf4 <__mdiff+0x60>
 800baec:	4b31      	ldr	r3, [pc, #196]	@ (800bbb4 <__mdiff+0x120>)
 800baee:	f240 2145 	movw	r1, #581	@ 0x245
 800baf2:	e7e3      	b.n	800babc <__mdiff+0x28>
 800baf4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800baf8:	6926      	ldr	r6, [r4, #16]
 800bafa:	60c5      	str	r5, [r0, #12]
 800bafc:	f109 0310 	add.w	r3, r9, #16
 800bb00:	f109 0514 	add.w	r5, r9, #20
 800bb04:	f104 0e14 	add.w	lr, r4, #20
 800bb08:	f100 0b14 	add.w	fp, r0, #20
 800bb0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	46d9      	mov	r9, fp
 800bb18:	f04f 0c00 	mov.w	ip, #0
 800bb1c:	9b01      	ldr	r3, [sp, #4]
 800bb1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bb22:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bb26:	9301      	str	r3, [sp, #4]
 800bb28:	fa1f f38a 	uxth.w	r3, sl
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	b283      	uxth	r3, r0
 800bb30:	1acb      	subs	r3, r1, r3
 800bb32:	0c00      	lsrs	r0, r0, #16
 800bb34:	4463      	add	r3, ip
 800bb36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb44:	4576      	cmp	r6, lr
 800bb46:	f849 3b04 	str.w	r3, [r9], #4
 800bb4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb4e:	d8e5      	bhi.n	800bb1c <__mdiff+0x88>
 800bb50:	1b33      	subs	r3, r6, r4
 800bb52:	3b15      	subs	r3, #21
 800bb54:	f023 0303 	bic.w	r3, r3, #3
 800bb58:	3415      	adds	r4, #21
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	42a6      	cmp	r6, r4
 800bb5e:	bf38      	it	cc
 800bb60:	2304      	movcc	r3, #4
 800bb62:	441d      	add	r5, r3
 800bb64:	445b      	add	r3, fp
 800bb66:	461e      	mov	r6, r3
 800bb68:	462c      	mov	r4, r5
 800bb6a:	4544      	cmp	r4, r8
 800bb6c:	d30e      	bcc.n	800bb8c <__mdiff+0xf8>
 800bb6e:	f108 0103 	add.w	r1, r8, #3
 800bb72:	1b49      	subs	r1, r1, r5
 800bb74:	f021 0103 	bic.w	r1, r1, #3
 800bb78:	3d03      	subs	r5, #3
 800bb7a:	45a8      	cmp	r8, r5
 800bb7c:	bf38      	it	cc
 800bb7e:	2100      	movcc	r1, #0
 800bb80:	440b      	add	r3, r1
 800bb82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb86:	b191      	cbz	r1, 800bbae <__mdiff+0x11a>
 800bb88:	6117      	str	r7, [r2, #16]
 800bb8a:	e79d      	b.n	800bac8 <__mdiff+0x34>
 800bb8c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bb90:	46e6      	mov	lr, ip
 800bb92:	0c08      	lsrs	r0, r1, #16
 800bb94:	fa1c fc81 	uxtah	ip, ip, r1
 800bb98:	4471      	add	r1, lr
 800bb9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb9e:	b289      	uxth	r1, r1
 800bba0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bba4:	f846 1b04 	str.w	r1, [r6], #4
 800bba8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbac:	e7dd      	b.n	800bb6a <__mdiff+0xd6>
 800bbae:	3f01      	subs	r7, #1
 800bbb0:	e7e7      	b.n	800bb82 <__mdiff+0xee>
 800bbb2:	bf00      	nop
 800bbb4:	0800d890 	.word	0x0800d890
 800bbb8:	0800d8a1 	.word	0x0800d8a1

0800bbbc <__d2b>:
 800bbbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	ec59 8b10 	vmov	r8, r9, d0
 800bbc8:	4616      	mov	r6, r2
 800bbca:	f7ff fccd 	bl	800b568 <_Balloc>
 800bbce:	4604      	mov	r4, r0
 800bbd0:	b930      	cbnz	r0, 800bbe0 <__d2b+0x24>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	4b23      	ldr	r3, [pc, #140]	@ (800bc64 <__d2b+0xa8>)
 800bbd6:	4824      	ldr	r0, [pc, #144]	@ (800bc68 <__d2b+0xac>)
 800bbd8:	f240 310f 	movw	r1, #783	@ 0x30f
 800bbdc:	f000 fa74 	bl	800c0c8 <__assert_func>
 800bbe0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbe4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbe8:	b10d      	cbz	r5, 800bbee <__d2b+0x32>
 800bbea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbee:	9301      	str	r3, [sp, #4]
 800bbf0:	f1b8 0300 	subs.w	r3, r8, #0
 800bbf4:	d023      	beq.n	800bc3e <__d2b+0x82>
 800bbf6:	4668      	mov	r0, sp
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	f7ff fd7c 	bl	800b6f6 <__lo0bits>
 800bbfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc02:	b1d0      	cbz	r0, 800bc3a <__d2b+0x7e>
 800bc04:	f1c0 0320 	rsb	r3, r0, #32
 800bc08:	fa02 f303 	lsl.w	r3, r2, r3
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	40c2      	lsrs	r2, r0
 800bc10:	6163      	str	r3, [r4, #20]
 800bc12:	9201      	str	r2, [sp, #4]
 800bc14:	9b01      	ldr	r3, [sp, #4]
 800bc16:	61a3      	str	r3, [r4, #24]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bf0c      	ite	eq
 800bc1c:	2201      	moveq	r2, #1
 800bc1e:	2202      	movne	r2, #2
 800bc20:	6122      	str	r2, [r4, #16]
 800bc22:	b1a5      	cbz	r5, 800bc4e <__d2b+0x92>
 800bc24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc28:	4405      	add	r5, r0
 800bc2a:	603d      	str	r5, [r7, #0]
 800bc2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc30:	6030      	str	r0, [r6, #0]
 800bc32:	4620      	mov	r0, r4
 800bc34:	b003      	add	sp, #12
 800bc36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc3a:	6161      	str	r1, [r4, #20]
 800bc3c:	e7ea      	b.n	800bc14 <__d2b+0x58>
 800bc3e:	a801      	add	r0, sp, #4
 800bc40:	f7ff fd59 	bl	800b6f6 <__lo0bits>
 800bc44:	9b01      	ldr	r3, [sp, #4]
 800bc46:	6163      	str	r3, [r4, #20]
 800bc48:	3020      	adds	r0, #32
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	e7e8      	b.n	800bc20 <__d2b+0x64>
 800bc4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc56:	6038      	str	r0, [r7, #0]
 800bc58:	6918      	ldr	r0, [r3, #16]
 800bc5a:	f7ff fd2d 	bl	800b6b8 <__hi0bits>
 800bc5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc62:	e7e5      	b.n	800bc30 <__d2b+0x74>
 800bc64:	0800d890 	.word	0x0800d890
 800bc68:	0800d8a1 	.word	0x0800d8a1

0800bc6c <__ssputs_r>:
 800bc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc70:	688e      	ldr	r6, [r1, #8]
 800bc72:	461f      	mov	r7, r3
 800bc74:	42be      	cmp	r6, r7
 800bc76:	680b      	ldr	r3, [r1, #0]
 800bc78:	4682      	mov	sl, r0
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	4690      	mov	r8, r2
 800bc7e:	d82d      	bhi.n	800bcdc <__ssputs_r+0x70>
 800bc80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc88:	d026      	beq.n	800bcd8 <__ssputs_r+0x6c>
 800bc8a:	6965      	ldr	r5, [r4, #20]
 800bc8c:	6909      	ldr	r1, [r1, #16]
 800bc8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc92:	eba3 0901 	sub.w	r9, r3, r1
 800bc96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc9a:	1c7b      	adds	r3, r7, #1
 800bc9c:	444b      	add	r3, r9
 800bc9e:	106d      	asrs	r5, r5, #1
 800bca0:	429d      	cmp	r5, r3
 800bca2:	bf38      	it	cc
 800bca4:	461d      	movcc	r5, r3
 800bca6:	0553      	lsls	r3, r2, #21
 800bca8:	d527      	bpl.n	800bcfa <__ssputs_r+0x8e>
 800bcaa:	4629      	mov	r1, r5
 800bcac:	f7ff fbd0 	bl	800b450 <_malloc_r>
 800bcb0:	4606      	mov	r6, r0
 800bcb2:	b360      	cbz	r0, 800bd0e <__ssputs_r+0xa2>
 800bcb4:	6921      	ldr	r1, [r4, #16]
 800bcb6:	464a      	mov	r2, r9
 800bcb8:	f7fe fcfb 	bl	800a6b2 <memcpy>
 800bcbc:	89a3      	ldrh	r3, [r4, #12]
 800bcbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bcc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcc6:	81a3      	strh	r3, [r4, #12]
 800bcc8:	6126      	str	r6, [r4, #16]
 800bcca:	6165      	str	r5, [r4, #20]
 800bccc:	444e      	add	r6, r9
 800bcce:	eba5 0509 	sub.w	r5, r5, r9
 800bcd2:	6026      	str	r6, [r4, #0]
 800bcd4:	60a5      	str	r5, [r4, #8]
 800bcd6:	463e      	mov	r6, r7
 800bcd8:	42be      	cmp	r6, r7
 800bcda:	d900      	bls.n	800bcde <__ssputs_r+0x72>
 800bcdc:	463e      	mov	r6, r7
 800bcde:	6820      	ldr	r0, [r4, #0]
 800bce0:	4632      	mov	r2, r6
 800bce2:	4641      	mov	r1, r8
 800bce4:	f000 f9c6 	bl	800c074 <memmove>
 800bce8:	68a3      	ldr	r3, [r4, #8]
 800bcea:	1b9b      	subs	r3, r3, r6
 800bcec:	60a3      	str	r3, [r4, #8]
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	4433      	add	r3, r6
 800bcf2:	6023      	str	r3, [r4, #0]
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcfa:	462a      	mov	r2, r5
 800bcfc:	f000 fa28 	bl	800c150 <_realloc_r>
 800bd00:	4606      	mov	r6, r0
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d1e0      	bne.n	800bcc8 <__ssputs_r+0x5c>
 800bd06:	6921      	ldr	r1, [r4, #16]
 800bd08:	4650      	mov	r0, sl
 800bd0a:	f7ff fb2d 	bl	800b368 <_free_r>
 800bd0e:	230c      	movs	r3, #12
 800bd10:	f8ca 3000 	str.w	r3, [sl]
 800bd14:	89a3      	ldrh	r3, [r4, #12]
 800bd16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd1a:	81a3      	strh	r3, [r4, #12]
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd20:	e7e9      	b.n	800bcf6 <__ssputs_r+0x8a>
	...

0800bd24 <_svfiprintf_r>:
 800bd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd28:	4698      	mov	r8, r3
 800bd2a:	898b      	ldrh	r3, [r1, #12]
 800bd2c:	061b      	lsls	r3, r3, #24
 800bd2e:	b09d      	sub	sp, #116	@ 0x74
 800bd30:	4607      	mov	r7, r0
 800bd32:	460d      	mov	r5, r1
 800bd34:	4614      	mov	r4, r2
 800bd36:	d510      	bpl.n	800bd5a <_svfiprintf_r+0x36>
 800bd38:	690b      	ldr	r3, [r1, #16]
 800bd3a:	b973      	cbnz	r3, 800bd5a <_svfiprintf_r+0x36>
 800bd3c:	2140      	movs	r1, #64	@ 0x40
 800bd3e:	f7ff fb87 	bl	800b450 <_malloc_r>
 800bd42:	6028      	str	r0, [r5, #0]
 800bd44:	6128      	str	r0, [r5, #16]
 800bd46:	b930      	cbnz	r0, 800bd56 <_svfiprintf_r+0x32>
 800bd48:	230c      	movs	r3, #12
 800bd4a:	603b      	str	r3, [r7, #0]
 800bd4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd50:	b01d      	add	sp, #116	@ 0x74
 800bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd56:	2340      	movs	r3, #64	@ 0x40
 800bd58:	616b      	str	r3, [r5, #20]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd5e:	2320      	movs	r3, #32
 800bd60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd64:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd68:	2330      	movs	r3, #48	@ 0x30
 800bd6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bf08 <_svfiprintf_r+0x1e4>
 800bd6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd72:	f04f 0901 	mov.w	r9, #1
 800bd76:	4623      	mov	r3, r4
 800bd78:	469a      	mov	sl, r3
 800bd7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd7e:	b10a      	cbz	r2, 800bd84 <_svfiprintf_r+0x60>
 800bd80:	2a25      	cmp	r2, #37	@ 0x25
 800bd82:	d1f9      	bne.n	800bd78 <_svfiprintf_r+0x54>
 800bd84:	ebba 0b04 	subs.w	fp, sl, r4
 800bd88:	d00b      	beq.n	800bda2 <_svfiprintf_r+0x7e>
 800bd8a:	465b      	mov	r3, fp
 800bd8c:	4622      	mov	r2, r4
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4638      	mov	r0, r7
 800bd92:	f7ff ff6b 	bl	800bc6c <__ssputs_r>
 800bd96:	3001      	adds	r0, #1
 800bd98:	f000 80a7 	beq.w	800beea <_svfiprintf_r+0x1c6>
 800bd9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd9e:	445a      	add	r2, fp
 800bda0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bda2:	f89a 3000 	ldrb.w	r3, [sl]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f000 809f 	beq.w	800beea <_svfiprintf_r+0x1c6>
 800bdac:	2300      	movs	r3, #0
 800bdae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdb6:	f10a 0a01 	add.w	sl, sl, #1
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	9307      	str	r3, [sp, #28]
 800bdbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdc4:	4654      	mov	r4, sl
 800bdc6:	2205      	movs	r2, #5
 800bdc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdcc:	484e      	ldr	r0, [pc, #312]	@ (800bf08 <_svfiprintf_r+0x1e4>)
 800bdce:	f7f4 f9ff 	bl	80001d0 <memchr>
 800bdd2:	9a04      	ldr	r2, [sp, #16]
 800bdd4:	b9d8      	cbnz	r0, 800be0e <_svfiprintf_r+0xea>
 800bdd6:	06d0      	lsls	r0, r2, #27
 800bdd8:	bf44      	itt	mi
 800bdda:	2320      	movmi	r3, #32
 800bddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bde0:	0711      	lsls	r1, r2, #28
 800bde2:	bf44      	itt	mi
 800bde4:	232b      	movmi	r3, #43	@ 0x2b
 800bde6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdea:	f89a 3000 	ldrb.w	r3, [sl]
 800bdee:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdf0:	d015      	beq.n	800be1e <_svfiprintf_r+0xfa>
 800bdf2:	9a07      	ldr	r2, [sp, #28]
 800bdf4:	4654      	mov	r4, sl
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	f04f 0c0a 	mov.w	ip, #10
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be02:	3b30      	subs	r3, #48	@ 0x30
 800be04:	2b09      	cmp	r3, #9
 800be06:	d94b      	bls.n	800bea0 <_svfiprintf_r+0x17c>
 800be08:	b1b0      	cbz	r0, 800be38 <_svfiprintf_r+0x114>
 800be0a:	9207      	str	r2, [sp, #28]
 800be0c:	e014      	b.n	800be38 <_svfiprintf_r+0x114>
 800be0e:	eba0 0308 	sub.w	r3, r0, r8
 800be12:	fa09 f303 	lsl.w	r3, r9, r3
 800be16:	4313      	orrs	r3, r2
 800be18:	9304      	str	r3, [sp, #16]
 800be1a:	46a2      	mov	sl, r4
 800be1c:	e7d2      	b.n	800bdc4 <_svfiprintf_r+0xa0>
 800be1e:	9b03      	ldr	r3, [sp, #12]
 800be20:	1d19      	adds	r1, r3, #4
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	9103      	str	r1, [sp, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	bfbb      	ittet	lt
 800be2a:	425b      	neglt	r3, r3
 800be2c:	f042 0202 	orrlt.w	r2, r2, #2
 800be30:	9307      	strge	r3, [sp, #28]
 800be32:	9307      	strlt	r3, [sp, #28]
 800be34:	bfb8      	it	lt
 800be36:	9204      	strlt	r2, [sp, #16]
 800be38:	7823      	ldrb	r3, [r4, #0]
 800be3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800be3c:	d10a      	bne.n	800be54 <_svfiprintf_r+0x130>
 800be3e:	7863      	ldrb	r3, [r4, #1]
 800be40:	2b2a      	cmp	r3, #42	@ 0x2a
 800be42:	d132      	bne.n	800beaa <_svfiprintf_r+0x186>
 800be44:	9b03      	ldr	r3, [sp, #12]
 800be46:	1d1a      	adds	r2, r3, #4
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	9203      	str	r2, [sp, #12]
 800be4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be50:	3402      	adds	r4, #2
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bf18 <_svfiprintf_r+0x1f4>
 800be58:	7821      	ldrb	r1, [r4, #0]
 800be5a:	2203      	movs	r2, #3
 800be5c:	4650      	mov	r0, sl
 800be5e:	f7f4 f9b7 	bl	80001d0 <memchr>
 800be62:	b138      	cbz	r0, 800be74 <_svfiprintf_r+0x150>
 800be64:	9b04      	ldr	r3, [sp, #16]
 800be66:	eba0 000a 	sub.w	r0, r0, sl
 800be6a:	2240      	movs	r2, #64	@ 0x40
 800be6c:	4082      	lsls	r2, r0
 800be6e:	4313      	orrs	r3, r2
 800be70:	3401      	adds	r4, #1
 800be72:	9304      	str	r3, [sp, #16]
 800be74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be78:	4824      	ldr	r0, [pc, #144]	@ (800bf0c <_svfiprintf_r+0x1e8>)
 800be7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be7e:	2206      	movs	r2, #6
 800be80:	f7f4 f9a6 	bl	80001d0 <memchr>
 800be84:	2800      	cmp	r0, #0
 800be86:	d036      	beq.n	800bef6 <_svfiprintf_r+0x1d2>
 800be88:	4b21      	ldr	r3, [pc, #132]	@ (800bf10 <_svfiprintf_r+0x1ec>)
 800be8a:	bb1b      	cbnz	r3, 800bed4 <_svfiprintf_r+0x1b0>
 800be8c:	9b03      	ldr	r3, [sp, #12]
 800be8e:	3307      	adds	r3, #7
 800be90:	f023 0307 	bic.w	r3, r3, #7
 800be94:	3308      	adds	r3, #8
 800be96:	9303      	str	r3, [sp, #12]
 800be98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be9a:	4433      	add	r3, r6
 800be9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be9e:	e76a      	b.n	800bd76 <_svfiprintf_r+0x52>
 800bea0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bea4:	460c      	mov	r4, r1
 800bea6:	2001      	movs	r0, #1
 800bea8:	e7a8      	b.n	800bdfc <_svfiprintf_r+0xd8>
 800beaa:	2300      	movs	r3, #0
 800beac:	3401      	adds	r4, #1
 800beae:	9305      	str	r3, [sp, #20]
 800beb0:	4619      	mov	r1, r3
 800beb2:	f04f 0c0a 	mov.w	ip, #10
 800beb6:	4620      	mov	r0, r4
 800beb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bebc:	3a30      	subs	r2, #48	@ 0x30
 800bebe:	2a09      	cmp	r2, #9
 800bec0:	d903      	bls.n	800beca <_svfiprintf_r+0x1a6>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0c6      	beq.n	800be54 <_svfiprintf_r+0x130>
 800bec6:	9105      	str	r1, [sp, #20]
 800bec8:	e7c4      	b.n	800be54 <_svfiprintf_r+0x130>
 800beca:	fb0c 2101 	mla	r1, ip, r1, r2
 800bece:	4604      	mov	r4, r0
 800bed0:	2301      	movs	r3, #1
 800bed2:	e7f0      	b.n	800beb6 <_svfiprintf_r+0x192>
 800bed4:	ab03      	add	r3, sp, #12
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	462a      	mov	r2, r5
 800beda:	4b0e      	ldr	r3, [pc, #56]	@ (800bf14 <_svfiprintf_r+0x1f0>)
 800bedc:	a904      	add	r1, sp, #16
 800bede:	4638      	mov	r0, r7
 800bee0:	f7fd fe20 	bl	8009b24 <_printf_float>
 800bee4:	1c42      	adds	r2, r0, #1
 800bee6:	4606      	mov	r6, r0
 800bee8:	d1d6      	bne.n	800be98 <_svfiprintf_r+0x174>
 800beea:	89ab      	ldrh	r3, [r5, #12]
 800beec:	065b      	lsls	r3, r3, #25
 800beee:	f53f af2d 	bmi.w	800bd4c <_svfiprintf_r+0x28>
 800bef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bef4:	e72c      	b.n	800bd50 <_svfiprintf_r+0x2c>
 800bef6:	ab03      	add	r3, sp, #12
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	462a      	mov	r2, r5
 800befc:	4b05      	ldr	r3, [pc, #20]	@ (800bf14 <_svfiprintf_r+0x1f0>)
 800befe:	a904      	add	r1, sp, #16
 800bf00:	4638      	mov	r0, r7
 800bf02:	f7fe f8a7 	bl	800a054 <_printf_i>
 800bf06:	e7ed      	b.n	800bee4 <_svfiprintf_r+0x1c0>
 800bf08:	0800d9f8 	.word	0x0800d9f8
 800bf0c:	0800da02 	.word	0x0800da02
 800bf10:	08009b25 	.word	0x08009b25
 800bf14:	0800bc6d 	.word	0x0800bc6d
 800bf18:	0800d9fe 	.word	0x0800d9fe

0800bf1c <__sflush_r>:
 800bf1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf24:	0716      	lsls	r6, r2, #28
 800bf26:	4605      	mov	r5, r0
 800bf28:	460c      	mov	r4, r1
 800bf2a:	d454      	bmi.n	800bfd6 <__sflush_r+0xba>
 800bf2c:	684b      	ldr	r3, [r1, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	dc02      	bgt.n	800bf38 <__sflush_r+0x1c>
 800bf32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	dd48      	ble.n	800bfca <__sflush_r+0xae>
 800bf38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf3a:	2e00      	cmp	r6, #0
 800bf3c:	d045      	beq.n	800bfca <__sflush_r+0xae>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf44:	682f      	ldr	r7, [r5, #0]
 800bf46:	6a21      	ldr	r1, [r4, #32]
 800bf48:	602b      	str	r3, [r5, #0]
 800bf4a:	d030      	beq.n	800bfae <__sflush_r+0x92>
 800bf4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	0759      	lsls	r1, r3, #29
 800bf52:	d505      	bpl.n	800bf60 <__sflush_r+0x44>
 800bf54:	6863      	ldr	r3, [r4, #4]
 800bf56:	1ad2      	subs	r2, r2, r3
 800bf58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf5a:	b10b      	cbz	r3, 800bf60 <__sflush_r+0x44>
 800bf5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf5e:	1ad2      	subs	r2, r2, r3
 800bf60:	2300      	movs	r3, #0
 800bf62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf64:	6a21      	ldr	r1, [r4, #32]
 800bf66:	4628      	mov	r0, r5
 800bf68:	47b0      	blx	r6
 800bf6a:	1c43      	adds	r3, r0, #1
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	d106      	bne.n	800bf7e <__sflush_r+0x62>
 800bf70:	6829      	ldr	r1, [r5, #0]
 800bf72:	291d      	cmp	r1, #29
 800bf74:	d82b      	bhi.n	800bfce <__sflush_r+0xb2>
 800bf76:	4a2a      	ldr	r2, [pc, #168]	@ (800c020 <__sflush_r+0x104>)
 800bf78:	410a      	asrs	r2, r1
 800bf7a:	07d6      	lsls	r6, r2, #31
 800bf7c:	d427      	bmi.n	800bfce <__sflush_r+0xb2>
 800bf7e:	2200      	movs	r2, #0
 800bf80:	6062      	str	r2, [r4, #4]
 800bf82:	04d9      	lsls	r1, r3, #19
 800bf84:	6922      	ldr	r2, [r4, #16]
 800bf86:	6022      	str	r2, [r4, #0]
 800bf88:	d504      	bpl.n	800bf94 <__sflush_r+0x78>
 800bf8a:	1c42      	adds	r2, r0, #1
 800bf8c:	d101      	bne.n	800bf92 <__sflush_r+0x76>
 800bf8e:	682b      	ldr	r3, [r5, #0]
 800bf90:	b903      	cbnz	r3, 800bf94 <__sflush_r+0x78>
 800bf92:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf96:	602f      	str	r7, [r5, #0]
 800bf98:	b1b9      	cbz	r1, 800bfca <__sflush_r+0xae>
 800bf9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf9e:	4299      	cmp	r1, r3
 800bfa0:	d002      	beq.n	800bfa8 <__sflush_r+0x8c>
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	f7ff f9e0 	bl	800b368 <_free_r>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfac:	e00d      	b.n	800bfca <__sflush_r+0xae>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	47b0      	blx	r6
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	1c50      	adds	r0, r2, #1
 800bfb8:	d1c9      	bne.n	800bf4e <__sflush_r+0x32>
 800bfba:	682b      	ldr	r3, [r5, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d0c6      	beq.n	800bf4e <__sflush_r+0x32>
 800bfc0:	2b1d      	cmp	r3, #29
 800bfc2:	d001      	beq.n	800bfc8 <__sflush_r+0xac>
 800bfc4:	2b16      	cmp	r3, #22
 800bfc6:	d11e      	bne.n	800c006 <__sflush_r+0xea>
 800bfc8:	602f      	str	r7, [r5, #0]
 800bfca:	2000      	movs	r0, #0
 800bfcc:	e022      	b.n	800c014 <__sflush_r+0xf8>
 800bfce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfd2:	b21b      	sxth	r3, r3
 800bfd4:	e01b      	b.n	800c00e <__sflush_r+0xf2>
 800bfd6:	690f      	ldr	r7, [r1, #16]
 800bfd8:	2f00      	cmp	r7, #0
 800bfda:	d0f6      	beq.n	800bfca <__sflush_r+0xae>
 800bfdc:	0793      	lsls	r3, r2, #30
 800bfde:	680e      	ldr	r6, [r1, #0]
 800bfe0:	bf08      	it	eq
 800bfe2:	694b      	ldreq	r3, [r1, #20]
 800bfe4:	600f      	str	r7, [r1, #0]
 800bfe6:	bf18      	it	ne
 800bfe8:	2300      	movne	r3, #0
 800bfea:	eba6 0807 	sub.w	r8, r6, r7
 800bfee:	608b      	str	r3, [r1, #8]
 800bff0:	f1b8 0f00 	cmp.w	r8, #0
 800bff4:	dde9      	ble.n	800bfca <__sflush_r+0xae>
 800bff6:	6a21      	ldr	r1, [r4, #32]
 800bff8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bffa:	4643      	mov	r3, r8
 800bffc:	463a      	mov	r2, r7
 800bffe:	4628      	mov	r0, r5
 800c000:	47b0      	blx	r6
 800c002:	2800      	cmp	r0, #0
 800c004:	dc08      	bgt.n	800c018 <__sflush_r+0xfc>
 800c006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c00e:	81a3      	strh	r3, [r4, #12]
 800c010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c018:	4407      	add	r7, r0
 800c01a:	eba8 0800 	sub.w	r8, r8, r0
 800c01e:	e7e7      	b.n	800bff0 <__sflush_r+0xd4>
 800c020:	dfbffffe 	.word	0xdfbffffe

0800c024 <_fflush_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	690b      	ldr	r3, [r1, #16]
 800c028:	4605      	mov	r5, r0
 800c02a:	460c      	mov	r4, r1
 800c02c:	b913      	cbnz	r3, 800c034 <_fflush_r+0x10>
 800c02e:	2500      	movs	r5, #0
 800c030:	4628      	mov	r0, r5
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	b118      	cbz	r0, 800c03e <_fflush_r+0x1a>
 800c036:	6a03      	ldr	r3, [r0, #32]
 800c038:	b90b      	cbnz	r3, 800c03e <_fflush_r+0x1a>
 800c03a:	f7fe f9b7 	bl	800a3ac <__sinit>
 800c03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d0f3      	beq.n	800c02e <_fflush_r+0xa>
 800c046:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c048:	07d0      	lsls	r0, r2, #31
 800c04a:	d404      	bmi.n	800c056 <_fflush_r+0x32>
 800c04c:	0599      	lsls	r1, r3, #22
 800c04e:	d402      	bmi.n	800c056 <_fflush_r+0x32>
 800c050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c052:	f7fe fb2c 	bl	800a6ae <__retarget_lock_acquire_recursive>
 800c056:	4628      	mov	r0, r5
 800c058:	4621      	mov	r1, r4
 800c05a:	f7ff ff5f 	bl	800bf1c <__sflush_r>
 800c05e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c060:	07da      	lsls	r2, r3, #31
 800c062:	4605      	mov	r5, r0
 800c064:	d4e4      	bmi.n	800c030 <_fflush_r+0xc>
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	059b      	lsls	r3, r3, #22
 800c06a:	d4e1      	bmi.n	800c030 <_fflush_r+0xc>
 800c06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c06e:	f7fe fb1f 	bl	800a6b0 <__retarget_lock_release_recursive>
 800c072:	e7dd      	b.n	800c030 <_fflush_r+0xc>

0800c074 <memmove>:
 800c074:	4288      	cmp	r0, r1
 800c076:	b510      	push	{r4, lr}
 800c078:	eb01 0402 	add.w	r4, r1, r2
 800c07c:	d902      	bls.n	800c084 <memmove+0x10>
 800c07e:	4284      	cmp	r4, r0
 800c080:	4623      	mov	r3, r4
 800c082:	d807      	bhi.n	800c094 <memmove+0x20>
 800c084:	1e43      	subs	r3, r0, #1
 800c086:	42a1      	cmp	r1, r4
 800c088:	d008      	beq.n	800c09c <memmove+0x28>
 800c08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c092:	e7f8      	b.n	800c086 <memmove+0x12>
 800c094:	4402      	add	r2, r0
 800c096:	4601      	mov	r1, r0
 800c098:	428a      	cmp	r2, r1
 800c09a:	d100      	bne.n	800c09e <memmove+0x2a>
 800c09c:	bd10      	pop	{r4, pc}
 800c09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0a6:	e7f7      	b.n	800c098 <memmove+0x24>

0800c0a8 <_sbrk_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d06      	ldr	r5, [pc, #24]	@ (800c0c4 <_sbrk_r+0x1c>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	602b      	str	r3, [r5, #0]
 800c0b4:	f7f8 f858 	bl	8004168 <_sbrk>
 800c0b8:	1c43      	adds	r3, r0, #1
 800c0ba:	d102      	bne.n	800c0c2 <_sbrk_r+0x1a>
 800c0bc:	682b      	ldr	r3, [r5, #0]
 800c0be:	b103      	cbz	r3, 800c0c2 <_sbrk_r+0x1a>
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}
 800c0c4:	20004564 	.word	0x20004564

0800c0c8 <__assert_func>:
 800c0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0ca:	4614      	mov	r4, r2
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	4b09      	ldr	r3, [pc, #36]	@ (800c0f4 <__assert_func+0x2c>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	68d8      	ldr	r0, [r3, #12]
 800c0d6:	b954      	cbnz	r4, 800c0ee <__assert_func+0x26>
 800c0d8:	4b07      	ldr	r3, [pc, #28]	@ (800c0f8 <__assert_func+0x30>)
 800c0da:	461c      	mov	r4, r3
 800c0dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0e0:	9100      	str	r1, [sp, #0]
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	4905      	ldr	r1, [pc, #20]	@ (800c0fc <__assert_func+0x34>)
 800c0e6:	f000 f86f 	bl	800c1c8 <fiprintf>
 800c0ea:	f000 f87f 	bl	800c1ec <abort>
 800c0ee:	4b04      	ldr	r3, [pc, #16]	@ (800c100 <__assert_func+0x38>)
 800c0f0:	e7f4      	b.n	800c0dc <__assert_func+0x14>
 800c0f2:	bf00      	nop
 800c0f4:	20000030 	.word	0x20000030
 800c0f8:	0800da4e 	.word	0x0800da4e
 800c0fc:	0800da20 	.word	0x0800da20
 800c100:	0800da13 	.word	0x0800da13

0800c104 <_calloc_r>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	fba1 5402 	umull	r5, r4, r1, r2
 800c10a:	b93c      	cbnz	r4, 800c11c <_calloc_r+0x18>
 800c10c:	4629      	mov	r1, r5
 800c10e:	f7ff f99f 	bl	800b450 <_malloc_r>
 800c112:	4606      	mov	r6, r0
 800c114:	b928      	cbnz	r0, 800c122 <_calloc_r+0x1e>
 800c116:	2600      	movs	r6, #0
 800c118:	4630      	mov	r0, r6
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	220c      	movs	r2, #12
 800c11e:	6002      	str	r2, [r0, #0]
 800c120:	e7f9      	b.n	800c116 <_calloc_r+0x12>
 800c122:	462a      	mov	r2, r5
 800c124:	4621      	mov	r1, r4
 800c126:	f7fe f9ee 	bl	800a506 <memset>
 800c12a:	e7f5      	b.n	800c118 <_calloc_r+0x14>

0800c12c <__ascii_mbtowc>:
 800c12c:	b082      	sub	sp, #8
 800c12e:	b901      	cbnz	r1, 800c132 <__ascii_mbtowc+0x6>
 800c130:	a901      	add	r1, sp, #4
 800c132:	b142      	cbz	r2, 800c146 <__ascii_mbtowc+0x1a>
 800c134:	b14b      	cbz	r3, 800c14a <__ascii_mbtowc+0x1e>
 800c136:	7813      	ldrb	r3, [r2, #0]
 800c138:	600b      	str	r3, [r1, #0]
 800c13a:	7812      	ldrb	r2, [r2, #0]
 800c13c:	1e10      	subs	r0, r2, #0
 800c13e:	bf18      	it	ne
 800c140:	2001      	movne	r0, #1
 800c142:	b002      	add	sp, #8
 800c144:	4770      	bx	lr
 800c146:	4610      	mov	r0, r2
 800c148:	e7fb      	b.n	800c142 <__ascii_mbtowc+0x16>
 800c14a:	f06f 0001 	mvn.w	r0, #1
 800c14e:	e7f8      	b.n	800c142 <__ascii_mbtowc+0x16>

0800c150 <_realloc_r>:
 800c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c154:	4680      	mov	r8, r0
 800c156:	4615      	mov	r5, r2
 800c158:	460c      	mov	r4, r1
 800c15a:	b921      	cbnz	r1, 800c166 <_realloc_r+0x16>
 800c15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c160:	4611      	mov	r1, r2
 800c162:	f7ff b975 	b.w	800b450 <_malloc_r>
 800c166:	b92a      	cbnz	r2, 800c174 <_realloc_r+0x24>
 800c168:	f7ff f8fe 	bl	800b368 <_free_r>
 800c16c:	2400      	movs	r4, #0
 800c16e:	4620      	mov	r0, r4
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c174:	f000 f841 	bl	800c1fa <_malloc_usable_size_r>
 800c178:	4285      	cmp	r5, r0
 800c17a:	4606      	mov	r6, r0
 800c17c:	d802      	bhi.n	800c184 <_realloc_r+0x34>
 800c17e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c182:	d8f4      	bhi.n	800c16e <_realloc_r+0x1e>
 800c184:	4629      	mov	r1, r5
 800c186:	4640      	mov	r0, r8
 800c188:	f7ff f962 	bl	800b450 <_malloc_r>
 800c18c:	4607      	mov	r7, r0
 800c18e:	2800      	cmp	r0, #0
 800c190:	d0ec      	beq.n	800c16c <_realloc_r+0x1c>
 800c192:	42b5      	cmp	r5, r6
 800c194:	462a      	mov	r2, r5
 800c196:	4621      	mov	r1, r4
 800c198:	bf28      	it	cs
 800c19a:	4632      	movcs	r2, r6
 800c19c:	f7fe fa89 	bl	800a6b2 <memcpy>
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	4640      	mov	r0, r8
 800c1a4:	f7ff f8e0 	bl	800b368 <_free_r>
 800c1a8:	463c      	mov	r4, r7
 800c1aa:	e7e0      	b.n	800c16e <_realloc_r+0x1e>

0800c1ac <__ascii_wctomb>:
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	4608      	mov	r0, r1
 800c1b0:	b141      	cbz	r1, 800c1c4 <__ascii_wctomb+0x18>
 800c1b2:	2aff      	cmp	r2, #255	@ 0xff
 800c1b4:	d904      	bls.n	800c1c0 <__ascii_wctomb+0x14>
 800c1b6:	228a      	movs	r2, #138	@ 0x8a
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1be:	4770      	bx	lr
 800c1c0:	700a      	strb	r2, [r1, #0]
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <fiprintf>:
 800c1c8:	b40e      	push	{r1, r2, r3}
 800c1ca:	b503      	push	{r0, r1, lr}
 800c1cc:	4601      	mov	r1, r0
 800c1ce:	ab03      	add	r3, sp, #12
 800c1d0:	4805      	ldr	r0, [pc, #20]	@ (800c1e8 <fiprintf+0x20>)
 800c1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1d6:	6800      	ldr	r0, [r0, #0]
 800c1d8:	9301      	str	r3, [sp, #4]
 800c1da:	f000 f83f 	bl	800c25c <_vfiprintf_r>
 800c1de:	b002      	add	sp, #8
 800c1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1e4:	b003      	add	sp, #12
 800c1e6:	4770      	bx	lr
 800c1e8:	20000030 	.word	0x20000030

0800c1ec <abort>:
 800c1ec:	b508      	push	{r3, lr}
 800c1ee:	2006      	movs	r0, #6
 800c1f0:	f000 fa08 	bl	800c604 <raise>
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	f7f7 ff3f 	bl	8004078 <_exit>

0800c1fa <_malloc_usable_size_r>:
 800c1fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1fe:	1f18      	subs	r0, r3, #4
 800c200:	2b00      	cmp	r3, #0
 800c202:	bfbc      	itt	lt
 800c204:	580b      	ldrlt	r3, [r1, r0]
 800c206:	18c0      	addlt	r0, r0, r3
 800c208:	4770      	bx	lr

0800c20a <__sfputc_r>:
 800c20a:	6893      	ldr	r3, [r2, #8]
 800c20c:	3b01      	subs	r3, #1
 800c20e:	2b00      	cmp	r3, #0
 800c210:	b410      	push	{r4}
 800c212:	6093      	str	r3, [r2, #8]
 800c214:	da08      	bge.n	800c228 <__sfputc_r+0x1e>
 800c216:	6994      	ldr	r4, [r2, #24]
 800c218:	42a3      	cmp	r3, r4
 800c21a:	db01      	blt.n	800c220 <__sfputc_r+0x16>
 800c21c:	290a      	cmp	r1, #10
 800c21e:	d103      	bne.n	800c228 <__sfputc_r+0x1e>
 800c220:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c224:	f000 b932 	b.w	800c48c <__swbuf_r>
 800c228:	6813      	ldr	r3, [r2, #0]
 800c22a:	1c58      	adds	r0, r3, #1
 800c22c:	6010      	str	r0, [r2, #0]
 800c22e:	7019      	strb	r1, [r3, #0]
 800c230:	4608      	mov	r0, r1
 800c232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <__sfputs_r>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	4606      	mov	r6, r0
 800c23c:	460f      	mov	r7, r1
 800c23e:	4614      	mov	r4, r2
 800c240:	18d5      	adds	r5, r2, r3
 800c242:	42ac      	cmp	r4, r5
 800c244:	d101      	bne.n	800c24a <__sfputs_r+0x12>
 800c246:	2000      	movs	r0, #0
 800c248:	e007      	b.n	800c25a <__sfputs_r+0x22>
 800c24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c24e:	463a      	mov	r2, r7
 800c250:	4630      	mov	r0, r6
 800c252:	f7ff ffda 	bl	800c20a <__sfputc_r>
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	d1f3      	bne.n	800c242 <__sfputs_r+0xa>
 800c25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c25c <_vfiprintf_r>:
 800c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	460d      	mov	r5, r1
 800c262:	b09d      	sub	sp, #116	@ 0x74
 800c264:	4614      	mov	r4, r2
 800c266:	4698      	mov	r8, r3
 800c268:	4606      	mov	r6, r0
 800c26a:	b118      	cbz	r0, 800c274 <_vfiprintf_r+0x18>
 800c26c:	6a03      	ldr	r3, [r0, #32]
 800c26e:	b90b      	cbnz	r3, 800c274 <_vfiprintf_r+0x18>
 800c270:	f7fe f89c 	bl	800a3ac <__sinit>
 800c274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c276:	07d9      	lsls	r1, r3, #31
 800c278:	d405      	bmi.n	800c286 <_vfiprintf_r+0x2a>
 800c27a:	89ab      	ldrh	r3, [r5, #12]
 800c27c:	059a      	lsls	r2, r3, #22
 800c27e:	d402      	bmi.n	800c286 <_vfiprintf_r+0x2a>
 800c280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c282:	f7fe fa14 	bl	800a6ae <__retarget_lock_acquire_recursive>
 800c286:	89ab      	ldrh	r3, [r5, #12]
 800c288:	071b      	lsls	r3, r3, #28
 800c28a:	d501      	bpl.n	800c290 <_vfiprintf_r+0x34>
 800c28c:	692b      	ldr	r3, [r5, #16]
 800c28e:	b99b      	cbnz	r3, 800c2b8 <_vfiprintf_r+0x5c>
 800c290:	4629      	mov	r1, r5
 800c292:	4630      	mov	r0, r6
 800c294:	f000 f938 	bl	800c508 <__swsetup_r>
 800c298:	b170      	cbz	r0, 800c2b8 <_vfiprintf_r+0x5c>
 800c29a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c29c:	07dc      	lsls	r4, r3, #31
 800c29e:	d504      	bpl.n	800c2aa <_vfiprintf_r+0x4e>
 800c2a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2a4:	b01d      	add	sp, #116	@ 0x74
 800c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2aa:	89ab      	ldrh	r3, [r5, #12]
 800c2ac:	0598      	lsls	r0, r3, #22
 800c2ae:	d4f7      	bmi.n	800c2a0 <_vfiprintf_r+0x44>
 800c2b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2b2:	f7fe f9fd 	bl	800a6b0 <__retarget_lock_release_recursive>
 800c2b6:	e7f3      	b.n	800c2a0 <_vfiprintf_r+0x44>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2bc:	2320      	movs	r3, #32
 800c2be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2c6:	2330      	movs	r3, #48	@ 0x30
 800c2c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c478 <_vfiprintf_r+0x21c>
 800c2cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2d0:	f04f 0901 	mov.w	r9, #1
 800c2d4:	4623      	mov	r3, r4
 800c2d6:	469a      	mov	sl, r3
 800c2d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2dc:	b10a      	cbz	r2, 800c2e2 <_vfiprintf_r+0x86>
 800c2de:	2a25      	cmp	r2, #37	@ 0x25
 800c2e0:	d1f9      	bne.n	800c2d6 <_vfiprintf_r+0x7a>
 800c2e2:	ebba 0b04 	subs.w	fp, sl, r4
 800c2e6:	d00b      	beq.n	800c300 <_vfiprintf_r+0xa4>
 800c2e8:	465b      	mov	r3, fp
 800c2ea:	4622      	mov	r2, r4
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	f7ff ffa2 	bl	800c238 <__sfputs_r>
 800c2f4:	3001      	adds	r0, #1
 800c2f6:	f000 80a7 	beq.w	800c448 <_vfiprintf_r+0x1ec>
 800c2fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2fc:	445a      	add	r2, fp
 800c2fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800c300:	f89a 3000 	ldrb.w	r3, [sl]
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 809f 	beq.w	800c448 <_vfiprintf_r+0x1ec>
 800c30a:	2300      	movs	r3, #0
 800c30c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c314:	f10a 0a01 	add.w	sl, sl, #1
 800c318:	9304      	str	r3, [sp, #16]
 800c31a:	9307      	str	r3, [sp, #28]
 800c31c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c320:	931a      	str	r3, [sp, #104]	@ 0x68
 800c322:	4654      	mov	r4, sl
 800c324:	2205      	movs	r2, #5
 800c326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c32a:	4853      	ldr	r0, [pc, #332]	@ (800c478 <_vfiprintf_r+0x21c>)
 800c32c:	f7f3 ff50 	bl	80001d0 <memchr>
 800c330:	9a04      	ldr	r2, [sp, #16]
 800c332:	b9d8      	cbnz	r0, 800c36c <_vfiprintf_r+0x110>
 800c334:	06d1      	lsls	r1, r2, #27
 800c336:	bf44      	itt	mi
 800c338:	2320      	movmi	r3, #32
 800c33a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c33e:	0713      	lsls	r3, r2, #28
 800c340:	bf44      	itt	mi
 800c342:	232b      	movmi	r3, #43	@ 0x2b
 800c344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c348:	f89a 3000 	ldrb.w	r3, [sl]
 800c34c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c34e:	d015      	beq.n	800c37c <_vfiprintf_r+0x120>
 800c350:	9a07      	ldr	r2, [sp, #28]
 800c352:	4654      	mov	r4, sl
 800c354:	2000      	movs	r0, #0
 800c356:	f04f 0c0a 	mov.w	ip, #10
 800c35a:	4621      	mov	r1, r4
 800c35c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c360:	3b30      	subs	r3, #48	@ 0x30
 800c362:	2b09      	cmp	r3, #9
 800c364:	d94b      	bls.n	800c3fe <_vfiprintf_r+0x1a2>
 800c366:	b1b0      	cbz	r0, 800c396 <_vfiprintf_r+0x13a>
 800c368:	9207      	str	r2, [sp, #28]
 800c36a:	e014      	b.n	800c396 <_vfiprintf_r+0x13a>
 800c36c:	eba0 0308 	sub.w	r3, r0, r8
 800c370:	fa09 f303 	lsl.w	r3, r9, r3
 800c374:	4313      	orrs	r3, r2
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	46a2      	mov	sl, r4
 800c37a:	e7d2      	b.n	800c322 <_vfiprintf_r+0xc6>
 800c37c:	9b03      	ldr	r3, [sp, #12]
 800c37e:	1d19      	adds	r1, r3, #4
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	9103      	str	r1, [sp, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	bfbb      	ittet	lt
 800c388:	425b      	neglt	r3, r3
 800c38a:	f042 0202 	orrlt.w	r2, r2, #2
 800c38e:	9307      	strge	r3, [sp, #28]
 800c390:	9307      	strlt	r3, [sp, #28]
 800c392:	bfb8      	it	lt
 800c394:	9204      	strlt	r2, [sp, #16]
 800c396:	7823      	ldrb	r3, [r4, #0]
 800c398:	2b2e      	cmp	r3, #46	@ 0x2e
 800c39a:	d10a      	bne.n	800c3b2 <_vfiprintf_r+0x156>
 800c39c:	7863      	ldrb	r3, [r4, #1]
 800c39e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3a0:	d132      	bne.n	800c408 <_vfiprintf_r+0x1ac>
 800c3a2:	9b03      	ldr	r3, [sp, #12]
 800c3a4:	1d1a      	adds	r2, r3, #4
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	9203      	str	r2, [sp, #12]
 800c3aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3ae:	3402      	adds	r4, #2
 800c3b0:	9305      	str	r3, [sp, #20]
 800c3b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c488 <_vfiprintf_r+0x22c>
 800c3b6:	7821      	ldrb	r1, [r4, #0]
 800c3b8:	2203      	movs	r2, #3
 800c3ba:	4650      	mov	r0, sl
 800c3bc:	f7f3 ff08 	bl	80001d0 <memchr>
 800c3c0:	b138      	cbz	r0, 800c3d2 <_vfiprintf_r+0x176>
 800c3c2:	9b04      	ldr	r3, [sp, #16]
 800c3c4:	eba0 000a 	sub.w	r0, r0, sl
 800c3c8:	2240      	movs	r2, #64	@ 0x40
 800c3ca:	4082      	lsls	r2, r0
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	3401      	adds	r4, #1
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d6:	4829      	ldr	r0, [pc, #164]	@ (800c47c <_vfiprintf_r+0x220>)
 800c3d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3dc:	2206      	movs	r2, #6
 800c3de:	f7f3 fef7 	bl	80001d0 <memchr>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d03f      	beq.n	800c466 <_vfiprintf_r+0x20a>
 800c3e6:	4b26      	ldr	r3, [pc, #152]	@ (800c480 <_vfiprintf_r+0x224>)
 800c3e8:	bb1b      	cbnz	r3, 800c432 <_vfiprintf_r+0x1d6>
 800c3ea:	9b03      	ldr	r3, [sp, #12]
 800c3ec:	3307      	adds	r3, #7
 800c3ee:	f023 0307 	bic.w	r3, r3, #7
 800c3f2:	3308      	adds	r3, #8
 800c3f4:	9303      	str	r3, [sp, #12]
 800c3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3f8:	443b      	add	r3, r7
 800c3fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3fc:	e76a      	b.n	800c2d4 <_vfiprintf_r+0x78>
 800c3fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800c402:	460c      	mov	r4, r1
 800c404:	2001      	movs	r0, #1
 800c406:	e7a8      	b.n	800c35a <_vfiprintf_r+0xfe>
 800c408:	2300      	movs	r3, #0
 800c40a:	3401      	adds	r4, #1
 800c40c:	9305      	str	r3, [sp, #20]
 800c40e:	4619      	mov	r1, r3
 800c410:	f04f 0c0a 	mov.w	ip, #10
 800c414:	4620      	mov	r0, r4
 800c416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c41a:	3a30      	subs	r2, #48	@ 0x30
 800c41c:	2a09      	cmp	r2, #9
 800c41e:	d903      	bls.n	800c428 <_vfiprintf_r+0x1cc>
 800c420:	2b00      	cmp	r3, #0
 800c422:	d0c6      	beq.n	800c3b2 <_vfiprintf_r+0x156>
 800c424:	9105      	str	r1, [sp, #20]
 800c426:	e7c4      	b.n	800c3b2 <_vfiprintf_r+0x156>
 800c428:	fb0c 2101 	mla	r1, ip, r1, r2
 800c42c:	4604      	mov	r4, r0
 800c42e:	2301      	movs	r3, #1
 800c430:	e7f0      	b.n	800c414 <_vfiprintf_r+0x1b8>
 800c432:	ab03      	add	r3, sp, #12
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	462a      	mov	r2, r5
 800c438:	4b12      	ldr	r3, [pc, #72]	@ (800c484 <_vfiprintf_r+0x228>)
 800c43a:	a904      	add	r1, sp, #16
 800c43c:	4630      	mov	r0, r6
 800c43e:	f7fd fb71 	bl	8009b24 <_printf_float>
 800c442:	4607      	mov	r7, r0
 800c444:	1c78      	adds	r0, r7, #1
 800c446:	d1d6      	bne.n	800c3f6 <_vfiprintf_r+0x19a>
 800c448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c44a:	07d9      	lsls	r1, r3, #31
 800c44c:	d405      	bmi.n	800c45a <_vfiprintf_r+0x1fe>
 800c44e:	89ab      	ldrh	r3, [r5, #12]
 800c450:	059a      	lsls	r2, r3, #22
 800c452:	d402      	bmi.n	800c45a <_vfiprintf_r+0x1fe>
 800c454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c456:	f7fe f92b 	bl	800a6b0 <__retarget_lock_release_recursive>
 800c45a:	89ab      	ldrh	r3, [r5, #12]
 800c45c:	065b      	lsls	r3, r3, #25
 800c45e:	f53f af1f 	bmi.w	800c2a0 <_vfiprintf_r+0x44>
 800c462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c464:	e71e      	b.n	800c2a4 <_vfiprintf_r+0x48>
 800c466:	ab03      	add	r3, sp, #12
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	462a      	mov	r2, r5
 800c46c:	4b05      	ldr	r3, [pc, #20]	@ (800c484 <_vfiprintf_r+0x228>)
 800c46e:	a904      	add	r1, sp, #16
 800c470:	4630      	mov	r0, r6
 800c472:	f7fd fdef 	bl	800a054 <_printf_i>
 800c476:	e7e4      	b.n	800c442 <_vfiprintf_r+0x1e6>
 800c478:	0800d9f8 	.word	0x0800d9f8
 800c47c:	0800da02 	.word	0x0800da02
 800c480:	08009b25 	.word	0x08009b25
 800c484:	0800c239 	.word	0x0800c239
 800c488:	0800d9fe 	.word	0x0800d9fe

0800c48c <__swbuf_r>:
 800c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48e:	460e      	mov	r6, r1
 800c490:	4614      	mov	r4, r2
 800c492:	4605      	mov	r5, r0
 800c494:	b118      	cbz	r0, 800c49e <__swbuf_r+0x12>
 800c496:	6a03      	ldr	r3, [r0, #32]
 800c498:	b90b      	cbnz	r3, 800c49e <__swbuf_r+0x12>
 800c49a:	f7fd ff87 	bl	800a3ac <__sinit>
 800c49e:	69a3      	ldr	r3, [r4, #24]
 800c4a0:	60a3      	str	r3, [r4, #8]
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	071a      	lsls	r2, r3, #28
 800c4a6:	d501      	bpl.n	800c4ac <__swbuf_r+0x20>
 800c4a8:	6923      	ldr	r3, [r4, #16]
 800c4aa:	b943      	cbnz	r3, 800c4be <__swbuf_r+0x32>
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f000 f82a 	bl	800c508 <__swsetup_r>
 800c4b4:	b118      	cbz	r0, 800c4be <__swbuf_r+0x32>
 800c4b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	6922      	ldr	r2, [r4, #16]
 800c4c2:	1a98      	subs	r0, r3, r2
 800c4c4:	6963      	ldr	r3, [r4, #20]
 800c4c6:	b2f6      	uxtb	r6, r6
 800c4c8:	4283      	cmp	r3, r0
 800c4ca:	4637      	mov	r7, r6
 800c4cc:	dc05      	bgt.n	800c4da <__swbuf_r+0x4e>
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	f7ff fda7 	bl	800c024 <_fflush_r>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d1ed      	bne.n	800c4b6 <__swbuf_r+0x2a>
 800c4da:	68a3      	ldr	r3, [r4, #8]
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	60a3      	str	r3, [r4, #8]
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	1c5a      	adds	r2, r3, #1
 800c4e4:	6022      	str	r2, [r4, #0]
 800c4e6:	701e      	strb	r6, [r3, #0]
 800c4e8:	6962      	ldr	r2, [r4, #20]
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d004      	beq.n	800c4fa <__swbuf_r+0x6e>
 800c4f0:	89a3      	ldrh	r3, [r4, #12]
 800c4f2:	07db      	lsls	r3, r3, #31
 800c4f4:	d5e1      	bpl.n	800c4ba <__swbuf_r+0x2e>
 800c4f6:	2e0a      	cmp	r6, #10
 800c4f8:	d1df      	bne.n	800c4ba <__swbuf_r+0x2e>
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f7ff fd91 	bl	800c024 <_fflush_r>
 800c502:	2800      	cmp	r0, #0
 800c504:	d0d9      	beq.n	800c4ba <__swbuf_r+0x2e>
 800c506:	e7d6      	b.n	800c4b6 <__swbuf_r+0x2a>

0800c508 <__swsetup_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4b29      	ldr	r3, [pc, #164]	@ (800c5b0 <__swsetup_r+0xa8>)
 800c50c:	4605      	mov	r5, r0
 800c50e:	6818      	ldr	r0, [r3, #0]
 800c510:	460c      	mov	r4, r1
 800c512:	b118      	cbz	r0, 800c51c <__swsetup_r+0x14>
 800c514:	6a03      	ldr	r3, [r0, #32]
 800c516:	b90b      	cbnz	r3, 800c51c <__swsetup_r+0x14>
 800c518:	f7fd ff48 	bl	800a3ac <__sinit>
 800c51c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c520:	0719      	lsls	r1, r3, #28
 800c522:	d422      	bmi.n	800c56a <__swsetup_r+0x62>
 800c524:	06da      	lsls	r2, r3, #27
 800c526:	d407      	bmi.n	800c538 <__swsetup_r+0x30>
 800c528:	2209      	movs	r2, #9
 800c52a:	602a      	str	r2, [r5, #0]
 800c52c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c530:	81a3      	strh	r3, [r4, #12]
 800c532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c536:	e033      	b.n	800c5a0 <__swsetup_r+0x98>
 800c538:	0758      	lsls	r0, r3, #29
 800c53a:	d512      	bpl.n	800c562 <__swsetup_r+0x5a>
 800c53c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c53e:	b141      	cbz	r1, 800c552 <__swsetup_r+0x4a>
 800c540:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c544:	4299      	cmp	r1, r3
 800c546:	d002      	beq.n	800c54e <__swsetup_r+0x46>
 800c548:	4628      	mov	r0, r5
 800c54a:	f7fe ff0d 	bl	800b368 <_free_r>
 800c54e:	2300      	movs	r3, #0
 800c550:	6363      	str	r3, [r4, #52]	@ 0x34
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c558:	81a3      	strh	r3, [r4, #12]
 800c55a:	2300      	movs	r3, #0
 800c55c:	6063      	str	r3, [r4, #4]
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	89a3      	ldrh	r3, [r4, #12]
 800c564:	f043 0308 	orr.w	r3, r3, #8
 800c568:	81a3      	strh	r3, [r4, #12]
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	b94b      	cbnz	r3, 800c582 <__swsetup_r+0x7a>
 800c56e:	89a3      	ldrh	r3, [r4, #12]
 800c570:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c578:	d003      	beq.n	800c582 <__swsetup_r+0x7a>
 800c57a:	4621      	mov	r1, r4
 800c57c:	4628      	mov	r0, r5
 800c57e:	f000 f883 	bl	800c688 <__smakebuf_r>
 800c582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c586:	f013 0201 	ands.w	r2, r3, #1
 800c58a:	d00a      	beq.n	800c5a2 <__swsetup_r+0x9a>
 800c58c:	2200      	movs	r2, #0
 800c58e:	60a2      	str	r2, [r4, #8]
 800c590:	6962      	ldr	r2, [r4, #20]
 800c592:	4252      	negs	r2, r2
 800c594:	61a2      	str	r2, [r4, #24]
 800c596:	6922      	ldr	r2, [r4, #16]
 800c598:	b942      	cbnz	r2, 800c5ac <__swsetup_r+0xa4>
 800c59a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c59e:	d1c5      	bne.n	800c52c <__swsetup_r+0x24>
 800c5a0:	bd38      	pop	{r3, r4, r5, pc}
 800c5a2:	0799      	lsls	r1, r3, #30
 800c5a4:	bf58      	it	pl
 800c5a6:	6962      	ldrpl	r2, [r4, #20]
 800c5a8:	60a2      	str	r2, [r4, #8]
 800c5aa:	e7f4      	b.n	800c596 <__swsetup_r+0x8e>
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	e7f7      	b.n	800c5a0 <__swsetup_r+0x98>
 800c5b0:	20000030 	.word	0x20000030

0800c5b4 <_raise_r>:
 800c5b4:	291f      	cmp	r1, #31
 800c5b6:	b538      	push	{r3, r4, r5, lr}
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	d904      	bls.n	800c5c8 <_raise_r+0x14>
 800c5be:	2316      	movs	r3, #22
 800c5c0:	6003      	str	r3, [r0, #0]
 800c5c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c5ca:	b112      	cbz	r2, 800c5d2 <_raise_r+0x1e>
 800c5cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5d0:	b94b      	cbnz	r3, 800c5e6 <_raise_r+0x32>
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f000 f830 	bl	800c638 <_getpid_r>
 800c5d8:	4622      	mov	r2, r4
 800c5da:	4601      	mov	r1, r0
 800c5dc:	4628      	mov	r0, r5
 800c5de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5e2:	f000 b817 	b.w	800c614 <_kill_r>
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d00a      	beq.n	800c600 <_raise_r+0x4c>
 800c5ea:	1c59      	adds	r1, r3, #1
 800c5ec:	d103      	bne.n	800c5f6 <_raise_r+0x42>
 800c5ee:	2316      	movs	r3, #22
 800c5f0:	6003      	str	r3, [r0, #0]
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	e7e7      	b.n	800c5c6 <_raise_r+0x12>
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	4798      	blx	r3
 800c600:	2000      	movs	r0, #0
 800c602:	e7e0      	b.n	800c5c6 <_raise_r+0x12>

0800c604 <raise>:
 800c604:	4b02      	ldr	r3, [pc, #8]	@ (800c610 <raise+0xc>)
 800c606:	4601      	mov	r1, r0
 800c608:	6818      	ldr	r0, [r3, #0]
 800c60a:	f7ff bfd3 	b.w	800c5b4 <_raise_r>
 800c60e:	bf00      	nop
 800c610:	20000030 	.word	0x20000030

0800c614 <_kill_r>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	4d07      	ldr	r5, [pc, #28]	@ (800c634 <_kill_r+0x20>)
 800c618:	2300      	movs	r3, #0
 800c61a:	4604      	mov	r4, r0
 800c61c:	4608      	mov	r0, r1
 800c61e:	4611      	mov	r1, r2
 800c620:	602b      	str	r3, [r5, #0]
 800c622:	f7f7 fd19 	bl	8004058 <_kill>
 800c626:	1c43      	adds	r3, r0, #1
 800c628:	d102      	bne.n	800c630 <_kill_r+0x1c>
 800c62a:	682b      	ldr	r3, [r5, #0]
 800c62c:	b103      	cbz	r3, 800c630 <_kill_r+0x1c>
 800c62e:	6023      	str	r3, [r4, #0]
 800c630:	bd38      	pop	{r3, r4, r5, pc}
 800c632:	bf00      	nop
 800c634:	20004564 	.word	0x20004564

0800c638 <_getpid_r>:
 800c638:	f7f7 bd06 	b.w	8004048 <_getpid>

0800c63c <__swhatbuf_r>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	460c      	mov	r4, r1
 800c640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c644:	2900      	cmp	r1, #0
 800c646:	b096      	sub	sp, #88	@ 0x58
 800c648:	4615      	mov	r5, r2
 800c64a:	461e      	mov	r6, r3
 800c64c:	da0d      	bge.n	800c66a <__swhatbuf_r+0x2e>
 800c64e:	89a3      	ldrh	r3, [r4, #12]
 800c650:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c654:	f04f 0100 	mov.w	r1, #0
 800c658:	bf14      	ite	ne
 800c65a:	2340      	movne	r3, #64	@ 0x40
 800c65c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c660:	2000      	movs	r0, #0
 800c662:	6031      	str	r1, [r6, #0]
 800c664:	602b      	str	r3, [r5, #0]
 800c666:	b016      	add	sp, #88	@ 0x58
 800c668:	bd70      	pop	{r4, r5, r6, pc}
 800c66a:	466a      	mov	r2, sp
 800c66c:	f000 f848 	bl	800c700 <_fstat_r>
 800c670:	2800      	cmp	r0, #0
 800c672:	dbec      	blt.n	800c64e <__swhatbuf_r+0x12>
 800c674:	9901      	ldr	r1, [sp, #4]
 800c676:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c67a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c67e:	4259      	negs	r1, r3
 800c680:	4159      	adcs	r1, r3
 800c682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c686:	e7eb      	b.n	800c660 <__swhatbuf_r+0x24>

0800c688 <__smakebuf_r>:
 800c688:	898b      	ldrh	r3, [r1, #12]
 800c68a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c68c:	079d      	lsls	r5, r3, #30
 800c68e:	4606      	mov	r6, r0
 800c690:	460c      	mov	r4, r1
 800c692:	d507      	bpl.n	800c6a4 <__smakebuf_r+0x1c>
 800c694:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	6123      	str	r3, [r4, #16]
 800c69c:	2301      	movs	r3, #1
 800c69e:	6163      	str	r3, [r4, #20]
 800c6a0:	b003      	add	sp, #12
 800c6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a4:	ab01      	add	r3, sp, #4
 800c6a6:	466a      	mov	r2, sp
 800c6a8:	f7ff ffc8 	bl	800c63c <__swhatbuf_r>
 800c6ac:	9f00      	ldr	r7, [sp, #0]
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	f7fe fecc 	bl	800b450 <_malloc_r>
 800c6b8:	b948      	cbnz	r0, 800c6ce <__smakebuf_r+0x46>
 800c6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6be:	059a      	lsls	r2, r3, #22
 800c6c0:	d4ee      	bmi.n	800c6a0 <__smakebuf_r+0x18>
 800c6c2:	f023 0303 	bic.w	r3, r3, #3
 800c6c6:	f043 0302 	orr.w	r3, r3, #2
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	e7e2      	b.n	800c694 <__smakebuf_r+0xc>
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	6020      	str	r0, [r4, #0]
 800c6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6d6:	81a3      	strh	r3, [r4, #12]
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c6de:	b15b      	cbz	r3, 800c6f8 <__smakebuf_r+0x70>
 800c6e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f000 f81d 	bl	800c724 <_isatty_r>
 800c6ea:	b128      	cbz	r0, 800c6f8 <__smakebuf_r+0x70>
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	f023 0303 	bic.w	r3, r3, #3
 800c6f2:	f043 0301 	orr.w	r3, r3, #1
 800c6f6:	81a3      	strh	r3, [r4, #12]
 800c6f8:	89a3      	ldrh	r3, [r4, #12]
 800c6fa:	431d      	orrs	r5, r3
 800c6fc:	81a5      	strh	r5, [r4, #12]
 800c6fe:	e7cf      	b.n	800c6a0 <__smakebuf_r+0x18>

0800c700 <_fstat_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4d07      	ldr	r5, [pc, #28]	@ (800c720 <_fstat_r+0x20>)
 800c704:	2300      	movs	r3, #0
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	602b      	str	r3, [r5, #0]
 800c70e:	f7f7 fd03 	bl	8004118 <_fstat>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	d102      	bne.n	800c71c <_fstat_r+0x1c>
 800c716:	682b      	ldr	r3, [r5, #0]
 800c718:	b103      	cbz	r3, 800c71c <_fstat_r+0x1c>
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	bd38      	pop	{r3, r4, r5, pc}
 800c71e:	bf00      	nop
 800c720:	20004564 	.word	0x20004564

0800c724 <_isatty_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4d06      	ldr	r5, [pc, #24]	@ (800c740 <_isatty_r+0x1c>)
 800c728:	2300      	movs	r3, #0
 800c72a:	4604      	mov	r4, r0
 800c72c:	4608      	mov	r0, r1
 800c72e:	602b      	str	r3, [r5, #0]
 800c730:	f7f7 fd02 	bl	8004138 <_isatty>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d102      	bne.n	800c73e <_isatty_r+0x1a>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	b103      	cbz	r3, 800c73e <_isatty_r+0x1a>
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	bd38      	pop	{r3, r4, r5, pc}
 800c740:	20004564 	.word	0x20004564

0800c744 <pow>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	ed2d 8b02 	vpush	{d8}
 800c74a:	eeb0 8a40 	vmov.f32	s16, s0
 800c74e:	eef0 8a60 	vmov.f32	s17, s1
 800c752:	ec55 4b11 	vmov	r4, r5, d1
 800c756:	f000 f873 	bl	800c840 <__ieee754_pow>
 800c75a:	4622      	mov	r2, r4
 800c75c:	462b      	mov	r3, r5
 800c75e:	4620      	mov	r0, r4
 800c760:	4629      	mov	r1, r5
 800c762:	ec57 6b10 	vmov	r6, r7, d0
 800c766:	f7f4 f9e1 	bl	8000b2c <__aeabi_dcmpun>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d13b      	bne.n	800c7e6 <pow+0xa2>
 800c76e:	ec51 0b18 	vmov	r0, r1, d8
 800c772:	2200      	movs	r2, #0
 800c774:	2300      	movs	r3, #0
 800c776:	f7f4 f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c77a:	b1b8      	cbz	r0, 800c7ac <pow+0x68>
 800c77c:	2200      	movs	r2, #0
 800c77e:	2300      	movs	r3, #0
 800c780:	4620      	mov	r0, r4
 800c782:	4629      	mov	r1, r5
 800c784:	f7f4 f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c788:	2800      	cmp	r0, #0
 800c78a:	d146      	bne.n	800c81a <pow+0xd6>
 800c78c:	ec45 4b10 	vmov	d0, r4, r5
 800c790:	f000 f848 	bl	800c824 <finite>
 800c794:	b338      	cbz	r0, 800c7e6 <pow+0xa2>
 800c796:	2200      	movs	r2, #0
 800c798:	2300      	movs	r3, #0
 800c79a:	4620      	mov	r0, r4
 800c79c:	4629      	mov	r1, r5
 800c79e:	f7f4 f99d 	bl	8000adc <__aeabi_dcmplt>
 800c7a2:	b300      	cbz	r0, 800c7e6 <pow+0xa2>
 800c7a4:	f7fd ff58 	bl	800a658 <__errno>
 800c7a8:	2322      	movs	r3, #34	@ 0x22
 800c7aa:	e01b      	b.n	800c7e4 <pow+0xa0>
 800c7ac:	ec47 6b10 	vmov	d0, r6, r7
 800c7b0:	f000 f838 	bl	800c824 <finite>
 800c7b4:	b9e0      	cbnz	r0, 800c7f0 <pow+0xac>
 800c7b6:	eeb0 0a48 	vmov.f32	s0, s16
 800c7ba:	eef0 0a68 	vmov.f32	s1, s17
 800c7be:	f000 f831 	bl	800c824 <finite>
 800c7c2:	b1a8      	cbz	r0, 800c7f0 <pow+0xac>
 800c7c4:	ec45 4b10 	vmov	d0, r4, r5
 800c7c8:	f000 f82c 	bl	800c824 <finite>
 800c7cc:	b180      	cbz	r0, 800c7f0 <pow+0xac>
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	463b      	mov	r3, r7
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	4639      	mov	r1, r7
 800c7d6:	f7f4 f9a9 	bl	8000b2c <__aeabi_dcmpun>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d0e2      	beq.n	800c7a4 <pow+0x60>
 800c7de:	f7fd ff3b 	bl	800a658 <__errno>
 800c7e2:	2321      	movs	r3, #33	@ 0x21
 800c7e4:	6003      	str	r3, [r0, #0]
 800c7e6:	ecbd 8b02 	vpop	{d8}
 800c7ea:	ec47 6b10 	vmov	d0, r6, r7
 800c7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f4 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d0f2      	beq.n	800c7e6 <pow+0xa2>
 800c800:	eeb0 0a48 	vmov.f32	s0, s16
 800c804:	eef0 0a68 	vmov.f32	s1, s17
 800c808:	f000 f80c 	bl	800c824 <finite>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	d0ea      	beq.n	800c7e6 <pow+0xa2>
 800c810:	ec45 4b10 	vmov	d0, r4, r5
 800c814:	f000 f806 	bl	800c824 <finite>
 800c818:	e7c3      	b.n	800c7a2 <pow+0x5e>
 800c81a:	4f01      	ldr	r7, [pc, #4]	@ (800c820 <pow+0xdc>)
 800c81c:	2600      	movs	r6, #0
 800c81e:	e7e2      	b.n	800c7e6 <pow+0xa2>
 800c820:	3ff00000 	.word	0x3ff00000

0800c824 <finite>:
 800c824:	b082      	sub	sp, #8
 800c826:	ed8d 0b00 	vstr	d0, [sp]
 800c82a:	9801      	ldr	r0, [sp, #4]
 800c82c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c830:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c834:	0fc0      	lsrs	r0, r0, #31
 800c836:	b002      	add	sp, #8
 800c838:	4770      	bx	lr
 800c83a:	0000      	movs	r0, r0
 800c83c:	0000      	movs	r0, r0
	...

0800c840 <__ieee754_pow>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	b091      	sub	sp, #68	@ 0x44
 800c846:	ed8d 1b00 	vstr	d1, [sp]
 800c84a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800c84e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800c852:	ea5a 0001 	orrs.w	r0, sl, r1
 800c856:	ec57 6b10 	vmov	r6, r7, d0
 800c85a:	d113      	bne.n	800c884 <__ieee754_pow+0x44>
 800c85c:	19b3      	adds	r3, r6, r6
 800c85e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c862:	4152      	adcs	r2, r2
 800c864:	4298      	cmp	r0, r3
 800c866:	4b98      	ldr	r3, [pc, #608]	@ (800cac8 <__ieee754_pow+0x288>)
 800c868:	4193      	sbcs	r3, r2
 800c86a:	f080 84ea 	bcs.w	800d242 <__ieee754_pow+0xa02>
 800c86e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	f7f3 fd09 	bl	800028c <__adddf3>
 800c87a:	ec41 0b10 	vmov	d0, r0, r1
 800c87e:	b011      	add	sp, #68	@ 0x44
 800c880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c884:	4a91      	ldr	r2, [pc, #580]	@ (800cacc <__ieee754_pow+0x28c>)
 800c886:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c88a:	4590      	cmp	r8, r2
 800c88c:	463d      	mov	r5, r7
 800c88e:	4633      	mov	r3, r6
 800c890:	d806      	bhi.n	800c8a0 <__ieee754_pow+0x60>
 800c892:	d101      	bne.n	800c898 <__ieee754_pow+0x58>
 800c894:	2e00      	cmp	r6, #0
 800c896:	d1ea      	bne.n	800c86e <__ieee754_pow+0x2e>
 800c898:	4592      	cmp	sl, r2
 800c89a:	d801      	bhi.n	800c8a0 <__ieee754_pow+0x60>
 800c89c:	d10e      	bne.n	800c8bc <__ieee754_pow+0x7c>
 800c89e:	b169      	cbz	r1, 800c8bc <__ieee754_pow+0x7c>
 800c8a0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c8a4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c8a8:	431d      	orrs	r5, r3
 800c8aa:	d1e0      	bne.n	800c86e <__ieee754_pow+0x2e>
 800c8ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c8b0:	18db      	adds	r3, r3, r3
 800c8b2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c8b6:	4152      	adcs	r2, r2
 800c8b8:	429d      	cmp	r5, r3
 800c8ba:	e7d4      	b.n	800c866 <__ieee754_pow+0x26>
 800c8bc:	2d00      	cmp	r5, #0
 800c8be:	46c3      	mov	fp, r8
 800c8c0:	da3a      	bge.n	800c938 <__ieee754_pow+0xf8>
 800c8c2:	4a83      	ldr	r2, [pc, #524]	@ (800cad0 <__ieee754_pow+0x290>)
 800c8c4:	4592      	cmp	sl, r2
 800c8c6:	d84d      	bhi.n	800c964 <__ieee754_pow+0x124>
 800c8c8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c8cc:	4592      	cmp	sl, r2
 800c8ce:	f240 84c7 	bls.w	800d260 <__ieee754_pow+0xa20>
 800c8d2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c8d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c8da:	2a14      	cmp	r2, #20
 800c8dc:	dd0f      	ble.n	800c8fe <__ieee754_pow+0xbe>
 800c8de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c8e2:	fa21 f402 	lsr.w	r4, r1, r2
 800c8e6:	fa04 f202 	lsl.w	r2, r4, r2
 800c8ea:	428a      	cmp	r2, r1
 800c8ec:	f040 84b8 	bne.w	800d260 <__ieee754_pow+0xa20>
 800c8f0:	f004 0401 	and.w	r4, r4, #1
 800c8f4:	f1c4 0402 	rsb	r4, r4, #2
 800c8f8:	2900      	cmp	r1, #0
 800c8fa:	d158      	bne.n	800c9ae <__ieee754_pow+0x16e>
 800c8fc:	e00e      	b.n	800c91c <__ieee754_pow+0xdc>
 800c8fe:	2900      	cmp	r1, #0
 800c900:	d154      	bne.n	800c9ac <__ieee754_pow+0x16c>
 800c902:	f1c2 0214 	rsb	r2, r2, #20
 800c906:	fa4a f402 	asr.w	r4, sl, r2
 800c90a:	fa04 f202 	lsl.w	r2, r4, r2
 800c90e:	4552      	cmp	r2, sl
 800c910:	f040 84a3 	bne.w	800d25a <__ieee754_pow+0xa1a>
 800c914:	f004 0401 	and.w	r4, r4, #1
 800c918:	f1c4 0402 	rsb	r4, r4, #2
 800c91c:	4a6d      	ldr	r2, [pc, #436]	@ (800cad4 <__ieee754_pow+0x294>)
 800c91e:	4592      	cmp	sl, r2
 800c920:	d12e      	bne.n	800c980 <__ieee754_pow+0x140>
 800c922:	f1b9 0f00 	cmp.w	r9, #0
 800c926:	f280 8494 	bge.w	800d252 <__ieee754_pow+0xa12>
 800c92a:	496a      	ldr	r1, [pc, #424]	@ (800cad4 <__ieee754_pow+0x294>)
 800c92c:	4632      	mov	r2, r6
 800c92e:	463b      	mov	r3, r7
 800c930:	2000      	movs	r0, #0
 800c932:	f7f3 ff8b 	bl	800084c <__aeabi_ddiv>
 800c936:	e7a0      	b.n	800c87a <__ieee754_pow+0x3a>
 800c938:	2400      	movs	r4, #0
 800c93a:	bbc1      	cbnz	r1, 800c9ae <__ieee754_pow+0x16e>
 800c93c:	4a63      	ldr	r2, [pc, #396]	@ (800cacc <__ieee754_pow+0x28c>)
 800c93e:	4592      	cmp	sl, r2
 800c940:	d1ec      	bne.n	800c91c <__ieee754_pow+0xdc>
 800c942:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c946:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c94a:	431a      	orrs	r2, r3
 800c94c:	f000 8479 	beq.w	800d242 <__ieee754_pow+0xa02>
 800c950:	4b61      	ldr	r3, [pc, #388]	@ (800cad8 <__ieee754_pow+0x298>)
 800c952:	4598      	cmp	r8, r3
 800c954:	d908      	bls.n	800c968 <__ieee754_pow+0x128>
 800c956:	f1b9 0f00 	cmp.w	r9, #0
 800c95a:	f2c0 8476 	blt.w	800d24a <__ieee754_pow+0xa0a>
 800c95e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c962:	e78a      	b.n	800c87a <__ieee754_pow+0x3a>
 800c964:	2402      	movs	r4, #2
 800c966:	e7e8      	b.n	800c93a <__ieee754_pow+0xfa>
 800c968:	f1b9 0f00 	cmp.w	r9, #0
 800c96c:	f04f 0000 	mov.w	r0, #0
 800c970:	f04f 0100 	mov.w	r1, #0
 800c974:	da81      	bge.n	800c87a <__ieee754_pow+0x3a>
 800c976:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c97a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c97e:	e77c      	b.n	800c87a <__ieee754_pow+0x3a>
 800c980:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c984:	d106      	bne.n	800c994 <__ieee754_pow+0x154>
 800c986:	4632      	mov	r2, r6
 800c988:	463b      	mov	r3, r7
 800c98a:	4630      	mov	r0, r6
 800c98c:	4639      	mov	r1, r7
 800c98e:	f7f3 fe33 	bl	80005f8 <__aeabi_dmul>
 800c992:	e772      	b.n	800c87a <__ieee754_pow+0x3a>
 800c994:	4a51      	ldr	r2, [pc, #324]	@ (800cadc <__ieee754_pow+0x29c>)
 800c996:	4591      	cmp	r9, r2
 800c998:	d109      	bne.n	800c9ae <__ieee754_pow+0x16e>
 800c99a:	2d00      	cmp	r5, #0
 800c99c:	db07      	blt.n	800c9ae <__ieee754_pow+0x16e>
 800c99e:	ec47 6b10 	vmov	d0, r6, r7
 800c9a2:	b011      	add	sp, #68	@ 0x44
 800c9a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a8:	f000 bd52 	b.w	800d450 <__ieee754_sqrt>
 800c9ac:	2400      	movs	r4, #0
 800c9ae:	ec47 6b10 	vmov	d0, r6, r7
 800c9b2:	9302      	str	r3, [sp, #8]
 800c9b4:	f000 fc88 	bl	800d2c8 <fabs>
 800c9b8:	9b02      	ldr	r3, [sp, #8]
 800c9ba:	ec51 0b10 	vmov	r0, r1, d0
 800c9be:	bb53      	cbnz	r3, 800ca16 <__ieee754_pow+0x1d6>
 800c9c0:	4b44      	ldr	r3, [pc, #272]	@ (800cad4 <__ieee754_pow+0x294>)
 800c9c2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d002      	beq.n	800c9d0 <__ieee754_pow+0x190>
 800c9ca:	f1b8 0f00 	cmp.w	r8, #0
 800c9ce:	d122      	bne.n	800ca16 <__ieee754_pow+0x1d6>
 800c9d0:	f1b9 0f00 	cmp.w	r9, #0
 800c9d4:	da05      	bge.n	800c9e2 <__ieee754_pow+0x1a2>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	460b      	mov	r3, r1
 800c9da:	2000      	movs	r0, #0
 800c9dc:	493d      	ldr	r1, [pc, #244]	@ (800cad4 <__ieee754_pow+0x294>)
 800c9de:	f7f3 ff35 	bl	800084c <__aeabi_ddiv>
 800c9e2:	2d00      	cmp	r5, #0
 800c9e4:	f6bf af49 	bge.w	800c87a <__ieee754_pow+0x3a>
 800c9e8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c9ec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c9f0:	ea58 0804 	orrs.w	r8, r8, r4
 800c9f4:	d108      	bne.n	800ca08 <__ieee754_pow+0x1c8>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4610      	mov	r0, r2
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	f7f3 fc43 	bl	8000288 <__aeabi_dsub>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	e794      	b.n	800c932 <__ieee754_pow+0xf2>
 800ca08:	2c01      	cmp	r4, #1
 800ca0a:	f47f af36 	bne.w	800c87a <__ieee754_pow+0x3a>
 800ca0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca12:	4619      	mov	r1, r3
 800ca14:	e731      	b.n	800c87a <__ieee754_pow+0x3a>
 800ca16:	0feb      	lsrs	r3, r5, #31
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	ea53 0204 	orrs.w	r2, r3, r4
 800ca1e:	d102      	bne.n	800ca26 <__ieee754_pow+0x1e6>
 800ca20:	4632      	mov	r2, r6
 800ca22:	463b      	mov	r3, r7
 800ca24:	e7e9      	b.n	800c9fa <__ieee754_pow+0x1ba>
 800ca26:	3c01      	subs	r4, #1
 800ca28:	431c      	orrs	r4, r3
 800ca2a:	d016      	beq.n	800ca5a <__ieee754_pow+0x21a>
 800ca2c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800cab8 <__ieee754_pow+0x278>
 800ca30:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ca34:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca38:	f240 8112 	bls.w	800cc60 <__ieee754_pow+0x420>
 800ca3c:	4b28      	ldr	r3, [pc, #160]	@ (800cae0 <__ieee754_pow+0x2a0>)
 800ca3e:	459a      	cmp	sl, r3
 800ca40:	4b25      	ldr	r3, [pc, #148]	@ (800cad8 <__ieee754_pow+0x298>)
 800ca42:	d916      	bls.n	800ca72 <__ieee754_pow+0x232>
 800ca44:	4598      	cmp	r8, r3
 800ca46:	d80b      	bhi.n	800ca60 <__ieee754_pow+0x220>
 800ca48:	f1b9 0f00 	cmp.w	r9, #0
 800ca4c:	da0b      	bge.n	800ca66 <__ieee754_pow+0x226>
 800ca4e:	2000      	movs	r0, #0
 800ca50:	b011      	add	sp, #68	@ 0x44
 800ca52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca56:	f000 bcf3 	b.w	800d440 <__math_oflow>
 800ca5a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800cac0 <__ieee754_pow+0x280>
 800ca5e:	e7e7      	b.n	800ca30 <__ieee754_pow+0x1f0>
 800ca60:	f1b9 0f00 	cmp.w	r9, #0
 800ca64:	dcf3      	bgt.n	800ca4e <__ieee754_pow+0x20e>
 800ca66:	2000      	movs	r0, #0
 800ca68:	b011      	add	sp, #68	@ 0x44
 800ca6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6e:	f000 bcdf 	b.w	800d430 <__math_uflow>
 800ca72:	4598      	cmp	r8, r3
 800ca74:	d20c      	bcs.n	800ca90 <__ieee754_pow+0x250>
 800ca76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f7f4 f82d 	bl	8000adc <__aeabi_dcmplt>
 800ca82:	3800      	subs	r0, #0
 800ca84:	bf18      	it	ne
 800ca86:	2001      	movne	r0, #1
 800ca88:	f1b9 0f00 	cmp.w	r9, #0
 800ca8c:	daec      	bge.n	800ca68 <__ieee754_pow+0x228>
 800ca8e:	e7df      	b.n	800ca50 <__ieee754_pow+0x210>
 800ca90:	4b10      	ldr	r3, [pc, #64]	@ (800cad4 <__ieee754_pow+0x294>)
 800ca92:	4598      	cmp	r8, r3
 800ca94:	f04f 0200 	mov.w	r2, #0
 800ca98:	d924      	bls.n	800cae4 <__ieee754_pow+0x2a4>
 800ca9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f7f4 f81c 	bl	8000adc <__aeabi_dcmplt>
 800caa4:	3800      	subs	r0, #0
 800caa6:	bf18      	it	ne
 800caa8:	2001      	movne	r0, #1
 800caaa:	f1b9 0f00 	cmp.w	r9, #0
 800caae:	dccf      	bgt.n	800ca50 <__ieee754_pow+0x210>
 800cab0:	e7da      	b.n	800ca68 <__ieee754_pow+0x228>
 800cab2:	bf00      	nop
 800cab4:	f3af 8000 	nop.w
 800cab8:	00000000 	.word	0x00000000
 800cabc:	3ff00000 	.word	0x3ff00000
 800cac0:	00000000 	.word	0x00000000
 800cac4:	bff00000 	.word	0xbff00000
 800cac8:	fff00000 	.word	0xfff00000
 800cacc:	7ff00000 	.word	0x7ff00000
 800cad0:	433fffff 	.word	0x433fffff
 800cad4:	3ff00000 	.word	0x3ff00000
 800cad8:	3fefffff 	.word	0x3fefffff
 800cadc:	3fe00000 	.word	0x3fe00000
 800cae0:	43f00000 	.word	0x43f00000
 800cae4:	4b5a      	ldr	r3, [pc, #360]	@ (800cc50 <__ieee754_pow+0x410>)
 800cae6:	f7f3 fbcf 	bl	8000288 <__aeabi_dsub>
 800caea:	a351      	add	r3, pc, #324	@ (adr r3, 800cc30 <__ieee754_pow+0x3f0>)
 800caec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf0:	4604      	mov	r4, r0
 800caf2:	460d      	mov	r5, r1
 800caf4:	f7f3 fd80 	bl	80005f8 <__aeabi_dmul>
 800caf8:	a34f      	add	r3, pc, #316	@ (adr r3, 800cc38 <__ieee754_pow+0x3f8>)
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	4606      	mov	r6, r0
 800cb00:	460f      	mov	r7, r1
 800cb02:	4620      	mov	r0, r4
 800cb04:	4629      	mov	r1, r5
 800cb06:	f7f3 fd77 	bl	80005f8 <__aeabi_dmul>
 800cb0a:	4b52      	ldr	r3, [pc, #328]	@ (800cc54 <__ieee754_pow+0x414>)
 800cb0c:	4682      	mov	sl, r0
 800cb0e:	468b      	mov	fp, r1
 800cb10:	2200      	movs	r2, #0
 800cb12:	4620      	mov	r0, r4
 800cb14:	4629      	mov	r1, r5
 800cb16:	f7f3 fd6f 	bl	80005f8 <__aeabi_dmul>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	a148      	add	r1, pc, #288	@ (adr r1, 800cc40 <__ieee754_pow+0x400>)
 800cb20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb24:	f7f3 fbb0 	bl	8000288 <__aeabi_dsub>
 800cb28:	4622      	mov	r2, r4
 800cb2a:	462b      	mov	r3, r5
 800cb2c:	f7f3 fd64 	bl	80005f8 <__aeabi_dmul>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	2000      	movs	r0, #0
 800cb36:	4948      	ldr	r1, [pc, #288]	@ (800cc58 <__ieee754_pow+0x418>)
 800cb38:	f7f3 fba6 	bl	8000288 <__aeabi_dsub>
 800cb3c:	4622      	mov	r2, r4
 800cb3e:	4680      	mov	r8, r0
 800cb40:	4689      	mov	r9, r1
 800cb42:	462b      	mov	r3, r5
 800cb44:	4620      	mov	r0, r4
 800cb46:	4629      	mov	r1, r5
 800cb48:	f7f3 fd56 	bl	80005f8 <__aeabi_dmul>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	4640      	mov	r0, r8
 800cb52:	4649      	mov	r1, r9
 800cb54:	f7f3 fd50 	bl	80005f8 <__aeabi_dmul>
 800cb58:	a33b      	add	r3, pc, #236	@ (adr r3, 800cc48 <__ieee754_pow+0x408>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	f7f3 fd4b 	bl	80005f8 <__aeabi_dmul>
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	4650      	mov	r0, sl
 800cb68:	4659      	mov	r1, fp
 800cb6a:	f7f3 fb8d 	bl	8000288 <__aeabi_dsub>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	4680      	mov	r8, r0
 800cb74:	4689      	mov	r9, r1
 800cb76:	4630      	mov	r0, r6
 800cb78:	4639      	mov	r1, r7
 800cb7a:	f7f3 fb87 	bl	800028c <__adddf3>
 800cb7e:	2400      	movs	r4, #0
 800cb80:	4632      	mov	r2, r6
 800cb82:	463b      	mov	r3, r7
 800cb84:	4620      	mov	r0, r4
 800cb86:	460d      	mov	r5, r1
 800cb88:	f7f3 fb7e 	bl	8000288 <__aeabi_dsub>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	4640      	mov	r0, r8
 800cb92:	4649      	mov	r1, r9
 800cb94:	f7f3 fb78 	bl	8000288 <__aeabi_dsub>
 800cb98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cba0:	2300      	movs	r3, #0
 800cba2:	9304      	str	r3, [sp, #16]
 800cba4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cba8:	4606      	mov	r6, r0
 800cbaa:	460f      	mov	r7, r1
 800cbac:	4652      	mov	r2, sl
 800cbae:	465b      	mov	r3, fp
 800cbb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbb4:	f7f3 fb68 	bl	8000288 <__aeabi_dsub>
 800cbb8:	4622      	mov	r2, r4
 800cbba:	462b      	mov	r3, r5
 800cbbc:	f7f3 fd1c 	bl	80005f8 <__aeabi_dmul>
 800cbc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbc4:	4680      	mov	r8, r0
 800cbc6:	4689      	mov	r9, r1
 800cbc8:	4630      	mov	r0, r6
 800cbca:	4639      	mov	r1, r7
 800cbcc:	f7f3 fd14 	bl	80005f8 <__aeabi_dmul>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4640      	mov	r0, r8
 800cbd6:	4649      	mov	r1, r9
 800cbd8:	f7f3 fb58 	bl	800028c <__adddf3>
 800cbdc:	4652      	mov	r2, sl
 800cbde:	465b      	mov	r3, fp
 800cbe0:	4606      	mov	r6, r0
 800cbe2:	460f      	mov	r7, r1
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f7f3 fd06 	bl	80005f8 <__aeabi_dmul>
 800cbec:	460b      	mov	r3, r1
 800cbee:	4602      	mov	r2, r0
 800cbf0:	4680      	mov	r8, r0
 800cbf2:	4689      	mov	r9, r1
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	f7f3 fb48 	bl	800028c <__adddf3>
 800cbfc:	4b17      	ldr	r3, [pc, #92]	@ (800cc5c <__ieee754_pow+0x41c>)
 800cbfe:	4299      	cmp	r1, r3
 800cc00:	4604      	mov	r4, r0
 800cc02:	460d      	mov	r5, r1
 800cc04:	468a      	mov	sl, r1
 800cc06:	468b      	mov	fp, r1
 800cc08:	f340 82ef 	ble.w	800d1ea <__ieee754_pow+0x9aa>
 800cc0c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800cc10:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800cc14:	4303      	orrs	r3, r0
 800cc16:	f000 81e8 	beq.w	800cfea <__ieee754_pow+0x7aa>
 800cc1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	2300      	movs	r3, #0
 800cc22:	f7f3 ff5b 	bl	8000adc <__aeabi_dcmplt>
 800cc26:	3800      	subs	r0, #0
 800cc28:	bf18      	it	ne
 800cc2a:	2001      	movne	r0, #1
 800cc2c:	e710      	b.n	800ca50 <__ieee754_pow+0x210>
 800cc2e:	bf00      	nop
 800cc30:	60000000 	.word	0x60000000
 800cc34:	3ff71547 	.word	0x3ff71547
 800cc38:	f85ddf44 	.word	0xf85ddf44
 800cc3c:	3e54ae0b 	.word	0x3e54ae0b
 800cc40:	55555555 	.word	0x55555555
 800cc44:	3fd55555 	.word	0x3fd55555
 800cc48:	652b82fe 	.word	0x652b82fe
 800cc4c:	3ff71547 	.word	0x3ff71547
 800cc50:	3ff00000 	.word	0x3ff00000
 800cc54:	3fd00000 	.word	0x3fd00000
 800cc58:	3fe00000 	.word	0x3fe00000
 800cc5c:	408fffff 	.word	0x408fffff
 800cc60:	4bd5      	ldr	r3, [pc, #852]	@ (800cfb8 <__ieee754_pow+0x778>)
 800cc62:	402b      	ands	r3, r5
 800cc64:	2200      	movs	r2, #0
 800cc66:	b92b      	cbnz	r3, 800cc74 <__ieee754_pow+0x434>
 800cc68:	4bd4      	ldr	r3, [pc, #848]	@ (800cfbc <__ieee754_pow+0x77c>)
 800cc6a:	f7f3 fcc5 	bl	80005f8 <__aeabi_dmul>
 800cc6e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800cc72:	468b      	mov	fp, r1
 800cc74:	ea4f 532b 	mov.w	r3, fp, asr #20
 800cc78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cc7c:	4413      	add	r3, r2
 800cc7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc80:	4bcf      	ldr	r3, [pc, #828]	@ (800cfc0 <__ieee754_pow+0x780>)
 800cc82:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800cc86:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800cc8a:	459b      	cmp	fp, r3
 800cc8c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cc90:	dd08      	ble.n	800cca4 <__ieee754_pow+0x464>
 800cc92:	4bcc      	ldr	r3, [pc, #816]	@ (800cfc4 <__ieee754_pow+0x784>)
 800cc94:	459b      	cmp	fp, r3
 800cc96:	f340 81a5 	ble.w	800cfe4 <__ieee754_pow+0x7a4>
 800cc9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cca0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800cca4:	f04f 0a00 	mov.w	sl, #0
 800cca8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ccac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccae:	4bc6      	ldr	r3, [pc, #792]	@ (800cfc8 <__ieee754_pow+0x788>)
 800ccb0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ccb4:	ed93 7b00 	vldr	d7, [r3]
 800ccb8:	4629      	mov	r1, r5
 800ccba:	ec53 2b17 	vmov	r2, r3, d7
 800ccbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ccc2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ccc6:	f7f3 fadf 	bl	8000288 <__aeabi_dsub>
 800ccca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ccce:	4606      	mov	r6, r0
 800ccd0:	460f      	mov	r7, r1
 800ccd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccd6:	f7f3 fad9 	bl	800028c <__adddf3>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	2000      	movs	r0, #0
 800cce0:	49ba      	ldr	r1, [pc, #744]	@ (800cfcc <__ieee754_pow+0x78c>)
 800cce2:	f7f3 fdb3 	bl	800084c <__aeabi_ddiv>
 800cce6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ccea:	4602      	mov	r2, r0
 800ccec:	460b      	mov	r3, r1
 800ccee:	4630      	mov	r0, r6
 800ccf0:	4639      	mov	r1, r7
 800ccf2:	f7f3 fc81 	bl	80005f8 <__aeabi_dmul>
 800ccf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccfa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800ccfe:	106d      	asrs	r5, r5, #1
 800cd00:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800cd04:	f04f 0b00 	mov.w	fp, #0
 800cd08:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800cd0c:	4661      	mov	r1, ip
 800cd0e:	2200      	movs	r2, #0
 800cd10:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800cd14:	4658      	mov	r0, fp
 800cd16:	46e1      	mov	r9, ip
 800cd18:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800cd1c:	4614      	mov	r4, r2
 800cd1e:	461d      	mov	r5, r3
 800cd20:	f7f3 fc6a 	bl	80005f8 <__aeabi_dmul>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	4630      	mov	r0, r6
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	f7f3 faac 	bl	8000288 <__aeabi_dsub>
 800cd30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd34:	4606      	mov	r6, r0
 800cd36:	460f      	mov	r7, r1
 800cd38:	4620      	mov	r0, r4
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	f7f3 faa4 	bl	8000288 <__aeabi_dsub>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd48:	f7f3 fa9e 	bl	8000288 <__aeabi_dsub>
 800cd4c:	465a      	mov	r2, fp
 800cd4e:	464b      	mov	r3, r9
 800cd50:	f7f3 fc52 	bl	80005f8 <__aeabi_dmul>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	4630      	mov	r0, r6
 800cd5a:	4639      	mov	r1, r7
 800cd5c:	f7f3 fa94 	bl	8000288 <__aeabi_dsub>
 800cd60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cd64:	f7f3 fc48 	bl	80005f8 <__aeabi_dmul>
 800cd68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cd70:	4610      	mov	r0, r2
 800cd72:	4619      	mov	r1, r3
 800cd74:	f7f3 fc40 	bl	80005f8 <__aeabi_dmul>
 800cd78:	a37d      	add	r3, pc, #500	@ (adr r3, 800cf70 <__ieee754_pow+0x730>)
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	4604      	mov	r4, r0
 800cd80:	460d      	mov	r5, r1
 800cd82:	f7f3 fc39 	bl	80005f8 <__aeabi_dmul>
 800cd86:	a37c      	add	r3, pc, #496	@ (adr r3, 800cf78 <__ieee754_pow+0x738>)
 800cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8c:	f7f3 fa7e 	bl	800028c <__adddf3>
 800cd90:	4622      	mov	r2, r4
 800cd92:	462b      	mov	r3, r5
 800cd94:	f7f3 fc30 	bl	80005f8 <__aeabi_dmul>
 800cd98:	a379      	add	r3, pc, #484	@ (adr r3, 800cf80 <__ieee754_pow+0x740>)
 800cd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9e:	f7f3 fa75 	bl	800028c <__adddf3>
 800cda2:	4622      	mov	r2, r4
 800cda4:	462b      	mov	r3, r5
 800cda6:	f7f3 fc27 	bl	80005f8 <__aeabi_dmul>
 800cdaa:	a377      	add	r3, pc, #476	@ (adr r3, 800cf88 <__ieee754_pow+0x748>)
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	f7f3 fa6c 	bl	800028c <__adddf3>
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	462b      	mov	r3, r5
 800cdb8:	f7f3 fc1e 	bl	80005f8 <__aeabi_dmul>
 800cdbc:	a374      	add	r3, pc, #464	@ (adr r3, 800cf90 <__ieee754_pow+0x750>)
 800cdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc2:	f7f3 fa63 	bl	800028c <__adddf3>
 800cdc6:	4622      	mov	r2, r4
 800cdc8:	462b      	mov	r3, r5
 800cdca:	f7f3 fc15 	bl	80005f8 <__aeabi_dmul>
 800cdce:	a372      	add	r3, pc, #456	@ (adr r3, 800cf98 <__ieee754_pow+0x758>)
 800cdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd4:	f7f3 fa5a 	bl	800028c <__adddf3>
 800cdd8:	4622      	mov	r2, r4
 800cdda:	4606      	mov	r6, r0
 800cddc:	460f      	mov	r7, r1
 800cdde:	462b      	mov	r3, r5
 800cde0:	4620      	mov	r0, r4
 800cde2:	4629      	mov	r1, r5
 800cde4:	f7f3 fc08 	bl	80005f8 <__aeabi_dmul>
 800cde8:	4602      	mov	r2, r0
 800cdea:	460b      	mov	r3, r1
 800cdec:	4630      	mov	r0, r6
 800cdee:	4639      	mov	r1, r7
 800cdf0:	f7f3 fc02 	bl	80005f8 <__aeabi_dmul>
 800cdf4:	465a      	mov	r2, fp
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	460d      	mov	r5, r1
 800cdfa:	464b      	mov	r3, r9
 800cdfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce00:	f7f3 fa44 	bl	800028c <__adddf3>
 800ce04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce08:	f7f3 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	462b      	mov	r3, r5
 800ce10:	f7f3 fa3c 	bl	800028c <__adddf3>
 800ce14:	465a      	mov	r2, fp
 800ce16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce1a:	464b      	mov	r3, r9
 800ce1c:	4658      	mov	r0, fp
 800ce1e:	4649      	mov	r1, r9
 800ce20:	f7f3 fbea 	bl	80005f8 <__aeabi_dmul>
 800ce24:	4b6a      	ldr	r3, [pc, #424]	@ (800cfd0 <__ieee754_pow+0x790>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	4606      	mov	r6, r0
 800ce2a:	460f      	mov	r7, r1
 800ce2c:	f7f3 fa2e 	bl	800028c <__adddf3>
 800ce30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ce34:	f7f3 fa2a 	bl	800028c <__adddf3>
 800ce38:	46d8      	mov	r8, fp
 800ce3a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800ce3e:	460d      	mov	r5, r1
 800ce40:	465a      	mov	r2, fp
 800ce42:	460b      	mov	r3, r1
 800ce44:	4640      	mov	r0, r8
 800ce46:	4649      	mov	r1, r9
 800ce48:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800ce4c:	f7f3 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ce50:	465c      	mov	r4, fp
 800ce52:	4680      	mov	r8, r0
 800ce54:	4689      	mov	r9, r1
 800ce56:	4b5e      	ldr	r3, [pc, #376]	@ (800cfd0 <__ieee754_pow+0x790>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	f7f3 fa13 	bl	8000288 <__aeabi_dsub>
 800ce62:	4632      	mov	r2, r6
 800ce64:	463b      	mov	r3, r7
 800ce66:	f7f3 fa0f 	bl	8000288 <__aeabi_dsub>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce72:	f7f3 fa09 	bl	8000288 <__aeabi_dsub>
 800ce76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce7a:	f7f3 fbbd 	bl	80005f8 <__aeabi_dmul>
 800ce7e:	4622      	mov	r2, r4
 800ce80:	4606      	mov	r6, r0
 800ce82:	460f      	mov	r7, r1
 800ce84:	462b      	mov	r3, r5
 800ce86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce8a:	f7f3 fbb5 	bl	80005f8 <__aeabi_dmul>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4630      	mov	r0, r6
 800ce94:	4639      	mov	r1, r7
 800ce96:	f7f3 f9f9 	bl	800028c <__adddf3>
 800ce9a:	4606      	mov	r6, r0
 800ce9c:	460f      	mov	r7, r1
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4640      	mov	r0, r8
 800cea4:	4649      	mov	r1, r9
 800cea6:	f7f3 f9f1 	bl	800028c <__adddf3>
 800ceaa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800ceae:	a33c      	add	r3, pc, #240	@ (adr r3, 800cfa0 <__ieee754_pow+0x760>)
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	4658      	mov	r0, fp
 800ceb6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800ceba:	460d      	mov	r5, r1
 800cebc:	f7f3 fb9c 	bl	80005f8 <__aeabi_dmul>
 800cec0:	465c      	mov	r4, fp
 800cec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cec6:	4642      	mov	r2, r8
 800cec8:	464b      	mov	r3, r9
 800ceca:	4620      	mov	r0, r4
 800cecc:	4629      	mov	r1, r5
 800cece:	f7f3 f9db 	bl	8000288 <__aeabi_dsub>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4630      	mov	r0, r6
 800ced8:	4639      	mov	r1, r7
 800ceda:	f7f3 f9d5 	bl	8000288 <__aeabi_dsub>
 800cede:	a332      	add	r3, pc, #200	@ (adr r3, 800cfa8 <__ieee754_pow+0x768>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f7f3 fb88 	bl	80005f8 <__aeabi_dmul>
 800cee8:	a331      	add	r3, pc, #196	@ (adr r3, 800cfb0 <__ieee754_pow+0x770>)
 800ceea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceee:	4606      	mov	r6, r0
 800cef0:	460f      	mov	r7, r1
 800cef2:	4620      	mov	r0, r4
 800cef4:	4629      	mov	r1, r5
 800cef6:	f7f3 fb7f 	bl	80005f8 <__aeabi_dmul>
 800cefa:	4602      	mov	r2, r0
 800cefc:	460b      	mov	r3, r1
 800cefe:	4630      	mov	r0, r6
 800cf00:	4639      	mov	r1, r7
 800cf02:	f7f3 f9c3 	bl	800028c <__adddf3>
 800cf06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf08:	4b32      	ldr	r3, [pc, #200]	@ (800cfd4 <__ieee754_pow+0x794>)
 800cf0a:	4413      	add	r3, r2
 800cf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf10:	f7f3 f9bc 	bl	800028c <__adddf3>
 800cf14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cf1a:	f7f3 fb03 	bl	8000524 <__aeabi_i2d>
 800cf1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf20:	4b2d      	ldr	r3, [pc, #180]	@ (800cfd8 <__ieee754_pow+0x798>)
 800cf22:	4413      	add	r3, r2
 800cf24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf28:	4606      	mov	r6, r0
 800cf2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf2e:	460f      	mov	r7, r1
 800cf30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf34:	f7f3 f9aa 	bl	800028c <__adddf3>
 800cf38:	4642      	mov	r2, r8
 800cf3a:	464b      	mov	r3, r9
 800cf3c:	f7f3 f9a6 	bl	800028c <__adddf3>
 800cf40:	4632      	mov	r2, r6
 800cf42:	463b      	mov	r3, r7
 800cf44:	f7f3 f9a2 	bl	800028c <__adddf3>
 800cf48:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800cf4c:	4632      	mov	r2, r6
 800cf4e:	463b      	mov	r3, r7
 800cf50:	4658      	mov	r0, fp
 800cf52:	460d      	mov	r5, r1
 800cf54:	f7f3 f998 	bl	8000288 <__aeabi_dsub>
 800cf58:	4642      	mov	r2, r8
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	f7f3 f994 	bl	8000288 <__aeabi_dsub>
 800cf60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf64:	f7f3 f990 	bl	8000288 <__aeabi_dsub>
 800cf68:	465c      	mov	r4, fp
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	e036      	b.n	800cfdc <__ieee754_pow+0x79c>
 800cf6e:	bf00      	nop
 800cf70:	4a454eef 	.word	0x4a454eef
 800cf74:	3fca7e28 	.word	0x3fca7e28
 800cf78:	93c9db65 	.word	0x93c9db65
 800cf7c:	3fcd864a 	.word	0x3fcd864a
 800cf80:	a91d4101 	.word	0xa91d4101
 800cf84:	3fd17460 	.word	0x3fd17460
 800cf88:	518f264d 	.word	0x518f264d
 800cf8c:	3fd55555 	.word	0x3fd55555
 800cf90:	db6fabff 	.word	0xdb6fabff
 800cf94:	3fdb6db6 	.word	0x3fdb6db6
 800cf98:	33333303 	.word	0x33333303
 800cf9c:	3fe33333 	.word	0x3fe33333
 800cfa0:	e0000000 	.word	0xe0000000
 800cfa4:	3feec709 	.word	0x3feec709
 800cfa8:	dc3a03fd 	.word	0xdc3a03fd
 800cfac:	3feec709 	.word	0x3feec709
 800cfb0:	145b01f5 	.word	0x145b01f5
 800cfb4:	be3e2fe0 	.word	0xbe3e2fe0
 800cfb8:	7ff00000 	.word	0x7ff00000
 800cfbc:	43400000 	.word	0x43400000
 800cfc0:	0003988e 	.word	0x0003988e
 800cfc4:	000bb679 	.word	0x000bb679
 800cfc8:	0800db70 	.word	0x0800db70
 800cfcc:	3ff00000 	.word	0x3ff00000
 800cfd0:	40080000 	.word	0x40080000
 800cfd4:	0800db50 	.word	0x0800db50
 800cfd8:	0800db60 	.word	0x0800db60
 800cfdc:	460b      	mov	r3, r1
 800cfde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfe2:	e5d7      	b.n	800cb94 <__ieee754_pow+0x354>
 800cfe4:	f04f 0a01 	mov.w	sl, #1
 800cfe8:	e65e      	b.n	800cca8 <__ieee754_pow+0x468>
 800cfea:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d2bc <__ieee754_pow+0xa7c>)
 800cfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff0:	4630      	mov	r0, r6
 800cff2:	4639      	mov	r1, r7
 800cff4:	f7f3 f94a 	bl	800028c <__adddf3>
 800cff8:	4642      	mov	r2, r8
 800cffa:	e9cd 0100 	strd	r0, r1, [sp]
 800cffe:	464b      	mov	r3, r9
 800d000:	4620      	mov	r0, r4
 800d002:	4629      	mov	r1, r5
 800d004:	f7f3 f940 	bl	8000288 <__aeabi_dsub>
 800d008:	4602      	mov	r2, r0
 800d00a:	460b      	mov	r3, r1
 800d00c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d010:	f7f3 fd82 	bl	8000b18 <__aeabi_dcmpgt>
 800d014:	2800      	cmp	r0, #0
 800d016:	f47f ae00 	bne.w	800cc1a <__ieee754_pow+0x3da>
 800d01a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d01e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d022:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d026:	fa43 fa0a 	asr.w	sl, r3, sl
 800d02a:	44da      	add	sl, fp
 800d02c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d030:	489d      	ldr	r0, [pc, #628]	@ (800d2a8 <__ieee754_pow+0xa68>)
 800d032:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d036:	4108      	asrs	r0, r1
 800d038:	ea00 030a 	and.w	r3, r0, sl
 800d03c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d040:	f1c1 0114 	rsb	r1, r1, #20
 800d044:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d048:	fa4a fa01 	asr.w	sl, sl, r1
 800d04c:	f1bb 0f00 	cmp.w	fp, #0
 800d050:	4640      	mov	r0, r8
 800d052:	4649      	mov	r1, r9
 800d054:	f04f 0200 	mov.w	r2, #0
 800d058:	bfb8      	it	lt
 800d05a:	f1ca 0a00 	rsblt	sl, sl, #0
 800d05e:	f7f3 f913 	bl	8000288 <__aeabi_dsub>
 800d062:	4680      	mov	r8, r0
 800d064:	4689      	mov	r9, r1
 800d066:	4632      	mov	r2, r6
 800d068:	463b      	mov	r3, r7
 800d06a:	4640      	mov	r0, r8
 800d06c:	4649      	mov	r1, r9
 800d06e:	f7f3 f90d 	bl	800028c <__adddf3>
 800d072:	2400      	movs	r4, #0
 800d074:	a37c      	add	r3, pc, #496	@ (adr r3, 800d268 <__ieee754_pow+0xa28>)
 800d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07a:	4620      	mov	r0, r4
 800d07c:	460d      	mov	r5, r1
 800d07e:	f7f3 fabb 	bl	80005f8 <__aeabi_dmul>
 800d082:	4642      	mov	r2, r8
 800d084:	e9cd 0100 	strd	r0, r1, [sp]
 800d088:	464b      	mov	r3, r9
 800d08a:	4620      	mov	r0, r4
 800d08c:	4629      	mov	r1, r5
 800d08e:	f7f3 f8fb 	bl	8000288 <__aeabi_dsub>
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	4630      	mov	r0, r6
 800d098:	4639      	mov	r1, r7
 800d09a:	f7f3 f8f5 	bl	8000288 <__aeabi_dsub>
 800d09e:	a374      	add	r3, pc, #464	@ (adr r3, 800d270 <__ieee754_pow+0xa30>)
 800d0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a4:	f7f3 faa8 	bl	80005f8 <__aeabi_dmul>
 800d0a8:	a373      	add	r3, pc, #460	@ (adr r3, 800d278 <__ieee754_pow+0xa38>)
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	4680      	mov	r8, r0
 800d0b0:	4689      	mov	r9, r1
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	f7f3 fa9f 	bl	80005f8 <__aeabi_dmul>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	460b      	mov	r3, r1
 800d0be:	4640      	mov	r0, r8
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	f7f3 f8e3 	bl	800028c <__adddf3>
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	460d      	mov	r5, r1
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0d2:	f7f3 f8db 	bl	800028c <__adddf3>
 800d0d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0da:	4680      	mov	r8, r0
 800d0dc:	4689      	mov	r9, r1
 800d0de:	f7f3 f8d3 	bl	8000288 <__aeabi_dsub>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	f7f3 f8cd 	bl	8000288 <__aeabi_dsub>
 800d0ee:	4642      	mov	r2, r8
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	460f      	mov	r7, r1
 800d0f4:	464b      	mov	r3, r9
 800d0f6:	4640      	mov	r0, r8
 800d0f8:	4649      	mov	r1, r9
 800d0fa:	f7f3 fa7d 	bl	80005f8 <__aeabi_dmul>
 800d0fe:	a360      	add	r3, pc, #384	@ (adr r3, 800d280 <__ieee754_pow+0xa40>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	4604      	mov	r4, r0
 800d106:	460d      	mov	r5, r1
 800d108:	f7f3 fa76 	bl	80005f8 <__aeabi_dmul>
 800d10c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d288 <__ieee754_pow+0xa48>)
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	f7f3 f8b9 	bl	8000288 <__aeabi_dsub>
 800d116:	4622      	mov	r2, r4
 800d118:	462b      	mov	r3, r5
 800d11a:	f7f3 fa6d 	bl	80005f8 <__aeabi_dmul>
 800d11e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d290 <__ieee754_pow+0xa50>)
 800d120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d124:	f7f3 f8b2 	bl	800028c <__adddf3>
 800d128:	4622      	mov	r2, r4
 800d12a:	462b      	mov	r3, r5
 800d12c:	f7f3 fa64 	bl	80005f8 <__aeabi_dmul>
 800d130:	a359      	add	r3, pc, #356	@ (adr r3, 800d298 <__ieee754_pow+0xa58>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	f7f3 f8a7 	bl	8000288 <__aeabi_dsub>
 800d13a:	4622      	mov	r2, r4
 800d13c:	462b      	mov	r3, r5
 800d13e:	f7f3 fa5b 	bl	80005f8 <__aeabi_dmul>
 800d142:	a357      	add	r3, pc, #348	@ (adr r3, 800d2a0 <__ieee754_pow+0xa60>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	f7f3 f8a0 	bl	800028c <__adddf3>
 800d14c:	4622      	mov	r2, r4
 800d14e:	462b      	mov	r3, r5
 800d150:	f7f3 fa52 	bl	80005f8 <__aeabi_dmul>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4640      	mov	r0, r8
 800d15a:	4649      	mov	r1, r9
 800d15c:	f7f3 f894 	bl	8000288 <__aeabi_dsub>
 800d160:	4604      	mov	r4, r0
 800d162:	460d      	mov	r5, r1
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	4640      	mov	r0, r8
 800d16a:	4649      	mov	r1, r9
 800d16c:	f7f3 fa44 	bl	80005f8 <__aeabi_dmul>
 800d170:	2200      	movs	r2, #0
 800d172:	e9cd 0100 	strd	r0, r1, [sp]
 800d176:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d17a:	4620      	mov	r0, r4
 800d17c:	4629      	mov	r1, r5
 800d17e:	f7f3 f883 	bl	8000288 <__aeabi_dsub>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d18a:	f7f3 fb5f 	bl	800084c <__aeabi_ddiv>
 800d18e:	4632      	mov	r2, r6
 800d190:	4604      	mov	r4, r0
 800d192:	460d      	mov	r5, r1
 800d194:	463b      	mov	r3, r7
 800d196:	4640      	mov	r0, r8
 800d198:	4649      	mov	r1, r9
 800d19a:	f7f3 fa2d 	bl	80005f8 <__aeabi_dmul>
 800d19e:	4632      	mov	r2, r6
 800d1a0:	463b      	mov	r3, r7
 800d1a2:	f7f3 f873 	bl	800028c <__adddf3>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	f7f3 f86b 	bl	8000288 <__aeabi_dsub>
 800d1b2:	4642      	mov	r2, r8
 800d1b4:	464b      	mov	r3, r9
 800d1b6:	f7f3 f867 	bl	8000288 <__aeabi_dsub>
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4602      	mov	r2, r0
 800d1be:	493b      	ldr	r1, [pc, #236]	@ (800d2ac <__ieee754_pow+0xa6c>)
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	f7f3 f861 	bl	8000288 <__aeabi_dsub>
 800d1c6:	ec41 0b10 	vmov	d0, r0, r1
 800d1ca:	ee10 3a90 	vmov	r3, s1
 800d1ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d1d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1d6:	da30      	bge.n	800d23a <__ieee754_pow+0x9fa>
 800d1d8:	4650      	mov	r0, sl
 800d1da:	f000 f87d 	bl	800d2d8 <scalbn>
 800d1de:	ec51 0b10 	vmov	r0, r1, d0
 800d1e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1e6:	f7ff bbd2 	b.w	800c98e <__ieee754_pow+0x14e>
 800d1ea:	4c31      	ldr	r4, [pc, #196]	@ (800d2b0 <__ieee754_pow+0xa70>)
 800d1ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d1f0:	42a3      	cmp	r3, r4
 800d1f2:	d91a      	bls.n	800d22a <__ieee754_pow+0x9ea>
 800d1f4:	4b2f      	ldr	r3, [pc, #188]	@ (800d2b4 <__ieee754_pow+0xa74>)
 800d1f6:	440b      	add	r3, r1
 800d1f8:	4303      	orrs	r3, r0
 800d1fa:	d009      	beq.n	800d210 <__ieee754_pow+0x9d0>
 800d1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d200:	2200      	movs	r2, #0
 800d202:	2300      	movs	r3, #0
 800d204:	f7f3 fc6a 	bl	8000adc <__aeabi_dcmplt>
 800d208:	3800      	subs	r0, #0
 800d20a:	bf18      	it	ne
 800d20c:	2001      	movne	r0, #1
 800d20e:	e42b      	b.n	800ca68 <__ieee754_pow+0x228>
 800d210:	4642      	mov	r2, r8
 800d212:	464b      	mov	r3, r9
 800d214:	f7f3 f838 	bl	8000288 <__aeabi_dsub>
 800d218:	4632      	mov	r2, r6
 800d21a:	463b      	mov	r3, r7
 800d21c:	f7f3 fc72 	bl	8000b04 <__aeabi_dcmpge>
 800d220:	2800      	cmp	r0, #0
 800d222:	d1eb      	bne.n	800d1fc <__ieee754_pow+0x9bc>
 800d224:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d2c4 <__ieee754_pow+0xa84>
 800d228:	e6f7      	b.n	800d01a <__ieee754_pow+0x7da>
 800d22a:	469a      	mov	sl, r3
 800d22c:	4b22      	ldr	r3, [pc, #136]	@ (800d2b8 <__ieee754_pow+0xa78>)
 800d22e:	459a      	cmp	sl, r3
 800d230:	f63f aef3 	bhi.w	800d01a <__ieee754_pow+0x7da>
 800d234:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d238:	e715      	b.n	800d066 <__ieee754_pow+0x826>
 800d23a:	ec51 0b10 	vmov	r0, r1, d0
 800d23e:	4619      	mov	r1, r3
 800d240:	e7cf      	b.n	800d1e2 <__ieee754_pow+0x9a2>
 800d242:	491a      	ldr	r1, [pc, #104]	@ (800d2ac <__ieee754_pow+0xa6c>)
 800d244:	2000      	movs	r0, #0
 800d246:	f7ff bb18 	b.w	800c87a <__ieee754_pow+0x3a>
 800d24a:	2000      	movs	r0, #0
 800d24c:	2100      	movs	r1, #0
 800d24e:	f7ff bb14 	b.w	800c87a <__ieee754_pow+0x3a>
 800d252:	4630      	mov	r0, r6
 800d254:	4639      	mov	r1, r7
 800d256:	f7ff bb10 	b.w	800c87a <__ieee754_pow+0x3a>
 800d25a:	460c      	mov	r4, r1
 800d25c:	f7ff bb5e 	b.w	800c91c <__ieee754_pow+0xdc>
 800d260:	2400      	movs	r4, #0
 800d262:	f7ff bb49 	b.w	800c8f8 <__ieee754_pow+0xb8>
 800d266:	bf00      	nop
 800d268:	00000000 	.word	0x00000000
 800d26c:	3fe62e43 	.word	0x3fe62e43
 800d270:	fefa39ef 	.word	0xfefa39ef
 800d274:	3fe62e42 	.word	0x3fe62e42
 800d278:	0ca86c39 	.word	0x0ca86c39
 800d27c:	be205c61 	.word	0xbe205c61
 800d280:	72bea4d0 	.word	0x72bea4d0
 800d284:	3e663769 	.word	0x3e663769
 800d288:	c5d26bf1 	.word	0xc5d26bf1
 800d28c:	3ebbbd41 	.word	0x3ebbbd41
 800d290:	af25de2c 	.word	0xaf25de2c
 800d294:	3f11566a 	.word	0x3f11566a
 800d298:	16bebd93 	.word	0x16bebd93
 800d29c:	3f66c16c 	.word	0x3f66c16c
 800d2a0:	5555553e 	.word	0x5555553e
 800d2a4:	3fc55555 	.word	0x3fc55555
 800d2a8:	fff00000 	.word	0xfff00000
 800d2ac:	3ff00000 	.word	0x3ff00000
 800d2b0:	4090cbff 	.word	0x4090cbff
 800d2b4:	3f6f3400 	.word	0x3f6f3400
 800d2b8:	3fe00000 	.word	0x3fe00000
 800d2bc:	652b82fe 	.word	0x652b82fe
 800d2c0:	3c971547 	.word	0x3c971547
 800d2c4:	4090cc00 	.word	0x4090cc00

0800d2c8 <fabs>:
 800d2c8:	ec51 0b10 	vmov	r0, r1, d0
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d2d2:	ec43 2b10 	vmov	d0, r2, r3
 800d2d6:	4770      	bx	lr

0800d2d8 <scalbn>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	ec55 4b10 	vmov	r4, r5, d0
 800d2de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	b991      	cbnz	r1, 800d30e <scalbn+0x36>
 800d2e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d2ec:	4323      	orrs	r3, r4
 800d2ee:	d03d      	beq.n	800d36c <scalbn+0x94>
 800d2f0:	4b35      	ldr	r3, [pc, #212]	@ (800d3c8 <scalbn+0xf0>)
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f7f3 f97e 	bl	80005f8 <__aeabi_dmul>
 800d2fc:	4b33      	ldr	r3, [pc, #204]	@ (800d3cc <scalbn+0xf4>)
 800d2fe:	429e      	cmp	r6, r3
 800d300:	4604      	mov	r4, r0
 800d302:	460d      	mov	r5, r1
 800d304:	da0f      	bge.n	800d326 <scalbn+0x4e>
 800d306:	a328      	add	r3, pc, #160	@ (adr r3, 800d3a8 <scalbn+0xd0>)
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	e01e      	b.n	800d34c <scalbn+0x74>
 800d30e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d312:	4291      	cmp	r1, r2
 800d314:	d10b      	bne.n	800d32e <scalbn+0x56>
 800d316:	4622      	mov	r2, r4
 800d318:	4620      	mov	r0, r4
 800d31a:	4629      	mov	r1, r5
 800d31c:	f7f2 ffb6 	bl	800028c <__adddf3>
 800d320:	4604      	mov	r4, r0
 800d322:	460d      	mov	r5, r1
 800d324:	e022      	b.n	800d36c <scalbn+0x94>
 800d326:	460b      	mov	r3, r1
 800d328:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d32c:	3936      	subs	r1, #54	@ 0x36
 800d32e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d332:	4296      	cmp	r6, r2
 800d334:	dd0d      	ble.n	800d352 <scalbn+0x7a>
 800d336:	2d00      	cmp	r5, #0
 800d338:	a11d      	add	r1, pc, #116	@ (adr r1, 800d3b0 <scalbn+0xd8>)
 800d33a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d33e:	da02      	bge.n	800d346 <scalbn+0x6e>
 800d340:	a11d      	add	r1, pc, #116	@ (adr r1, 800d3b8 <scalbn+0xe0>)
 800d342:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d346:	a31a      	add	r3, pc, #104	@ (adr r3, 800d3b0 <scalbn+0xd8>)
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	f7f3 f954 	bl	80005f8 <__aeabi_dmul>
 800d350:	e7e6      	b.n	800d320 <scalbn+0x48>
 800d352:	1872      	adds	r2, r6, r1
 800d354:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d358:	428a      	cmp	r2, r1
 800d35a:	dcec      	bgt.n	800d336 <scalbn+0x5e>
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	dd08      	ble.n	800d372 <scalbn+0x9a>
 800d360:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d364:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d368:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d36c:	ec45 4b10 	vmov	d0, r4, r5
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d376:	da08      	bge.n	800d38a <scalbn+0xb2>
 800d378:	2d00      	cmp	r5, #0
 800d37a:	a10b      	add	r1, pc, #44	@ (adr r1, 800d3a8 <scalbn+0xd0>)
 800d37c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d380:	dac1      	bge.n	800d306 <scalbn+0x2e>
 800d382:	a10f      	add	r1, pc, #60	@ (adr r1, 800d3c0 <scalbn+0xe8>)
 800d384:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d388:	e7bd      	b.n	800d306 <scalbn+0x2e>
 800d38a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d38e:	3236      	adds	r2, #54	@ 0x36
 800d390:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d394:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d398:	4620      	mov	r0, r4
 800d39a:	4b0d      	ldr	r3, [pc, #52]	@ (800d3d0 <scalbn+0xf8>)
 800d39c:	4629      	mov	r1, r5
 800d39e:	2200      	movs	r2, #0
 800d3a0:	e7d4      	b.n	800d34c <scalbn+0x74>
 800d3a2:	bf00      	nop
 800d3a4:	f3af 8000 	nop.w
 800d3a8:	c2f8f359 	.word	0xc2f8f359
 800d3ac:	01a56e1f 	.word	0x01a56e1f
 800d3b0:	8800759c 	.word	0x8800759c
 800d3b4:	7e37e43c 	.word	0x7e37e43c
 800d3b8:	8800759c 	.word	0x8800759c
 800d3bc:	fe37e43c 	.word	0xfe37e43c
 800d3c0:	c2f8f359 	.word	0xc2f8f359
 800d3c4:	81a56e1f 	.word	0x81a56e1f
 800d3c8:	43500000 	.word	0x43500000
 800d3cc:	ffff3cb0 	.word	0xffff3cb0
 800d3d0:	3c900000 	.word	0x3c900000

0800d3d4 <with_errno>:
 800d3d4:	b510      	push	{r4, lr}
 800d3d6:	ed2d 8b02 	vpush	{d8}
 800d3da:	eeb0 8a40 	vmov.f32	s16, s0
 800d3de:	eef0 8a60 	vmov.f32	s17, s1
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	f7fd f938 	bl	800a658 <__errno>
 800d3e8:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ec:	eef0 0a68 	vmov.f32	s1, s17
 800d3f0:	ecbd 8b02 	vpop	{d8}
 800d3f4:	6004      	str	r4, [r0, #0]
 800d3f6:	bd10      	pop	{r4, pc}

0800d3f8 <xflow>:
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	b507      	push	{r0, r1, r2, lr}
 800d3fc:	ec51 0b10 	vmov	r0, r1, d0
 800d400:	b183      	cbz	r3, 800d424 <xflow+0x2c>
 800d402:	4602      	mov	r2, r0
 800d404:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d408:	e9cd 2300 	strd	r2, r3, [sp]
 800d40c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d410:	f7f3 f8f2 	bl	80005f8 <__aeabi_dmul>
 800d414:	ec41 0b10 	vmov	d0, r0, r1
 800d418:	2022      	movs	r0, #34	@ 0x22
 800d41a:	b003      	add	sp, #12
 800d41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d420:	f7ff bfd8 	b.w	800d3d4 <with_errno>
 800d424:	4602      	mov	r2, r0
 800d426:	460b      	mov	r3, r1
 800d428:	e7ee      	b.n	800d408 <xflow+0x10>
 800d42a:	0000      	movs	r0, r0
 800d42c:	0000      	movs	r0, r0
	...

0800d430 <__math_uflow>:
 800d430:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d438 <__math_uflow+0x8>
 800d434:	f7ff bfe0 	b.w	800d3f8 <xflow>
 800d438:	00000000 	.word	0x00000000
 800d43c:	10000000 	.word	0x10000000

0800d440 <__math_oflow>:
 800d440:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d448 <__math_oflow+0x8>
 800d444:	f7ff bfd8 	b.w	800d3f8 <xflow>
 800d448:	00000000 	.word	0x00000000
 800d44c:	70000000 	.word	0x70000000

0800d450 <__ieee754_sqrt>:
 800d450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	4a68      	ldr	r2, [pc, #416]	@ (800d5f8 <__ieee754_sqrt+0x1a8>)
 800d456:	ec55 4b10 	vmov	r4, r5, d0
 800d45a:	43aa      	bics	r2, r5
 800d45c:	462b      	mov	r3, r5
 800d45e:	4621      	mov	r1, r4
 800d460:	d110      	bne.n	800d484 <__ieee754_sqrt+0x34>
 800d462:	4622      	mov	r2, r4
 800d464:	4620      	mov	r0, r4
 800d466:	4629      	mov	r1, r5
 800d468:	f7f3 f8c6 	bl	80005f8 <__aeabi_dmul>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	4620      	mov	r0, r4
 800d472:	4629      	mov	r1, r5
 800d474:	f7f2 ff0a 	bl	800028c <__adddf3>
 800d478:	4604      	mov	r4, r0
 800d47a:	460d      	mov	r5, r1
 800d47c:	ec45 4b10 	vmov	d0, r4, r5
 800d480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d484:	2d00      	cmp	r5, #0
 800d486:	dc0e      	bgt.n	800d4a6 <__ieee754_sqrt+0x56>
 800d488:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d48c:	4322      	orrs	r2, r4
 800d48e:	d0f5      	beq.n	800d47c <__ieee754_sqrt+0x2c>
 800d490:	b19d      	cbz	r5, 800d4ba <__ieee754_sqrt+0x6a>
 800d492:	4622      	mov	r2, r4
 800d494:	4620      	mov	r0, r4
 800d496:	4629      	mov	r1, r5
 800d498:	f7f2 fef6 	bl	8000288 <__aeabi_dsub>
 800d49c:	4602      	mov	r2, r0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	f7f3 f9d4 	bl	800084c <__aeabi_ddiv>
 800d4a4:	e7e8      	b.n	800d478 <__ieee754_sqrt+0x28>
 800d4a6:	152a      	asrs	r2, r5, #20
 800d4a8:	d115      	bne.n	800d4d6 <__ieee754_sqrt+0x86>
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	e009      	b.n	800d4c2 <__ieee754_sqrt+0x72>
 800d4ae:	0acb      	lsrs	r3, r1, #11
 800d4b0:	3a15      	subs	r2, #21
 800d4b2:	0549      	lsls	r1, r1, #21
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d0fa      	beq.n	800d4ae <__ieee754_sqrt+0x5e>
 800d4b8:	e7f7      	b.n	800d4aa <__ieee754_sqrt+0x5a>
 800d4ba:	462a      	mov	r2, r5
 800d4bc:	e7fa      	b.n	800d4b4 <__ieee754_sqrt+0x64>
 800d4be:	005b      	lsls	r3, r3, #1
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	02dc      	lsls	r4, r3, #11
 800d4c4:	d5fb      	bpl.n	800d4be <__ieee754_sqrt+0x6e>
 800d4c6:	1e44      	subs	r4, r0, #1
 800d4c8:	1b12      	subs	r2, r2, r4
 800d4ca:	f1c0 0420 	rsb	r4, r0, #32
 800d4ce:	fa21 f404 	lsr.w	r4, r1, r4
 800d4d2:	4323      	orrs	r3, r4
 800d4d4:	4081      	lsls	r1, r0
 800d4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d4de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d4e2:	07d2      	lsls	r2, r2, #31
 800d4e4:	bf5c      	itt	pl
 800d4e6:	005b      	lslpl	r3, r3, #1
 800d4e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d4f0:	bf58      	it	pl
 800d4f2:	0049      	lslpl	r1, r1, #1
 800d4f4:	2600      	movs	r6, #0
 800d4f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d4fa:	106d      	asrs	r5, r5, #1
 800d4fc:	0049      	lsls	r1, r1, #1
 800d4fe:	2016      	movs	r0, #22
 800d500:	4632      	mov	r2, r6
 800d502:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d506:	1917      	adds	r7, r2, r4
 800d508:	429f      	cmp	r7, r3
 800d50a:	bfde      	ittt	le
 800d50c:	193a      	addle	r2, r7, r4
 800d50e:	1bdb      	suble	r3, r3, r7
 800d510:	1936      	addle	r6, r6, r4
 800d512:	0fcf      	lsrs	r7, r1, #31
 800d514:	3801      	subs	r0, #1
 800d516:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d51a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d51e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d522:	d1f0      	bne.n	800d506 <__ieee754_sqrt+0xb6>
 800d524:	4604      	mov	r4, r0
 800d526:	2720      	movs	r7, #32
 800d528:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d52c:	429a      	cmp	r2, r3
 800d52e:	eb00 0e0c 	add.w	lr, r0, ip
 800d532:	db02      	blt.n	800d53a <__ieee754_sqrt+0xea>
 800d534:	d113      	bne.n	800d55e <__ieee754_sqrt+0x10e>
 800d536:	458e      	cmp	lr, r1
 800d538:	d811      	bhi.n	800d55e <__ieee754_sqrt+0x10e>
 800d53a:	f1be 0f00 	cmp.w	lr, #0
 800d53e:	eb0e 000c 	add.w	r0, lr, ip
 800d542:	da42      	bge.n	800d5ca <__ieee754_sqrt+0x17a>
 800d544:	2800      	cmp	r0, #0
 800d546:	db40      	blt.n	800d5ca <__ieee754_sqrt+0x17a>
 800d548:	f102 0801 	add.w	r8, r2, #1
 800d54c:	1a9b      	subs	r3, r3, r2
 800d54e:	458e      	cmp	lr, r1
 800d550:	bf88      	it	hi
 800d552:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800d556:	eba1 010e 	sub.w	r1, r1, lr
 800d55a:	4464      	add	r4, ip
 800d55c:	4642      	mov	r2, r8
 800d55e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d562:	3f01      	subs	r7, #1
 800d564:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d568:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d56c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d570:	d1dc      	bne.n	800d52c <__ieee754_sqrt+0xdc>
 800d572:	4319      	orrs	r1, r3
 800d574:	d01b      	beq.n	800d5ae <__ieee754_sqrt+0x15e>
 800d576:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d5fc <__ieee754_sqrt+0x1ac>
 800d57a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d600 <__ieee754_sqrt+0x1b0>
 800d57e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d582:	e9db 2300 	ldrd	r2, r3, [fp]
 800d586:	f7f2 fe7f 	bl	8000288 <__aeabi_dsub>
 800d58a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d58e:	4602      	mov	r2, r0
 800d590:	460b      	mov	r3, r1
 800d592:	4640      	mov	r0, r8
 800d594:	4649      	mov	r1, r9
 800d596:	f7f3 faab 	bl	8000af0 <__aeabi_dcmple>
 800d59a:	b140      	cbz	r0, 800d5ae <__ieee754_sqrt+0x15e>
 800d59c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800d5a0:	e9da 0100 	ldrd	r0, r1, [sl]
 800d5a4:	e9db 2300 	ldrd	r2, r3, [fp]
 800d5a8:	d111      	bne.n	800d5ce <__ieee754_sqrt+0x17e>
 800d5aa:	3601      	adds	r6, #1
 800d5ac:	463c      	mov	r4, r7
 800d5ae:	1072      	asrs	r2, r6, #1
 800d5b0:	0863      	lsrs	r3, r4, #1
 800d5b2:	07f1      	lsls	r1, r6, #31
 800d5b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d5b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d5bc:	bf48      	it	mi
 800d5be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d5c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	e756      	b.n	800d478 <__ieee754_sqrt+0x28>
 800d5ca:	4690      	mov	r8, r2
 800d5cc:	e7be      	b.n	800d54c <__ieee754_sqrt+0xfc>
 800d5ce:	f7f2 fe5d 	bl	800028c <__adddf3>
 800d5d2:	e9da 8900 	ldrd	r8, r9, [sl]
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	4640      	mov	r0, r8
 800d5dc:	4649      	mov	r1, r9
 800d5de:	f7f3 fa7d 	bl	8000adc <__aeabi_dcmplt>
 800d5e2:	b120      	cbz	r0, 800d5ee <__ieee754_sqrt+0x19e>
 800d5e4:	1ca0      	adds	r0, r4, #2
 800d5e6:	bf08      	it	eq
 800d5e8:	3601      	addeq	r6, #1
 800d5ea:	3402      	adds	r4, #2
 800d5ec:	e7df      	b.n	800d5ae <__ieee754_sqrt+0x15e>
 800d5ee:	1c63      	adds	r3, r4, #1
 800d5f0:	f023 0401 	bic.w	r4, r3, #1
 800d5f4:	e7db      	b.n	800d5ae <__ieee754_sqrt+0x15e>
 800d5f6:	bf00      	nop
 800d5f8:	7ff00000 	.word	0x7ff00000
 800d5fc:	200001f8 	.word	0x200001f8
 800d600:	200001f0 	.word	0x200001f0

0800d604 <_init>:
 800d604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d606:	bf00      	nop
 800d608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60a:	bc08      	pop	{r3}
 800d60c:	469e      	mov	lr, r3
 800d60e:	4770      	bx	lr

0800d610 <_fini>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	bf00      	nop
 800d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d616:	bc08      	pop	{r3}
 800d618:	469e      	mov	lr, r3
 800d61a:	4770      	bx	lr
