
Sensor_data_collection_CAN_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046a8  080046a8  000056a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e8  080046e8  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  080046e8  080046e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046f0  080046f0  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f0  080046f0  000056f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046f4  080046f4  000056f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080046f8  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006070  2**0
                  CONTENTS
 10 .bss          000001ec  20000070  20000070  00006070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  00006070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006fc3  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000160a  00000000  00000000  0000d063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000678  00000000  00000000  0000e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c8  00000000  00000000  0000ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000214f5  00000000  00000000  0000f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007223  00000000  00000000  000306a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf961  00000000  00000000  000378c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107229  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fac  00000000  00000000  0010726c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00109218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800468c 	.word	0x0800468c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800468c 	.word	0x0800468c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <Read_MQ135_ADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_MQ135_ADC(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000e36:	480a      	ldr	r0, [pc, #40]	@ (8000e60 <Read_MQ135_ADC+0x30>)
 8000e38:	f000 fc86 	bl	8001748 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e40:	4807      	ldr	r0, [pc, #28]	@ (8000e60 <Read_MQ135_ADC+0x30>)
 8000e42:	f000 fd86 	bl	8001952 <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000e46:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <Read_MQ135_ADC+0x30>)
 8000e48:	f000 fe0e 	bl	8001a68 <HAL_ADC_GetValue>
 8000e4c:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);
 8000e4e:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <Read_MQ135_ADC+0x30>)
 8000e50:	f000 fd4c 	bl	80018ec <HAL_ADC_Stop>
    return adcValue;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000008c 	.word	0x2000008c
 8000e64:	00000000 	.word	0x00000000

08000e68 <Convert_ADC_to_Concentration>:

float Convert_ADC_to_Concentration(uint32_t adcValue) {
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
    float Rs = 0, ratio = 0, concentration = 0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	f04f 0300 	mov.w	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
    if (adcValue != 0) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d051      	beq.n	8000f2c <Convert_ADC_to_Concentration+0xc4>
        Rs = R_L * ((4095.0 - adcValue) / adcValue);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fadf 	bl	800044c <__aeabi_ui2d>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	a132      	add	r1, pc, #200	@ (adr r1, 8000f5c <Convert_ADC_to_Concentration+0xf4>)
 8000e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e98:	f7ff f99a 	bl	80001d0 <__aeabi_dsub>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4614      	mov	r4, r2
 8000ea2:	461d      	mov	r5, r3
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fad1 	bl	800044c <__aeabi_ui2d>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4620      	mov	r0, r4
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	f7ff fc6f 	bl	8000794 <__aeabi_ddiv>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b25      	ldr	r3, [pc, #148]	@ (8000f58 <Convert_ADC_to_Concentration+0xf0>)
 8000ec4:	f7ff fb3c 	bl	8000540 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fde6 	bl	8000aa0 <__aeabi_d2f>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	613b      	str	r3, [r7, #16]
        ratio = Rs / R0;
 8000ed8:	6938      	ldr	r0, [r7, #16]
 8000eda:	f7ff fad9 	bl	8000490 <__aeabi_f2d>
 8000ede:	a318      	add	r3, pc, #96	@ (adr r3, 8000f40 <Convert_ADC_to_Concentration+0xd8>)
 8000ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee4:	f7ff fc56 	bl	8000794 <__aeabi_ddiv>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4610      	mov	r0, r2
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f7ff fdd6 	bl	8000aa0 <__aeabi_d2f>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60fb      	str	r3, [r7, #12]
        concentration = A * pow(ratio, -B);
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff fac9 	bl	8000490 <__aeabi_f2d>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8000f48 <Convert_ADC_to_Concentration+0xe0>
 8000f06:	ec43 2b10 	vmov	d0, r2, r3
 8000f0a:	f002 fc61 	bl	80037d0 <pow>
 8000f0e:	ec51 0b10 	vmov	r0, r1, d0
 8000f12:	a30f      	add	r3, pc, #60	@ (adr r3, 8000f50 <Convert_ADC_to_Concentration+0xe8>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb12 	bl	8000540 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fdbc 	bl	8000aa0 <__aeabi_d2f>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	617b      	str	r3, [r7, #20]
    }
    return concentration;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	ee07 3a90 	vmov	s15, r3
}
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f3c:	f3af 8000 	nop.w
 8000f40:	eb851eb8 	.word	0xeb851eb8
 8000f44:	40532851 	.word	0x40532851
 8000f48:	c49ba5e3 	.word	0xc49ba5e3
 8000f4c:	c001b020 	.word	0xc001b020
 8000f50:	490f3d8b 	.word	0x490f3d8b
 8000f54:	405d2688 	.word	0x405d2688
 8000f58:	40240000 	.word	0x40240000
 8000f5c:	00000000 	.word	0x00000000
 8000f60:	40affe00 	.word	0x40affe00

08000f64 <send_CAN_message>:


void send_CAN_message(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
    uint32_t adcValue = Read_MQ135_ADC();
 8000f6a:	f7ff ff61 	bl	8000e30 <Read_MQ135_ADC>
 8000f6e:	60f8      	str	r0, [r7, #12]
    float gas_ppm = Convert_ADC_to_Concentration(adcValue);
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff ff79 	bl	8000e68 <Convert_ADC_to_Concentration>
 8000f76:	ed87 0a02 	vstr	s0, [r7, #8]
    uint16_t ppm_int = (uint16_t)gas_ppm;  // Convert to integer for transmission
 8000f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f82:	ee17 3a90 	vmov	r3, s15
 8000f86:	80fb      	strh	r3, [r7, #6]

    TxData[0] = (uint8_t)(ppm_int >> 8);  // High byte of gas PPM
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <send_CAN_message+0x68>)
 8000f92:	701a      	strb	r2, [r3, #0]
    TxData[1] = (uint8_t)(ppm_int & 0xFF);  // Low byte of gas PPM
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <send_CAN_message+0x68>)
 8000f9a:	705a      	strb	r2, [r3, #1]
    TxData[2] = (uint8_t)(adcValue >> 8);  // High byte of ADC value
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <send_CAN_message+0x68>)
 8000fa4:	709a      	strb	r2, [r3, #2]
    TxData[3] = (uint8_t)(adcValue & 0xFF);  // Low byte of ADC value
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <send_CAN_message+0x68>)
 8000fac:	70da      	strb	r2, [r3, #3]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <send_CAN_message+0x6c>)
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <send_CAN_message+0x68>)
 8000fb2:	4908      	ldr	r1, [pc, #32]	@ (8000fd4 <send_CAN_message+0x70>)
 8000fb4:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <send_CAN_message+0x74>)
 8000fb6:	f001 f9a3 	bl	8002300 <HAL_CAN_AddTxMessage>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <send_CAN_message+0x60>
        Error_Handler();
 8000fc0:	f000 f9b0 	bl	8001324 <Error_Handler>
    }
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000114 	.word	0x20000114
 8000fd0:	2000011c 	.word	0x2000011c
 8000fd4:	200000fc 	.word	0x200000fc
 8000fd8:	200000d4 	.word	0x200000d4

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe0:	f000 fad8 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe4:	f000 f82e 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe8:	f000 f93c 	bl	8001264 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fec:	f000 f894 	bl	8001118 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000ff0:	f000 f8e4 	bl	80011bc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000ff4:	4811      	ldr	r0, [pc, #68]	@ (800103c <main+0x60>)
 8000ff6:	f001 f93f 	bl	8002278 <HAL_CAN_Start>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <main+0x28>
         Error_Handler();
 8001000:	f000 f990 	bl	8001324 <Error_Handler>
     }


  	  TxHeader.DLC = 4;  // Data length (4 bytes)
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <main+0x64>)
 8001006:	2204      	movs	r2, #4
 8001008:	611a      	str	r2, [r3, #16]
      TxHeader.IDE = CAN_ID_STD;
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <main+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
      TxHeader.RTR = CAN_RTR_DATA;
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <main+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
      TxHeader.StdId = 0x103;  // CAN ID for this message
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <main+0x64>)
 8001018:	f240 1203 	movw	r2, #259	@ 0x103
 800101c:	601a      	str	r2, [r3, #0]
      TxHeader.ExtId = 0x00;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <main+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
      TxHeader.TransmitGlobalTime = DISABLE;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <main+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	751a      	strb	r2, [r3, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  send_CAN_message();  // Send ADC data over CAN
 800102a:	f7ff ff9b 	bl	8000f64 <send_CAN_message>
	  HAL_Delay(2000);  // Transmit every 2 seconds
 800102e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001032:	f000 fb21 	bl	8001678 <HAL_Delay>
	  send_CAN_message();  // Send ADC data over CAN
 8001036:	bf00      	nop
 8001038:	e7f7      	b.n	800102a <main+0x4e>
 800103a:	bf00      	nop
 800103c:	200000d4 	.word	0x200000d4
 8001040:	200000fc 	.word	0x200000fc

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fb8a 	bl	800376c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <SystemClock_Config+0xcc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <SystemClock_Config+0xcc>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <SystemClock_Config+0xd0>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b4:	2308      	movs	r3, #8
 80010b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80010b8:	2332      	movs	r3, #50	@ 0x32
 80010ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010bc:	2304      	movs	r3, #4
 80010be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	f107 0320 	add.w	r3, r7, #32
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 feeb 	bl	8002ea4 <HAL_RCC_OscConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d4:	f000 f926 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d8:	230f      	movs	r3, #15
 80010da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010dc:	2302      	movs	r3, #2
 80010de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 f94c 	bl	8003394 <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001102:	f000 f90f 	bl	8001324 <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3750      	adds	r7, #80	@ 0x50
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000

08001118 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800112a:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800112c:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <MX_ADC1_Init+0x9c>)
 800112e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001132:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001136:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800115a:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <MX_ADC1_Init+0xa0>)
 800115c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001166:	2201      	movs	r2, #1
 8001168:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_ADC1_Init+0x98>)
 8001174:	2201      	movs	r2, #1
 8001176:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800117a:	f000 faa1 	bl	80016c0 <HAL_ADC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001184:	f000 f8ce 	bl	8001324 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_ADC1_Init+0x98>)
 800119a:	f000 fc73 	bl	8001a84 <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011a4:	f000 f8be 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000008c 	.word	0x2000008c
 80011b4:	40012000 	.word	0x40012000
 80011b8:	0f000001 	.word	0x0f000001

080011bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011c2:	4b26      	ldr	r3, [pc, #152]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011c4:	4a26      	ldr	r2, [pc, #152]	@ (8001260 <MX_CAN1_Init+0xa4>)
 80011c6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80011c8:	4b24      	ldr	r3, [pc, #144]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011ca:	2215      	movs	r2, #21
 80011cc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011ce:	4b23      	ldr	r3, [pc, #140]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d4:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011e0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011fa:	4b18      	ldr	r3, [pc, #96]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001200:	4b16      	ldr	r3, [pc, #88]	@ (800125c <MX_CAN1_Init+0xa0>)
 8001202:	2200      	movs	r2, #0
 8001204:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_CAN1_Init+0xa0>)
 8001208:	2200      	movs	r2, #0
 800120a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800120c:	4813      	ldr	r0, [pc, #76]	@ (800125c <MX_CAN1_Init+0xa0>)
 800120e:	f000 fe57 	bl	8001ec0 <HAL_CAN_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001218:	f000 f884 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800121c:	2301      	movs	r3, #1
 800121e:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;
 8001220:	2312      	movs	r3, #18
 8001222:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x103<<5;
 8001228:	f242 0360 	movw	r3, #8288	@ 0x2060
 800122c:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8001236:	f242 0360 	movw	r3, #8288	@ 0x2060
 800123a:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001240:	2301      	movs	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 40;
 8001244:	2328      	movs	r3, #40	@ 0x28
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <MX_CAN1_Init+0xa0>)
 800124e:	f000 ff33 	bl	80020b8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000d4 	.word	0x200000d4
 8001260:	40006400 	.word	0x40006400

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b27      	ldr	r3, [pc, #156]	@ (800131c <MX_GPIO_Init+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a26      	ldr	r2, [pc, #152]	@ (800131c <MX_GPIO_Init+0xb8>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b24      	ldr	r3, [pc, #144]	@ (800131c <MX_GPIO_Init+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <MX_GPIO_Init+0xb8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a1f      	ldr	r2, [pc, #124]	@ (800131c <MX_GPIO_Init+0xb8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <MX_GPIO_Init+0xb8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <MX_GPIO_Init+0xb8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a18      	ldr	r2, [pc, #96]	@ (800131c <MX_GPIO_Init+0xb8>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_GPIO_Init+0xb8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_GPIO_Init+0xb8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a11      	ldr	r2, [pc, #68]	@ (800131c <MX_GPIO_Init+0xb8>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_GPIO_Init+0xb8>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012f0:	480b      	ldr	r0, [pc, #44]	@ (8001320 <MX_GPIO_Init+0xbc>)
 80012f2:	f001 fdbd 	bl	8002e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4804      	ldr	r0, [pc, #16]	@ (8001320 <MX_GPIO_Init+0xbc>)
 8001310:	f001 fc12 	bl	8002b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	@ 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40020c00 	.word	0x40020c00

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <Error_Handler+0x8>

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <HAL_MspInit+0x4c>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001344:	6453      	str	r3, [r2, #68]	@ 0x44
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a08      	ldr	r2, [pc, #32]	@ (800137c <HAL_MspInit+0x4c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800136e:	2007      	movs	r0, #7
 8001370:	f001 fba0 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a17      	ldr	r2, [pc, #92]	@ (80013fc <HAL_ADC_MspInit+0x7c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d127      	bne.n	80013f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <HAL_ADC_MspInit+0x80>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	4a15      	ldr	r2, [pc, #84]	@ (8001400 <HAL_ADC_MspInit+0x80>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <HAL_ADC_MspInit+0x80>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_ADC_MspInit+0x80>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <HAL_ADC_MspInit+0x80>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_ADC_MspInit+0x80>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	@ (8001404 <HAL_ADC_MspInit+0x84>)
 80013ee:	f001 fba3 	bl	8002b38 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	@ 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40012000 	.word	0x40012000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000

08001408 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_CAN_MspInit+0x94>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d134      	bne.n	8001494 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <HAL_CAN_MspInit+0x98>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <HAL_CAN_MspInit+0x98>)
 8001434:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_CAN_MspInit+0x98>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_CAN_MspInit+0x98>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <HAL_CAN_MspInit+0x98>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_CAN_MspInit+0x98>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001462:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001474:	2309      	movs	r3, #9
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4809      	ldr	r0, [pc, #36]	@ (80014a4 <HAL_CAN_MspInit+0x9c>)
 8001480:	f001 fb5a 	bl	8002b38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2014      	movs	r0, #20
 800148a:	f001 fb1e 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800148e:	2014      	movs	r0, #20
 8001490:	f001 fb37 	bl	8002b02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	@ 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40006400 	.word	0x40006400
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020400 	.word	0x40020400

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f89b 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <CAN1_RX0_IRQHandler+0x10>)
 800150e:	f000 ffc7 	bl	80024a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200000d4 	.word	0x200000d4

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001578 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001544:	f7ff ffea 	bl	800151c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001548:	480c      	ldr	r0, [pc, #48]	@ (800157c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800154a:	490d      	ldr	r1, [pc, #52]	@ (8001580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001560:	4c0a      	ldr	r4, [pc, #40]	@ (800158c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156e:	f002 f90b 	bl	8003788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001572:	f7ff fd33 	bl	8000fdc <main>
  bx  lr    
 8001576:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001584:	080046f8 	.word	0x080046f8
  ldr r2, =_sbss
 8001588:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800158c:	2000025c 	.word	0x2000025c

08001590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC_IRQHandler>
	...

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001598:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <HAL_Init+0x40>)
 800159e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <HAL_Init+0x40>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <HAL_Init+0x40>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f001 fa79 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f000 f808 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff feb2 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_InitTick+0x54>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_InitTick+0x58>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 fa91 	bl	8002b1e <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001614:	f001 fa59 	bl	8002aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_InitTick+0x5c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000000 	.word	0x20000000
 8001630:	20000008 	.word	0x20000008
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	20000120 	.word	0x20000120

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000120 	.word	0x20000120

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008

080016c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e033      	b.n	800173e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fe4e 	bl	8001380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001706:	f023 0302 	bic.w	r3, r3, #2
 800170a:	f043 0202 	orr.w	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fad8 	bl	8001cc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f023 0303 	bic.w	r3, r3, #3
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	641a      	str	r2, [r3, #64]	@ 0x40
 800172e:	e001      	b.n	8001734 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Start+0x1a>
 800175e:	2302      	movs	r3, #2
 8001760:	e0b2      	b.n	80018c8 <HAL_ADC_Start+0x180>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d018      	beq.n	80017aa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001788:	4b52      	ldr	r3, [pc, #328]	@ (80018d4 <HAL_ADC_Start+0x18c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a52      	ldr	r2, [pc, #328]	@ (80018d8 <HAL_ADC_Start+0x190>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9a      	lsrs	r2, r3, #18
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800179c:	e002      	b.n	80017a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f9      	bne.n	800179e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d17a      	bne.n	80018ae <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017f6:	d106      	bne.n	8001806 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fc:	f023 0206 	bic.w	r2, r3, #6
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	645a      	str	r2, [r3, #68]	@ 0x44
 8001804:	e002      	b.n	800180c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001814:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <HAL_ADC_Start+0x194>)
 8001816:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001820:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	2b00      	cmp	r3, #0
 800182c:	d12a      	bne.n	8001884 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2b      	ldr	r2, [pc, #172]	@ (80018e0 <HAL_ADC_Start+0x198>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d015      	beq.n	8001864 <HAL_ADC_Start+0x11c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a29      	ldr	r2, [pc, #164]	@ (80018e4 <HAL_ADC_Start+0x19c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d105      	bne.n	800184e <HAL_ADC_Start+0x106>
 8001842:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <HAL_ADC_Start+0x194>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00a      	beq.n	8001864 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a25      	ldr	r2, [pc, #148]	@ (80018e8 <HAL_ADC_Start+0x1a0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d136      	bne.n	80018c6 <HAL_ADC_Start+0x17e>
 8001858:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_ADC_Start+0x194>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	d130      	bne.n	80018c6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d129      	bne.n	80018c6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	e020      	b.n	80018c6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a15      	ldr	r2, [pc, #84]	@ (80018e0 <HAL_ADC_Start+0x198>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d11b      	bne.n	80018c6 <HAL_ADC_Start+0x17e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d114      	bne.n	80018c6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	e00b      	b.n	80018c6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f043 0210 	orr.w	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f043 0201 	orr.w	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	20000000 	.word	0x20000000
 80018d8:	431bde83 	.word	0x431bde83
 80018dc:	40012300 	.word	0x40012300
 80018e0:	40012000 	.word	0x40012000
 80018e4:	40012100 	.word	0x40012100
 80018e8:	40012200 	.word	0x40012200

080018ec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Stop+0x16>
 80018fe:	2302      	movs	r3, #2
 8001900:	e021      	b.n	8001946 <HAL_ADC_Stop+0x5a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800196e:	d113      	bne.n	8001998 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800197a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800197e:	d10b      	bne.n	8001998 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e063      	b.n	8001a60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001998:	f7ff fe62 	bl	8001660 <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800199e:	e021      	b.n	80019e4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019a6:	d01d      	beq.n	80019e4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_ADC_PollForConversion+0x6c>
 80019ae:	f7ff fe57 	bl	8001660 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d212      	bcs.n	80019e4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d00b      	beq.n	80019e4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f043 0204 	orr.w	r2, r3, #4
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e03d      	b.n	8001a60 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d1d6      	bne.n	80019a0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f06f 0212 	mvn.w	r2, #18
 80019fa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d123      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11f      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d111      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1c>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e105      	b.n	8001cac <HAL_ADC_ConfigChannel+0x228>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b09      	cmp	r3, #9
 8001aae:	d925      	bls.n	8001afc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68d9      	ldr	r1, [r3, #12]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b1e      	subs	r3, #30
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43da      	mvns	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68d9      	ldr	r1, [r3, #12]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	4603      	mov	r3, r0
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4403      	add	r3, r0
 8001aee:	3b1e      	subs	r3, #30
 8001af0:	409a      	lsls	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	e022      	b.n	8001b42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6919      	ldr	r1, [r3, #16]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	2207      	movs	r2, #7
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4403      	add	r3, r0
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d824      	bhi.n	8001b94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b05      	subs	r3, #5
 8001b5c:	221f      	movs	r2, #31
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	400a      	ands	r2, r1
 8001b6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b05      	subs	r3, #5
 8001b86:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b92:	e04c      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d824      	bhi.n	8001be6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b23      	subs	r3, #35	@ 0x23
 8001bae:	221f      	movs	r2, #31
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	400a      	ands	r2, r1
 8001bbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b23      	subs	r3, #35	@ 0x23
 8001bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001be4:	e023      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3b41      	subs	r3, #65	@ 0x41
 8001bf8:	221f      	movs	r2, #31
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	400a      	ands	r2, r1
 8001c06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	3b41      	subs	r3, #65	@ 0x41
 8001c22:	fa00 f203 	lsl.w	r2, r0, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c2e:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <HAL_ADC_ConfigChannel+0x234>)
 8001c30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_ADC_ConfigChannel+0x238>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1cc>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b12      	cmp	r3, #18
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a19      	ldr	r2, [pc, #100]	@ (8001cbc <HAL_ADC_ConfigChannel+0x238>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d123      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x21e>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d003      	beq.n	8001c6a <HAL_ADC_ConfigChannel+0x1e6>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b11      	cmp	r3, #17
 8001c68:	d11b      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d111      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x23c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a10      	ldr	r2, [pc, #64]	@ (8001cc4 <HAL_ADC_ConfigChannel+0x240>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9a      	lsrs	r2, r3, #18
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40012300 	.word	0x40012300
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	431bde83 	.word	0x431bde83

08001cc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd0:	4b79      	ldr	r3, [pc, #484]	@ (8001eb8 <ADC_Init+0x1f0>)
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	021a      	lsls	r2, r3, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5a:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <ADC_Init+0x1f4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d022      	beq.n	8001da6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6899      	ldr	r1, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6899      	ldr	r1, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	e00f      	b.n	8001dc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dc4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0202 	bic.w	r2, r2, #2
 8001dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6899      	ldr	r1, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7e1b      	ldrb	r3, [r3, #24]
 8001de0:	005a      	lsls	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e02:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6859      	ldr	r1, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	035a      	lsls	r2, r3, #13
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	e007      	b.n	8001e3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e3a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	051a      	lsls	r2, r3, #20
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6899      	ldr	r1, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e7e:	025a      	lsls	r2, r3, #9
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6899      	ldr	r1, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	029a      	lsls	r2, r3, #10
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40012300 	.word	0x40012300
 8001ebc:	0f000001 	.word	0x0f000001

08001ec0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0ed      	b.n	80020ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fa92 	bl	8001408 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef4:	f7ff fbb4 	bl	8001660 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001efa:	e012      	b.n	8001f22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001efc:	f7ff fbb0 	bl	8001660 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b0a      	cmp	r3, #10
 8001f08:	d90b      	bls.n	8001f22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2205      	movs	r2, #5
 8001f1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0c5      	b.n	80020ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0e5      	beq.n	8001efc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0202 	bic.w	r2, r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f40:	f7ff fb8e 	bl	8001660 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f46:	e012      	b.n	8001f6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f48:	f7ff fb8a 	bl	8001660 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b0a      	cmp	r3, #10
 8001f54:	d90b      	bls.n	8001f6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2205      	movs	r2, #5
 8001f66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e09f      	b.n	80020ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e5      	bne.n	8001f48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7e1b      	ldrb	r3, [r3, #24]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d108      	bne.n	8001f96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e007      	b.n	8001fa6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7e5b      	ldrb	r3, [r3, #25]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d108      	bne.n	8001fc0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e007      	b.n	8001fd0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7e9b      	ldrb	r3, [r3, #26]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d108      	bne.n	8001fea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0220 	orr.w	r2, r2, #32
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e007      	b.n	8001ffa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0220 	bic.w	r2, r2, #32
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7edb      	ldrb	r3, [r3, #27]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d108      	bne.n	8002014 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0210 	bic.w	r2, r2, #16
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e007      	b.n	8002024 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0210 	orr.w	r2, r2, #16
 8002022:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7f1b      	ldrb	r3, [r3, #28]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d108      	bne.n	800203e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e007      	b.n	800204e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0208 	bic.w	r2, r2, #8
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7f5b      	ldrb	r3, [r3, #29]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d108      	bne.n	8002068 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0204 	orr.w	r2, r2, #4
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e007      	b.n	8002078 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0204 	bic.w	r2, r2, #4
 8002076:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	ea42 0103 	orr.w	r1, r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d003      	beq.n	80020de <HAL_CAN_ConfigFilter+0x26>
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	f040 80be 	bne.w	800225a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80020de:	4b65      	ldr	r3, [pc, #404]	@ (8002274 <HAL_CAN_ConfigFilter+0x1bc>)
 80020e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020f8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	431a      	orrs	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2201      	movs	r2, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	43db      	mvns	r3, r3
 8002130:	401a      	ands	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d123      	bne.n	8002188 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43db      	mvns	r3, r3
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002162:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3248      	adds	r2, #72	@ 0x48
 8002168:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800217c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800217e:	6979      	ldr	r1, [r7, #20]
 8002180:	3348      	adds	r3, #72	@ 0x48
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d122      	bne.n	80021d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3248      	adds	r2, #72	@ 0x48
 80021b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021cc:	6979      	ldr	r1, [r7, #20]
 80021ce:	3348      	adds	r3, #72	@ 0x48
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	401a      	ands	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80021f0:	e007      	b.n	8002202 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	401a      	ands	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800221c:	e007      	b.n	800222e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	431a      	orrs	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	431a      	orrs	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800224c:	f023 0201 	bic.w	r2, r3, #1
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e006      	b.n	8002268 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
  }
}
 8002268:	4618      	mov	r0, r3
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40006400 	.word	0x40006400

08002278 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d12e      	bne.n	80022ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022a4:	f7ff f9dc 	bl	8001660 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022aa:	e012      	b.n	80022d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022ac:	f7ff f9d8 	bl	8001660 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b0a      	cmp	r3, #10
 80022b8:	d90b      	bls.n	80022d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2205      	movs	r2, #5
 80022ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e012      	b.n	80022f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e5      	bne.n	80022ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e006      	b.n	80022f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
  }
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002314:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800231e:	7ffb      	ldrb	r3, [r7, #31]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d003      	beq.n	800232c <HAL_CAN_AddTxMessage+0x2c>
 8002324:	7ffb      	ldrb	r3, [r7, #31]
 8002326:	2b02      	cmp	r3, #2
 8002328:	f040 80ad 	bne.w	8002486 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8095 	beq.w	8002476 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	0e1b      	lsrs	r3, r3, #24
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002356:	2201      	movs	r2, #1
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	6809      	ldr	r1, [r1, #0]
 8002376:	431a      	orrs	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3318      	adds	r3, #24
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	440b      	add	r3, r1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e00f      	b.n	80023a4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800238e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002398:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3318      	adds	r3, #24
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	440b      	add	r3, r1
 80023a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6819      	ldr	r1, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3318      	adds	r3, #24
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	440b      	add	r3, r1
 80023b4:	3304      	adds	r3, #4
 80023b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	7d1b      	ldrb	r3, [r3, #20]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d111      	bne.n	80023e4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3318      	adds	r3, #24
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	4413      	add	r3, r2
 80023cc:	3304      	adds	r3, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	6811      	ldr	r1, [r2, #0]
 80023d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3318      	adds	r3, #24
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	440b      	add	r3, r1
 80023e0:	3304      	adds	r3, #4
 80023e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3307      	adds	r3, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	061a      	lsls	r2, r3, #24
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3306      	adds	r3, #6
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3305      	adds	r3, #5
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	4313      	orrs	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	3204      	adds	r2, #4
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	4610      	mov	r0, r2
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	6811      	ldr	r1, [r2, #0]
 800240c:	ea43 0200 	orr.w	r2, r3, r0
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	440b      	add	r3, r1
 8002416:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800241a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3303      	adds	r3, #3
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	061a      	lsls	r2, r3, #24
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3302      	adds	r3, #2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	041b      	lsls	r3, r3, #16
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3301      	adds	r3, #1
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	4313      	orrs	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	4610      	mov	r0, r2
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	6811      	ldr	r1, [r2, #0]
 8002442:	ea43 0200 	orr.w	r2, r3, r0
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	440b      	add	r3, r1
 800244c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002450:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3318      	adds	r3, #24
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	4413      	add	r3, r2
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	6811      	ldr	r1, [r2, #0]
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3318      	adds	r3, #24
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	440b      	add	r3, r1
 8002470:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e00e      	b.n	8002494 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e006      	b.n	8002494 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3724      	adds	r7, #36	@ 0x24
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d07c      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d023      	beq.n	8002538 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f983 	bl	800280e <HAL_CAN_TxMailbox0CompleteCallback>
 8002508:	e016      	b.n	8002538 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
 800251c:	e00c      	b.n	8002538 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002530:	e002      	b.n	8002538 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f989 	bl	800284a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d024      	beq.n	800258c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800254a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f963 	bl	8002822 <HAL_CAN_TxMailbox1CompleteCallback>
 800255c:	e016      	b.n	800258c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002570:	e00c      	b.n	800258c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
 8002584:	e002      	b.n	800258c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f969 	bl	800285e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d024      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800259e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f943 	bl	8002836 <HAL_CAN_TxMailbox2CompleteCallback>
 80025b0:	e016      	b.n	80025e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c4:	e00c      	b.n	80025e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d8:	e002      	b.n	80025e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f949 	bl	8002872 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2210      	movs	r2, #16
 8002602:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2208      	movs	r2, #8
 800261e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f93a 	bl	800289a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f921 	bl	8002886 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2208      	movs	r2, #8
 8002682:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f91c 	bl	80028c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f903 	bl	80028ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2210      	movs	r2, #16
 80026c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f906 	bl	80028d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2208      	movs	r2, #8
 80026e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8ff 	bl	80028ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d07b      	beq.n	80027ee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d072      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800275a:	2b00      	cmp	r3, #0
 800275c:	d043      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002764:	2b00      	cmp	r3, #0
 8002766:	d03e      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800276e:	2b60      	cmp	r3, #96	@ 0x60
 8002770:	d02b      	beq.n	80027ca <HAL_CAN_IRQHandler+0x32a>
 8002772:	2b60      	cmp	r3, #96	@ 0x60
 8002774:	d82e      	bhi.n	80027d4 <HAL_CAN_IRQHandler+0x334>
 8002776:	2b50      	cmp	r3, #80	@ 0x50
 8002778:	d022      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x320>
 800277a:	2b50      	cmp	r3, #80	@ 0x50
 800277c:	d82a      	bhi.n	80027d4 <HAL_CAN_IRQHandler+0x334>
 800277e:	2b40      	cmp	r3, #64	@ 0x40
 8002780:	d019      	beq.n	80027b6 <HAL_CAN_IRQHandler+0x316>
 8002782:	2b40      	cmp	r3, #64	@ 0x40
 8002784:	d826      	bhi.n	80027d4 <HAL_CAN_IRQHandler+0x334>
 8002786:	2b30      	cmp	r3, #48	@ 0x30
 8002788:	d010      	beq.n	80027ac <HAL_CAN_IRQHandler+0x30c>
 800278a:	2b30      	cmp	r3, #48	@ 0x30
 800278c:	d822      	bhi.n	80027d4 <HAL_CAN_IRQHandler+0x334>
 800278e:	2b10      	cmp	r3, #16
 8002790:	d002      	beq.n	8002798 <HAL_CAN_IRQHandler+0x2f8>
 8002792:	2b20      	cmp	r3, #32
 8002794:	d005      	beq.n	80027a2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002796:	e01d      	b.n	80027d4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027a0:	e019      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027aa:	e014      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027b4:	e00f      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027be:	e00a      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027c8:	e005      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027d2:	e000      	b.n	80027d6 <HAL_CAN_IRQHandler+0x336>
            break;
 80027d4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80027e4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2204      	movs	r2, #4
 80027ec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f87c 	bl	80028fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	@ 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	@ (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4907      	ldr	r1, [pc, #28]	@ (80029b0 <__NVIC_EnableIRQ+0x38>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	@ (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	@ (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	@ 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a80:	d301      	bcc.n	8002a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00f      	b.n	8002aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a86:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <SysTick_Config+0x40>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8e:	210f      	movs	r1, #15
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a94:	f7ff ff8e 	bl	80029b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <SysTick_Config+0x40>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9e:	4b04      	ldr	r3, [pc, #16]	@ (8002ab0 <SysTick_Config+0x40>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff29 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff ff3e 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff8e 	bl	8002a08 <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5d 	bl	80029b4 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff31 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffa2 	bl	8002a70 <SysTick_Config>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	@ 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	e16b      	b.n	8002e2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b54:	2201      	movs	r2, #1
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	f040 815a 	bne.w	8002e26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d005      	beq.n	8002b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d130      	bne.n	8002bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 0201 	and.w	r2, r3, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d017      	beq.n	8002c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d123      	bne.n	8002c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3208      	adds	r2, #8
 8002c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	220f      	movs	r2, #15
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	08da      	lsrs	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3208      	adds	r2, #8
 8002c76:	69b9      	ldr	r1, [r7, #24]
 8002c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0203 	and.w	r2, r3, #3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80b4 	beq.w	8002e26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b60      	ldr	r3, [pc, #384]	@ (8002e44 <HAL_GPIO_Init+0x30c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002e44 <HAL_GPIO_Init+0x30c>)
 8002cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	4b5d      	ldr	r3, [pc, #372]	@ (8002e44 <HAL_GPIO_Init+0x30c>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cda:	4a5b      	ldr	r2, [pc, #364]	@ (8002e48 <HAL_GPIO_Init+0x310>)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	220f      	movs	r2, #15
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a52      	ldr	r2, [pc, #328]	@ (8002e4c <HAL_GPIO_Init+0x314>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d02b      	beq.n	8002d5e <HAL_GPIO_Init+0x226>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a51      	ldr	r2, [pc, #324]	@ (8002e50 <HAL_GPIO_Init+0x318>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d025      	beq.n	8002d5a <HAL_GPIO_Init+0x222>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a50      	ldr	r2, [pc, #320]	@ (8002e54 <HAL_GPIO_Init+0x31c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01f      	beq.n	8002d56 <HAL_GPIO_Init+0x21e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4f      	ldr	r2, [pc, #316]	@ (8002e58 <HAL_GPIO_Init+0x320>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d019      	beq.n	8002d52 <HAL_GPIO_Init+0x21a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4e      	ldr	r2, [pc, #312]	@ (8002e5c <HAL_GPIO_Init+0x324>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_GPIO_Init+0x216>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4d      	ldr	r2, [pc, #308]	@ (8002e60 <HAL_GPIO_Init+0x328>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00d      	beq.n	8002d4a <HAL_GPIO_Init+0x212>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4c      	ldr	r2, [pc, #304]	@ (8002e64 <HAL_GPIO_Init+0x32c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <HAL_GPIO_Init+0x20e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4b      	ldr	r2, [pc, #300]	@ (8002e68 <HAL_GPIO_Init+0x330>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d101      	bne.n	8002d42 <HAL_GPIO_Init+0x20a>
 8002d3e:	2307      	movs	r3, #7
 8002d40:	e00e      	b.n	8002d60 <HAL_GPIO_Init+0x228>
 8002d42:	2308      	movs	r3, #8
 8002d44:	e00c      	b.n	8002d60 <HAL_GPIO_Init+0x228>
 8002d46:	2306      	movs	r3, #6
 8002d48:	e00a      	b.n	8002d60 <HAL_GPIO_Init+0x228>
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	e008      	b.n	8002d60 <HAL_GPIO_Init+0x228>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x228>
 8002d52:	2303      	movs	r3, #3
 8002d54:	e004      	b.n	8002d60 <HAL_GPIO_Init+0x228>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x228>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x228>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	f002 0203 	and.w	r2, r2, #3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4093      	lsls	r3, r2
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d70:	4935      	ldr	r1, [pc, #212]	@ (8002e48 <HAL_GPIO_Init+0x310>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e6c <HAL_GPIO_Init+0x334>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da2:	4a32      	ldr	r2, [pc, #200]	@ (8002e6c <HAL_GPIO_Init+0x334>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da8:	4b30      	ldr	r3, [pc, #192]	@ (8002e6c <HAL_GPIO_Init+0x334>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dcc:	4a27      	ldr	r2, [pc, #156]	@ (8002e6c <HAL_GPIO_Init+0x334>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd2:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <HAL_GPIO_Init+0x334>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e6c <HAL_GPIO_Init+0x334>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <HAL_GPIO_Init+0x334>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e20:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <HAL_GPIO_Init+0x334>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	f67f ae90 	bls.w	8002b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3724      	adds	r7, #36	@ 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	40020400 	.word	0x40020400
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40020c00 	.word	0x40020c00
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40021400 	.word	0x40021400
 8002e64:	40021800 	.word	0x40021800
 8002e68:	40021c00 	.word	0x40021c00
 8002e6c:	40013c00 	.word	0x40013c00

08002e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e80:	787b      	ldrb	r3, [r7, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e8c:	e003      	b.n	8002e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e8e:	887b      	ldrh	r3, [r7, #2]
 8002e90:	041a      	lsls	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	619a      	str	r2, [r3, #24]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e267      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d075      	beq.n	8002fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ec2:	4b88      	ldr	r3, [pc, #544]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d00c      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ece:	4b85      	ldr	r3, [pc, #532]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d112      	bne.n	8002f00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eda:	4b82      	ldr	r3, [pc, #520]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ee6:	d10b      	bne.n	8002f00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d05b      	beq.n	8002fac <HAL_RCC_OscConfig+0x108>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d157      	bne.n	8002fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e242      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f08:	d106      	bne.n	8002f18 <HAL_RCC_OscConfig+0x74>
 8002f0a:	4b76      	ldr	r3, [pc, #472]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a75      	ldr	r2, [pc, #468]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e01d      	b.n	8002f54 <HAL_RCC_OscConfig+0xb0>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x98>
 8002f22:	4b70      	ldr	r3, [pc, #448]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6f      	ldr	r2, [pc, #444]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6c      	ldr	r2, [pc, #432]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0xb0>
 8002f3c:	4b69      	ldr	r3, [pc, #420]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a68      	ldr	r2, [pc, #416]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b66      	ldr	r3, [pc, #408]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a65      	ldr	r2, [pc, #404]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fb80 	bl	8001660 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fb7c 	bl	8001660 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e207      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b5b      	ldr	r3, [pc, #364]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0xc0>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fb6c 	bl	8001660 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fb68 	bl	8001660 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e1f3      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	4b51      	ldr	r3, [pc, #324]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0xe8>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d063      	beq.n	8003082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fba:	4b4a      	ldr	r3, [pc, #296]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00b      	beq.n	8002fde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc6:	4b47      	ldr	r3, [pc, #284]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d11c      	bne.n	800300c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd2:	4b44      	ldr	r3, [pc, #272]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d116      	bne.n	800300c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fde:	4b41      	ldr	r3, [pc, #260]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x152>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d001      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e1c7      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4937      	ldr	r1, [pc, #220]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	e03a      	b.n	8003082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003014:	4b34      	ldr	r3, [pc, #208]	@ (80030e8 <HAL_RCC_OscConfig+0x244>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7fe fb21 	bl	8001660 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003022:	f7fe fb1d 	bl	8001660 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1a8      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003040:	4b28      	ldr	r3, [pc, #160]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4925      	ldr	r1, [pc, #148]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003050:	4313      	orrs	r3, r2
 8003052:	600b      	str	r3, [r1, #0]
 8003054:	e015      	b.n	8003082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003056:	4b24      	ldr	r3, [pc, #144]	@ (80030e8 <HAL_RCC_OscConfig+0x244>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fb00 	bl	8001660 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003064:	f7fe fafc 	bl	8001660 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e187      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d036      	beq.n	80030fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003096:	4b15      	ldr	r3, [pc, #84]	@ (80030ec <HAL_RCC_OscConfig+0x248>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe fae0 	bl	8001660 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a4:	f7fe fadc 	bl	8001660 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e167      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_RCC_OscConfig+0x240>)
 80030b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x200>
 80030c2:	e01b      	b.n	80030fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c4:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_RCC_OscConfig+0x248>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fac9 	bl	8001660 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	e00e      	b.n	80030f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fe fac5 	bl	8001660 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d907      	bls.n	80030f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e150      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
 80030e4:	40023800 	.word	0x40023800
 80030e8:	42470000 	.word	0x42470000
 80030ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	4b88      	ldr	r3, [pc, #544]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ea      	bne.n	80030d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 8097 	beq.w	8003238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310e:	4b81      	ldr	r3, [pc, #516]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	4b7d      	ldr	r3, [pc, #500]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	4a7c      	ldr	r2, [pc, #496]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	@ 0x40
 800312a:	4b7a      	ldr	r3, [pc, #488]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003136:	2301      	movs	r3, #1
 8003138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313a:	4b77      	ldr	r3, [pc, #476]	@ (8003318 <HAL_RCC_OscConfig+0x474>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d118      	bne.n	8003178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003146:	4b74      	ldr	r3, [pc, #464]	@ (8003318 <HAL_RCC_OscConfig+0x474>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a73      	ldr	r2, [pc, #460]	@ (8003318 <HAL_RCC_OscConfig+0x474>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003152:	f7fe fa85 	bl	8001660 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315a:	f7fe fa81 	bl	8001660 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e10c      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	4b6a      	ldr	r3, [pc, #424]	@ (8003318 <HAL_RCC_OscConfig+0x474>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d106      	bne.n	800318e <HAL_RCC_OscConfig+0x2ea>
 8003180:	4b64      	ldr	r3, [pc, #400]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003184:	4a63      	ldr	r2, [pc, #396]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6713      	str	r3, [r2, #112]	@ 0x70
 800318c:	e01c      	b.n	80031c8 <HAL_RCC_OscConfig+0x324>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b05      	cmp	r3, #5
 8003194:	d10c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x30c>
 8003196:	4b5f      	ldr	r3, [pc, #380]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319a:	4a5e      	ldr	r2, [pc, #376]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 800319c:	f043 0304 	orr.w	r3, r3, #4
 80031a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ae:	e00b      	b.n	80031c8 <HAL_RCC_OscConfig+0x324>
 80031b0:	4b58      	ldr	r3, [pc, #352]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b4:	4a57      	ldr	r2, [pc, #348]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80031bc:	4b55      	ldr	r3, [pc, #340]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c0:	4a54      	ldr	r2, [pc, #336]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f023 0304 	bic.w	r3, r3, #4
 80031c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d015      	beq.n	80031fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d0:	f7fe fa46 	bl	8001660 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fe fa42 	bl	8001660 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e0cb      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ee:	4b49      	ldr	r3, [pc, #292]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0ee      	beq.n	80031d8 <HAL_RCC_OscConfig+0x334>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fc:	f7fe fa30 	bl	8001660 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fe fa2c 	bl	8001660 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0b5      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321a:	4b3e      	ldr	r3, [pc, #248]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1ee      	bne.n	8003204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d105      	bne.n	8003238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322c:	4b39      	ldr	r3, [pc, #228]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	4a38      	ldr	r2, [pc, #224]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 8003232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003236:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80a1 	beq.w	8003384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003242:	4b34      	ldr	r3, [pc, #208]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b08      	cmp	r3, #8
 800324c:	d05c      	beq.n	8003308 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d141      	bne.n	80032da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b31      	ldr	r3, [pc, #196]	@ (800331c <HAL_RCC_OscConfig+0x478>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe fa00 	bl	8001660 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe f9fc 	bl	8001660 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e087      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	4b27      	ldr	r3, [pc, #156]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	019b      	lsls	r3, r3, #6
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	3b01      	subs	r3, #1
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	491b      	ldr	r1, [pc, #108]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ac:	4b1b      	ldr	r3, [pc, #108]	@ (800331c <HAL_RCC_OscConfig+0x478>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fe f9d5 	bl	8001660 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fe f9d1 	bl	8001660 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e05c      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032cc:	4b11      	ldr	r3, [pc, #68]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x416>
 80032d8:	e054      	b.n	8003384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b10      	ldr	r3, [pc, #64]	@ (800331c <HAL_RCC_OscConfig+0x478>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe f9be 	bl	8001660 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe f9ba 	bl	8001660 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e045      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_RCC_OscConfig+0x470>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x444>
 8003306:	e03d      	b.n	8003384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e038      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
 8003314:	40023800 	.word	0x40023800
 8003318:	40007000 	.word	0x40007000
 800331c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x4ec>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d028      	beq.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d121      	bne.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d11a      	bne.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003358:	4293      	cmp	r3, r2
 800335a:	d111      	bne.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	3b01      	subs	r3, #1
 800336a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d107      	bne.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800

08003394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0cc      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b68      	ldr	r3, [pc, #416]	@ (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d90c      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b65      	ldr	r3, [pc, #404]	@ (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b63      	ldr	r3, [pc, #396]	@ (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0b8      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e8:	4b59      	ldr	r3, [pc, #356]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4a58      	ldr	r2, [pc, #352]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003400:	4b53      	ldr	r3, [pc, #332]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a52      	ldr	r2, [pc, #328]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800340a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b50      	ldr	r3, [pc, #320]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	494d      	ldr	r1, [pc, #308]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d044      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	4b47      	ldr	r3, [pc, #284]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d119      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e07f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d003      	beq.n	8003452 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344e:	2b03      	cmp	r3, #3
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	4b3f      	ldr	r3, [pc, #252]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e06f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003462:	4b3b      	ldr	r3, [pc, #236]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e067      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003472:	4b37      	ldr	r3, [pc, #220]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 0203 	bic.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4934      	ldr	r1, [pc, #208]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	4313      	orrs	r3, r2
 8003482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003484:	f7fe f8ec 	bl	8001660 <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348c:	f7fe f8e8 	bl	8001660 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e04f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 020c 	and.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1eb      	bne.n	800348c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b4:	4b25      	ldr	r3, [pc, #148]	@ (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d20c      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b22      	ldr	r3, [pc, #136]	@ (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b20      	ldr	r3, [pc, #128]	@ (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e032      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e8:	4b19      	ldr	r3, [pc, #100]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4916      	ldr	r1, [pc, #88]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003506:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	490e      	ldr	r1, [pc, #56]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800351a:	f000 f821 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 800351e:	4602      	mov	r2, r0
 8003520:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	490a      	ldr	r1, [pc, #40]	@ (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	5ccb      	ldrb	r3, [r1, r3]
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	4a09      	ldr	r2, [pc, #36]	@ (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003536:	4b09      	ldr	r3, [pc, #36]	@ (800355c <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe f84c 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023c00 	.word	0x40023c00
 8003550:	40023800 	.word	0x40023800
 8003554:	080046a8 	.word	0x080046a8
 8003558:	20000000 	.word	0x20000000
 800355c:	20000004 	.word	0x20000004

08003560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003564:	b094      	sub	sp, #80	@ 0x50
 8003566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003578:	4b79      	ldr	r3, [pc, #484]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d00d      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003584:	2b08      	cmp	r3, #8
 8003586:	f200 80e1 	bhi.w	800374c <HAL_RCC_GetSysClockFreq+0x1ec>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x34>
 800358e:	2b04      	cmp	r3, #4
 8003590:	d003      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x3a>
 8003592:	e0db      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b73      	ldr	r3, [pc, #460]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x204>)
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003598:	e0db      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800359a:	4b73      	ldr	r3, [pc, #460]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x208>)
 800359c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800359e:	e0d8      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d063      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	099b      	lsrs	r3, r3, #6
 80035bc:	2200      	movs	r2, #0
 80035be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ca:	2300      	movs	r3, #0
 80035cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035d2:	4622      	mov	r2, r4
 80035d4:	462b      	mov	r3, r5
 80035d6:	f04f 0000 	mov.w	r0, #0
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	0159      	lsls	r1, r3, #5
 80035e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e4:	0150      	lsls	r0, r2, #5
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4621      	mov	r1, r4
 80035ec:	1a51      	subs	r1, r2, r1
 80035ee:	6139      	str	r1, [r7, #16]
 80035f0:	4629      	mov	r1, r5
 80035f2:	eb63 0301 	sbc.w	r3, r3, r1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003604:	4659      	mov	r1, fp
 8003606:	018b      	lsls	r3, r1, #6
 8003608:	4651      	mov	r1, sl
 800360a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800360e:	4651      	mov	r1, sl
 8003610:	018a      	lsls	r2, r1, #6
 8003612:	4651      	mov	r1, sl
 8003614:	ebb2 0801 	subs.w	r8, r2, r1
 8003618:	4659      	mov	r1, fp
 800361a:	eb63 0901 	sbc.w	r9, r3, r1
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800362a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003632:	4690      	mov	r8, r2
 8003634:	4699      	mov	r9, r3
 8003636:	4623      	mov	r3, r4
 8003638:	eb18 0303 	adds.w	r3, r8, r3
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	462b      	mov	r3, r5
 8003640:	eb49 0303 	adc.w	r3, r9, r3
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003652:	4629      	mov	r1, r5
 8003654:	024b      	lsls	r3, r1, #9
 8003656:	4621      	mov	r1, r4
 8003658:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800365c:	4621      	mov	r1, r4
 800365e:	024a      	lsls	r2, r1, #9
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003666:	2200      	movs	r2, #0
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800366a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800366c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003670:	f7fd fa66 	bl	8000b40 <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4613      	mov	r3, r2
 800367a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800367c:	e058      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367e:	4b38      	ldr	r3, [pc, #224]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x200>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	099b      	lsrs	r3, r3, #6
 8003684:	2200      	movs	r2, #0
 8003686:	4618      	mov	r0, r3
 8003688:	4611      	mov	r1, r2
 800368a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	2300      	movs	r3, #0
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
 8003694:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003698:	4642      	mov	r2, r8
 800369a:	464b      	mov	r3, r9
 800369c:	f04f 0000 	mov.w	r0, #0
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	0159      	lsls	r1, r3, #5
 80036a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036aa:	0150      	lsls	r0, r2, #5
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4641      	mov	r1, r8
 80036b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036b6:	4649      	mov	r1, r9
 80036b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036d0:	ebb2 040a 	subs.w	r4, r2, sl
 80036d4:	eb63 050b 	sbc.w	r5, r3, fp
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	00eb      	lsls	r3, r5, #3
 80036e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e6:	00e2      	lsls	r2, r4, #3
 80036e8:	4614      	mov	r4, r2
 80036ea:	461d      	mov	r5, r3
 80036ec:	4643      	mov	r3, r8
 80036ee:	18e3      	adds	r3, r4, r3
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	464b      	mov	r3, r9
 80036f4:	eb45 0303 	adc.w	r3, r5, r3
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003706:	4629      	mov	r1, r5
 8003708:	028b      	lsls	r3, r1, #10
 800370a:	4621      	mov	r1, r4
 800370c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003710:	4621      	mov	r1, r4
 8003712:	028a      	lsls	r2, r1, #10
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371a:	2200      	movs	r2, #0
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	61fa      	str	r2, [r7, #28]
 8003720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003724:	f7fd fa0c 	bl	8000b40 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4613      	mov	r3, r2
 800372e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x200>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	3301      	adds	r3, #1
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003740:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800374a:	e002      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x204>)
 800374e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003754:	4618      	mov	r0, r3
 8003756:	3750      	adds	r7, #80	@ 0x50
 8003758:	46bd      	mov	sp, r7
 800375a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800
 8003764:	00f42400 	.word	0x00f42400
 8003768:	007a1200 	.word	0x007a1200

0800376c <memset>:
 800376c:	4402      	add	r2, r0
 800376e:	4603      	mov	r3, r0
 8003770:	4293      	cmp	r3, r2
 8003772:	d100      	bne.n	8003776 <memset+0xa>
 8003774:	4770      	bx	lr
 8003776:	f803 1b01 	strb.w	r1, [r3], #1
 800377a:	e7f9      	b.n	8003770 <memset+0x4>

0800377c <__errno>:
 800377c:	4b01      	ldr	r3, [pc, #4]	@ (8003784 <__errno+0x8>)
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	2000000c 	.word	0x2000000c

08003788 <__libc_init_array>:
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	4d0d      	ldr	r5, [pc, #52]	@ (80037c0 <__libc_init_array+0x38>)
 800378c:	4c0d      	ldr	r4, [pc, #52]	@ (80037c4 <__libc_init_array+0x3c>)
 800378e:	1b64      	subs	r4, r4, r5
 8003790:	10a4      	asrs	r4, r4, #2
 8003792:	2600      	movs	r6, #0
 8003794:	42a6      	cmp	r6, r4
 8003796:	d109      	bne.n	80037ac <__libc_init_array+0x24>
 8003798:	4d0b      	ldr	r5, [pc, #44]	@ (80037c8 <__libc_init_array+0x40>)
 800379a:	4c0c      	ldr	r4, [pc, #48]	@ (80037cc <__libc_init_array+0x44>)
 800379c:	f000 ff76 	bl	800468c <_init>
 80037a0:	1b64      	subs	r4, r4, r5
 80037a2:	10a4      	asrs	r4, r4, #2
 80037a4:	2600      	movs	r6, #0
 80037a6:	42a6      	cmp	r6, r4
 80037a8:	d105      	bne.n	80037b6 <__libc_init_array+0x2e>
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b0:	4798      	blx	r3
 80037b2:	3601      	adds	r6, #1
 80037b4:	e7ee      	b.n	8003794 <__libc_init_array+0xc>
 80037b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ba:	4798      	blx	r3
 80037bc:	3601      	adds	r6, #1
 80037be:	e7f2      	b.n	80037a6 <__libc_init_array+0x1e>
 80037c0:	080046f0 	.word	0x080046f0
 80037c4:	080046f0 	.word	0x080046f0
 80037c8:	080046f0 	.word	0x080046f0
 80037cc:	080046f4 	.word	0x080046f4

080037d0 <pow>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	ed2d 8b02 	vpush	{d8}
 80037d6:	eeb0 8a40 	vmov.f32	s16, s0
 80037da:	eef0 8a60 	vmov.f32	s17, s1
 80037de:	ec55 4b11 	vmov	r4, r5, d1
 80037e2:	f000 f871 	bl	80038c8 <__ieee754_pow>
 80037e6:	4622      	mov	r2, r4
 80037e8:	462b      	mov	r3, r5
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	ec57 6b10 	vmov	r6, r7, d0
 80037f2:	f7fd f93f 	bl	8000a74 <__aeabi_dcmpun>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d13b      	bne.n	8003872 <pow+0xa2>
 80037fa:	ec51 0b18 	vmov	r0, r1, d8
 80037fe:	2200      	movs	r2, #0
 8003800:	2300      	movs	r3, #0
 8003802:	f7fd f905 	bl	8000a10 <__aeabi_dcmpeq>
 8003806:	b1b8      	cbz	r0, 8003838 <pow+0x68>
 8003808:	2200      	movs	r2, #0
 800380a:	2300      	movs	r3, #0
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fd f8fe 	bl	8000a10 <__aeabi_dcmpeq>
 8003814:	2800      	cmp	r0, #0
 8003816:	d146      	bne.n	80038a6 <pow+0xd6>
 8003818:	ec45 4b10 	vmov	d0, r4, r5
 800381c:	f000 f848 	bl	80038b0 <finite>
 8003820:	b338      	cbz	r0, 8003872 <pow+0xa2>
 8003822:	2200      	movs	r2, #0
 8003824:	2300      	movs	r3, #0
 8003826:	4620      	mov	r0, r4
 8003828:	4629      	mov	r1, r5
 800382a:	f7fd f8fb 	bl	8000a24 <__aeabi_dcmplt>
 800382e:	b300      	cbz	r0, 8003872 <pow+0xa2>
 8003830:	f7ff ffa4 	bl	800377c <__errno>
 8003834:	2322      	movs	r3, #34	@ 0x22
 8003836:	e01b      	b.n	8003870 <pow+0xa0>
 8003838:	ec47 6b10 	vmov	d0, r6, r7
 800383c:	f000 f838 	bl	80038b0 <finite>
 8003840:	b9e0      	cbnz	r0, 800387c <pow+0xac>
 8003842:	eeb0 0a48 	vmov.f32	s0, s16
 8003846:	eef0 0a68 	vmov.f32	s1, s17
 800384a:	f000 f831 	bl	80038b0 <finite>
 800384e:	b1a8      	cbz	r0, 800387c <pow+0xac>
 8003850:	ec45 4b10 	vmov	d0, r4, r5
 8003854:	f000 f82c 	bl	80038b0 <finite>
 8003858:	b180      	cbz	r0, 800387c <pow+0xac>
 800385a:	4632      	mov	r2, r6
 800385c:	463b      	mov	r3, r7
 800385e:	4630      	mov	r0, r6
 8003860:	4639      	mov	r1, r7
 8003862:	f7fd f907 	bl	8000a74 <__aeabi_dcmpun>
 8003866:	2800      	cmp	r0, #0
 8003868:	d0e2      	beq.n	8003830 <pow+0x60>
 800386a:	f7ff ff87 	bl	800377c <__errno>
 800386e:	2321      	movs	r3, #33	@ 0x21
 8003870:	6003      	str	r3, [r0, #0]
 8003872:	ecbd 8b02 	vpop	{d8}
 8003876:	ec47 6b10 	vmov	d0, r6, r7
 800387a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800387c:	2200      	movs	r2, #0
 800387e:	2300      	movs	r3, #0
 8003880:	4630      	mov	r0, r6
 8003882:	4639      	mov	r1, r7
 8003884:	f7fd f8c4 	bl	8000a10 <__aeabi_dcmpeq>
 8003888:	2800      	cmp	r0, #0
 800388a:	d0f2      	beq.n	8003872 <pow+0xa2>
 800388c:	eeb0 0a48 	vmov.f32	s0, s16
 8003890:	eef0 0a68 	vmov.f32	s1, s17
 8003894:	f000 f80c 	bl	80038b0 <finite>
 8003898:	2800      	cmp	r0, #0
 800389a:	d0ea      	beq.n	8003872 <pow+0xa2>
 800389c:	ec45 4b10 	vmov	d0, r4, r5
 80038a0:	f000 f806 	bl	80038b0 <finite>
 80038a4:	e7c3      	b.n	800382e <pow+0x5e>
 80038a6:	4f01      	ldr	r7, [pc, #4]	@ (80038ac <pow+0xdc>)
 80038a8:	2600      	movs	r6, #0
 80038aa:	e7e2      	b.n	8003872 <pow+0xa2>
 80038ac:	3ff00000 	.word	0x3ff00000

080038b0 <finite>:
 80038b0:	b082      	sub	sp, #8
 80038b2:	ed8d 0b00 	vstr	d0, [sp]
 80038b6:	9801      	ldr	r0, [sp, #4]
 80038b8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80038bc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80038c0:	0fc0      	lsrs	r0, r0, #31
 80038c2:	b002      	add	sp, #8
 80038c4:	4770      	bx	lr
	...

080038c8 <__ieee754_pow>:
 80038c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038cc:	b091      	sub	sp, #68	@ 0x44
 80038ce:	ed8d 1b00 	vstr	d1, [sp]
 80038d2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80038d6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80038da:	ea5a 0001 	orrs.w	r0, sl, r1
 80038de:	ec57 6b10 	vmov	r6, r7, d0
 80038e2:	d113      	bne.n	800390c <__ieee754_pow+0x44>
 80038e4:	19b3      	adds	r3, r6, r6
 80038e6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80038ea:	4152      	adcs	r2, r2
 80038ec:	4298      	cmp	r0, r3
 80038ee:	4b98      	ldr	r3, [pc, #608]	@ (8003b50 <__ieee754_pow+0x288>)
 80038f0:	4193      	sbcs	r3, r2
 80038f2:	f080 84ea 	bcs.w	80042ca <__ieee754_pow+0xa02>
 80038f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038fa:	4630      	mov	r0, r6
 80038fc:	4639      	mov	r1, r7
 80038fe:	f7fc fc69 	bl	80001d4 <__adddf3>
 8003902:	ec41 0b10 	vmov	d0, r0, r1
 8003906:	b011      	add	sp, #68	@ 0x44
 8003908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390c:	4a91      	ldr	r2, [pc, #580]	@ (8003b54 <__ieee754_pow+0x28c>)
 800390e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003912:	4590      	cmp	r8, r2
 8003914:	463d      	mov	r5, r7
 8003916:	4633      	mov	r3, r6
 8003918:	d806      	bhi.n	8003928 <__ieee754_pow+0x60>
 800391a:	d101      	bne.n	8003920 <__ieee754_pow+0x58>
 800391c:	2e00      	cmp	r6, #0
 800391e:	d1ea      	bne.n	80038f6 <__ieee754_pow+0x2e>
 8003920:	4592      	cmp	sl, r2
 8003922:	d801      	bhi.n	8003928 <__ieee754_pow+0x60>
 8003924:	d10e      	bne.n	8003944 <__ieee754_pow+0x7c>
 8003926:	b169      	cbz	r1, 8003944 <__ieee754_pow+0x7c>
 8003928:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800392c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003930:	431d      	orrs	r5, r3
 8003932:	d1e0      	bne.n	80038f6 <__ieee754_pow+0x2e>
 8003934:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003938:	18db      	adds	r3, r3, r3
 800393a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800393e:	4152      	adcs	r2, r2
 8003940:	429d      	cmp	r5, r3
 8003942:	e7d4      	b.n	80038ee <__ieee754_pow+0x26>
 8003944:	2d00      	cmp	r5, #0
 8003946:	46c3      	mov	fp, r8
 8003948:	da3a      	bge.n	80039c0 <__ieee754_pow+0xf8>
 800394a:	4a83      	ldr	r2, [pc, #524]	@ (8003b58 <__ieee754_pow+0x290>)
 800394c:	4592      	cmp	sl, r2
 800394e:	d84d      	bhi.n	80039ec <__ieee754_pow+0x124>
 8003950:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8003954:	4592      	cmp	sl, r2
 8003956:	f240 84c7 	bls.w	80042e8 <__ieee754_pow+0xa20>
 800395a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800395e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003962:	2a14      	cmp	r2, #20
 8003964:	dd0f      	ble.n	8003986 <__ieee754_pow+0xbe>
 8003966:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800396a:	fa21 f402 	lsr.w	r4, r1, r2
 800396e:	fa04 f202 	lsl.w	r2, r4, r2
 8003972:	428a      	cmp	r2, r1
 8003974:	f040 84b8 	bne.w	80042e8 <__ieee754_pow+0xa20>
 8003978:	f004 0401 	and.w	r4, r4, #1
 800397c:	f1c4 0402 	rsb	r4, r4, #2
 8003980:	2900      	cmp	r1, #0
 8003982:	d158      	bne.n	8003a36 <__ieee754_pow+0x16e>
 8003984:	e00e      	b.n	80039a4 <__ieee754_pow+0xdc>
 8003986:	2900      	cmp	r1, #0
 8003988:	d154      	bne.n	8003a34 <__ieee754_pow+0x16c>
 800398a:	f1c2 0214 	rsb	r2, r2, #20
 800398e:	fa4a f402 	asr.w	r4, sl, r2
 8003992:	fa04 f202 	lsl.w	r2, r4, r2
 8003996:	4552      	cmp	r2, sl
 8003998:	f040 84a3 	bne.w	80042e2 <__ieee754_pow+0xa1a>
 800399c:	f004 0401 	and.w	r4, r4, #1
 80039a0:	f1c4 0402 	rsb	r4, r4, #2
 80039a4:	4a6d      	ldr	r2, [pc, #436]	@ (8003b5c <__ieee754_pow+0x294>)
 80039a6:	4592      	cmp	sl, r2
 80039a8:	d12e      	bne.n	8003a08 <__ieee754_pow+0x140>
 80039aa:	f1b9 0f00 	cmp.w	r9, #0
 80039ae:	f280 8494 	bge.w	80042da <__ieee754_pow+0xa12>
 80039b2:	496a      	ldr	r1, [pc, #424]	@ (8003b5c <__ieee754_pow+0x294>)
 80039b4:	4632      	mov	r2, r6
 80039b6:	463b      	mov	r3, r7
 80039b8:	2000      	movs	r0, #0
 80039ba:	f7fc feeb 	bl	8000794 <__aeabi_ddiv>
 80039be:	e7a0      	b.n	8003902 <__ieee754_pow+0x3a>
 80039c0:	2400      	movs	r4, #0
 80039c2:	bbc1      	cbnz	r1, 8003a36 <__ieee754_pow+0x16e>
 80039c4:	4a63      	ldr	r2, [pc, #396]	@ (8003b54 <__ieee754_pow+0x28c>)
 80039c6:	4592      	cmp	sl, r2
 80039c8:	d1ec      	bne.n	80039a4 <__ieee754_pow+0xdc>
 80039ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80039ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80039d2:	431a      	orrs	r2, r3
 80039d4:	f000 8479 	beq.w	80042ca <__ieee754_pow+0xa02>
 80039d8:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <__ieee754_pow+0x298>)
 80039da:	4598      	cmp	r8, r3
 80039dc:	d908      	bls.n	80039f0 <__ieee754_pow+0x128>
 80039de:	f1b9 0f00 	cmp.w	r9, #0
 80039e2:	f2c0 8476 	blt.w	80042d2 <__ieee754_pow+0xa0a>
 80039e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039ea:	e78a      	b.n	8003902 <__ieee754_pow+0x3a>
 80039ec:	2402      	movs	r4, #2
 80039ee:	e7e8      	b.n	80039c2 <__ieee754_pow+0xfa>
 80039f0:	f1b9 0f00 	cmp.w	r9, #0
 80039f4:	f04f 0000 	mov.w	r0, #0
 80039f8:	f04f 0100 	mov.w	r1, #0
 80039fc:	da81      	bge.n	8003902 <__ieee754_pow+0x3a>
 80039fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003a02:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003a06:	e77c      	b.n	8003902 <__ieee754_pow+0x3a>
 8003a08:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8003a0c:	d106      	bne.n	8003a1c <__ieee754_pow+0x154>
 8003a0e:	4632      	mov	r2, r6
 8003a10:	463b      	mov	r3, r7
 8003a12:	4630      	mov	r0, r6
 8003a14:	4639      	mov	r1, r7
 8003a16:	f7fc fd93 	bl	8000540 <__aeabi_dmul>
 8003a1a:	e772      	b.n	8003902 <__ieee754_pow+0x3a>
 8003a1c:	4a51      	ldr	r2, [pc, #324]	@ (8003b64 <__ieee754_pow+0x29c>)
 8003a1e:	4591      	cmp	r9, r2
 8003a20:	d109      	bne.n	8003a36 <__ieee754_pow+0x16e>
 8003a22:	2d00      	cmp	r5, #0
 8003a24:	db07      	blt.n	8003a36 <__ieee754_pow+0x16e>
 8003a26:	ec47 6b10 	vmov	d0, r6, r7
 8003a2a:	b011      	add	sp, #68	@ 0x44
 8003a2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a30:	f000 bd52 	b.w	80044d8 <__ieee754_sqrt>
 8003a34:	2400      	movs	r4, #0
 8003a36:	ec47 6b10 	vmov	d0, r6, r7
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	f000 fc88 	bl	8004350 <fabs>
 8003a40:	9b02      	ldr	r3, [sp, #8]
 8003a42:	ec51 0b10 	vmov	r0, r1, d0
 8003a46:	bb53      	cbnz	r3, 8003a9e <__ieee754_pow+0x1d6>
 8003a48:	4b44      	ldr	r3, [pc, #272]	@ (8003b5c <__ieee754_pow+0x294>)
 8003a4a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d002      	beq.n	8003a58 <__ieee754_pow+0x190>
 8003a52:	f1b8 0f00 	cmp.w	r8, #0
 8003a56:	d122      	bne.n	8003a9e <__ieee754_pow+0x1d6>
 8003a58:	f1b9 0f00 	cmp.w	r9, #0
 8003a5c:	da05      	bge.n	8003a6a <__ieee754_pow+0x1a2>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	2000      	movs	r0, #0
 8003a64:	493d      	ldr	r1, [pc, #244]	@ (8003b5c <__ieee754_pow+0x294>)
 8003a66:	f7fc fe95 	bl	8000794 <__aeabi_ddiv>
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	f6bf af49 	bge.w	8003902 <__ieee754_pow+0x3a>
 8003a70:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8003a74:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8003a78:	ea58 0804 	orrs.w	r8, r8, r4
 8003a7c:	d108      	bne.n	8003a90 <__ieee754_pow+0x1c8>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4610      	mov	r0, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	f7fc fba3 	bl	80001d0 <__aeabi_dsub>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	e794      	b.n	80039ba <__ieee754_pow+0xf2>
 8003a90:	2c01      	cmp	r4, #1
 8003a92:	f47f af36 	bne.w	8003902 <__ieee754_pow+0x3a>
 8003a96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	e731      	b.n	8003902 <__ieee754_pow+0x3a>
 8003a9e:	0feb      	lsrs	r3, r5, #31
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	ea53 0204 	orrs.w	r2, r3, r4
 8003aa6:	d102      	bne.n	8003aae <__ieee754_pow+0x1e6>
 8003aa8:	4632      	mov	r2, r6
 8003aaa:	463b      	mov	r3, r7
 8003aac:	e7e9      	b.n	8003a82 <__ieee754_pow+0x1ba>
 8003aae:	3c01      	subs	r4, #1
 8003ab0:	431c      	orrs	r4, r3
 8003ab2:	d016      	beq.n	8003ae2 <__ieee754_pow+0x21a>
 8003ab4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8003b40 <__ieee754_pow+0x278>
 8003ab8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8003abc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ac0:	f240 8112 	bls.w	8003ce8 <__ieee754_pow+0x420>
 8003ac4:	4b28      	ldr	r3, [pc, #160]	@ (8003b68 <__ieee754_pow+0x2a0>)
 8003ac6:	459a      	cmp	sl, r3
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <__ieee754_pow+0x298>)
 8003aca:	d916      	bls.n	8003afa <__ieee754_pow+0x232>
 8003acc:	4598      	cmp	r8, r3
 8003ace:	d80b      	bhi.n	8003ae8 <__ieee754_pow+0x220>
 8003ad0:	f1b9 0f00 	cmp.w	r9, #0
 8003ad4:	da0b      	bge.n	8003aee <__ieee754_pow+0x226>
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	b011      	add	sp, #68	@ 0x44
 8003ada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ade:	f000 bcf3 	b.w	80044c8 <__math_oflow>
 8003ae2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8003b48 <__ieee754_pow+0x280>
 8003ae6:	e7e7      	b.n	8003ab8 <__ieee754_pow+0x1f0>
 8003ae8:	f1b9 0f00 	cmp.w	r9, #0
 8003aec:	dcf3      	bgt.n	8003ad6 <__ieee754_pow+0x20e>
 8003aee:	2000      	movs	r0, #0
 8003af0:	b011      	add	sp, #68	@ 0x44
 8003af2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af6:	f000 bcdf 	b.w	80044b8 <__math_uflow>
 8003afa:	4598      	cmp	r8, r3
 8003afc:	d20c      	bcs.n	8003b18 <__ieee754_pow+0x250>
 8003afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b02:	2200      	movs	r2, #0
 8003b04:	2300      	movs	r3, #0
 8003b06:	f7fc ff8d 	bl	8000a24 <__aeabi_dcmplt>
 8003b0a:	3800      	subs	r0, #0
 8003b0c:	bf18      	it	ne
 8003b0e:	2001      	movne	r0, #1
 8003b10:	f1b9 0f00 	cmp.w	r9, #0
 8003b14:	daec      	bge.n	8003af0 <__ieee754_pow+0x228>
 8003b16:	e7df      	b.n	8003ad8 <__ieee754_pow+0x210>
 8003b18:	4b10      	ldr	r3, [pc, #64]	@ (8003b5c <__ieee754_pow+0x294>)
 8003b1a:	4598      	cmp	r8, r3
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	d924      	bls.n	8003b6c <__ieee754_pow+0x2a4>
 8003b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b26:	2300      	movs	r3, #0
 8003b28:	f7fc ff7c 	bl	8000a24 <__aeabi_dcmplt>
 8003b2c:	3800      	subs	r0, #0
 8003b2e:	bf18      	it	ne
 8003b30:	2001      	movne	r0, #1
 8003b32:	f1b9 0f00 	cmp.w	r9, #0
 8003b36:	dccf      	bgt.n	8003ad8 <__ieee754_pow+0x210>
 8003b38:	e7da      	b.n	8003af0 <__ieee754_pow+0x228>
 8003b3a:	bf00      	nop
 8003b3c:	f3af 8000 	nop.w
 8003b40:	00000000 	.word	0x00000000
 8003b44:	3ff00000 	.word	0x3ff00000
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	bff00000 	.word	0xbff00000
 8003b50:	fff00000 	.word	0xfff00000
 8003b54:	7ff00000 	.word	0x7ff00000
 8003b58:	433fffff 	.word	0x433fffff
 8003b5c:	3ff00000 	.word	0x3ff00000
 8003b60:	3fefffff 	.word	0x3fefffff
 8003b64:	3fe00000 	.word	0x3fe00000
 8003b68:	43f00000 	.word	0x43f00000
 8003b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003cd8 <__ieee754_pow+0x410>)
 8003b6e:	f7fc fb2f 	bl	80001d0 <__aeabi_dsub>
 8003b72:	a351      	add	r3, pc, #324	@ (adr r3, 8003cb8 <__ieee754_pow+0x3f0>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	4604      	mov	r4, r0
 8003b7a:	460d      	mov	r5, r1
 8003b7c:	f7fc fce0 	bl	8000540 <__aeabi_dmul>
 8003b80:	a34f      	add	r3, pc, #316	@ (adr r3, 8003cc0 <__ieee754_pow+0x3f8>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	4606      	mov	r6, r0
 8003b88:	460f      	mov	r7, r1
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	f7fc fcd7 	bl	8000540 <__aeabi_dmul>
 8003b92:	4b52      	ldr	r3, [pc, #328]	@ (8003cdc <__ieee754_pow+0x414>)
 8003b94:	4682      	mov	sl, r0
 8003b96:	468b      	mov	fp, r1
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f7fc fccf 	bl	8000540 <__aeabi_dmul>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	a148      	add	r1, pc, #288	@ (adr r1, 8003cc8 <__ieee754_pow+0x400>)
 8003ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bac:	f7fc fb10 	bl	80001d0 <__aeabi_dsub>
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	462b      	mov	r3, r5
 8003bb4:	f7fc fcc4 	bl	8000540 <__aeabi_dmul>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	4948      	ldr	r1, [pc, #288]	@ (8003ce0 <__ieee754_pow+0x418>)
 8003bc0:	f7fc fb06 	bl	80001d0 <__aeabi_dsub>
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	4680      	mov	r8, r0
 8003bc8:	4689      	mov	r9, r1
 8003bca:	462b      	mov	r3, r5
 8003bcc:	4620      	mov	r0, r4
 8003bce:	4629      	mov	r1, r5
 8003bd0:	f7fc fcb6 	bl	8000540 <__aeabi_dmul>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4640      	mov	r0, r8
 8003bda:	4649      	mov	r1, r9
 8003bdc:	f7fc fcb0 	bl	8000540 <__aeabi_dmul>
 8003be0:	a33b      	add	r3, pc, #236	@ (adr r3, 8003cd0 <__ieee754_pow+0x408>)
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f7fc fcab 	bl	8000540 <__aeabi_dmul>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4650      	mov	r0, sl
 8003bf0:	4659      	mov	r1, fp
 8003bf2:	f7fc faed 	bl	80001d0 <__aeabi_dsub>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4680      	mov	r8, r0
 8003bfc:	4689      	mov	r9, r1
 8003bfe:	4630      	mov	r0, r6
 8003c00:	4639      	mov	r1, r7
 8003c02:	f7fc fae7 	bl	80001d4 <__adddf3>
 8003c06:	2400      	movs	r4, #0
 8003c08:	4632      	mov	r2, r6
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	460d      	mov	r5, r1
 8003c10:	f7fc fade 	bl	80001d0 <__aeabi_dsub>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4640      	mov	r0, r8
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	f7fc fad8 	bl	80001d0 <__aeabi_dsub>
 8003c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9304      	str	r3, [sp, #16]
 8003c2c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003c30:	4606      	mov	r6, r0
 8003c32:	460f      	mov	r7, r1
 8003c34:	4652      	mov	r2, sl
 8003c36:	465b      	mov	r3, fp
 8003c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c3c:	f7fc fac8 	bl	80001d0 <__aeabi_dsub>
 8003c40:	4622      	mov	r2, r4
 8003c42:	462b      	mov	r3, r5
 8003c44:	f7fc fc7c 	bl	8000540 <__aeabi_dmul>
 8003c48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	4689      	mov	r9, r1
 8003c50:	4630      	mov	r0, r6
 8003c52:	4639      	mov	r1, r7
 8003c54:	f7fc fc74 	bl	8000540 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	4649      	mov	r1, r9
 8003c60:	f7fc fab8 	bl	80001d4 <__adddf3>
 8003c64:	4652      	mov	r2, sl
 8003c66:	465b      	mov	r3, fp
 8003c68:	4606      	mov	r6, r0
 8003c6a:	460f      	mov	r7, r1
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4629      	mov	r1, r5
 8003c70:	f7fc fc66 	bl	8000540 <__aeabi_dmul>
 8003c74:	460b      	mov	r3, r1
 8003c76:	4602      	mov	r2, r0
 8003c78:	4680      	mov	r8, r0
 8003c7a:	4689      	mov	r9, r1
 8003c7c:	4630      	mov	r0, r6
 8003c7e:	4639      	mov	r1, r7
 8003c80:	f7fc faa8 	bl	80001d4 <__adddf3>
 8003c84:	4b17      	ldr	r3, [pc, #92]	@ (8003ce4 <__ieee754_pow+0x41c>)
 8003c86:	4299      	cmp	r1, r3
 8003c88:	4604      	mov	r4, r0
 8003c8a:	460d      	mov	r5, r1
 8003c8c:	468a      	mov	sl, r1
 8003c8e:	468b      	mov	fp, r1
 8003c90:	f340 82ef 	ble.w	8004272 <__ieee754_pow+0x9aa>
 8003c94:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003c98:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003c9c:	4303      	orrs	r3, r0
 8003c9e:	f000 81e8 	beq.w	8004072 <__ieee754_pow+0x7aa>
 8003ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f7fc febb 	bl	8000a24 <__aeabi_dcmplt>
 8003cae:	3800      	subs	r0, #0
 8003cb0:	bf18      	it	ne
 8003cb2:	2001      	movne	r0, #1
 8003cb4:	e710      	b.n	8003ad8 <__ieee754_pow+0x210>
 8003cb6:	bf00      	nop
 8003cb8:	60000000 	.word	0x60000000
 8003cbc:	3ff71547 	.word	0x3ff71547
 8003cc0:	f85ddf44 	.word	0xf85ddf44
 8003cc4:	3e54ae0b 	.word	0x3e54ae0b
 8003cc8:	55555555 	.word	0x55555555
 8003ccc:	3fd55555 	.word	0x3fd55555
 8003cd0:	652b82fe 	.word	0x652b82fe
 8003cd4:	3ff71547 	.word	0x3ff71547
 8003cd8:	3ff00000 	.word	0x3ff00000
 8003cdc:	3fd00000 	.word	0x3fd00000
 8003ce0:	3fe00000 	.word	0x3fe00000
 8003ce4:	408fffff 	.word	0x408fffff
 8003ce8:	4bd5      	ldr	r3, [pc, #852]	@ (8004040 <__ieee754_pow+0x778>)
 8003cea:	402b      	ands	r3, r5
 8003cec:	2200      	movs	r2, #0
 8003cee:	b92b      	cbnz	r3, 8003cfc <__ieee754_pow+0x434>
 8003cf0:	4bd4      	ldr	r3, [pc, #848]	@ (8004044 <__ieee754_pow+0x77c>)
 8003cf2:	f7fc fc25 	bl	8000540 <__aeabi_dmul>
 8003cf6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8003cfa:	468b      	mov	fp, r1
 8003cfc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8003d00:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8003d04:	4413      	add	r3, r2
 8003d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d08:	4bcf      	ldr	r3, [pc, #828]	@ (8004048 <__ieee754_pow+0x780>)
 8003d0a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8003d0e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8003d12:	459b      	cmp	fp, r3
 8003d14:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8003d18:	dd08      	ble.n	8003d2c <__ieee754_pow+0x464>
 8003d1a:	4bcc      	ldr	r3, [pc, #816]	@ (800404c <__ieee754_pow+0x784>)
 8003d1c:	459b      	cmp	fp, r3
 8003d1e:	f340 81a5 	ble.w	800406c <__ieee754_pow+0x7a4>
 8003d22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d24:	3301      	adds	r3, #1
 8003d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d28:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003d2c:	f04f 0a00 	mov.w	sl, #0
 8003d30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003d34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d36:	4bc6      	ldr	r3, [pc, #792]	@ (8004050 <__ieee754_pow+0x788>)
 8003d38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003d3c:	ed93 7b00 	vldr	d7, [r3]
 8003d40:	4629      	mov	r1, r5
 8003d42:	ec53 2b17 	vmov	r2, r3, d7
 8003d46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003d4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003d4e:	f7fc fa3f 	bl	80001d0 <__aeabi_dsub>
 8003d52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d56:	4606      	mov	r6, r0
 8003d58:	460f      	mov	r7, r1
 8003d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d5e:	f7fc fa39 	bl	80001d4 <__adddf3>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	2000      	movs	r0, #0
 8003d68:	49ba      	ldr	r1, [pc, #744]	@ (8004054 <__ieee754_pow+0x78c>)
 8003d6a:	f7fc fd13 	bl	8000794 <__aeabi_ddiv>
 8003d6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4630      	mov	r0, r6
 8003d78:	4639      	mov	r1, r7
 8003d7a:	f7fc fbe1 	bl	8000540 <__aeabi_dmul>
 8003d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d82:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8003d86:	106d      	asrs	r5, r5, #1
 8003d88:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8003d8c:	f04f 0b00 	mov.w	fp, #0
 8003d90:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003d94:	4661      	mov	r1, ip
 8003d96:	2200      	movs	r2, #0
 8003d98:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003d9c:	4658      	mov	r0, fp
 8003d9e:	46e1      	mov	r9, ip
 8003da0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8003da4:	4614      	mov	r4, r2
 8003da6:	461d      	mov	r5, r3
 8003da8:	f7fc fbca 	bl	8000540 <__aeabi_dmul>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4630      	mov	r0, r6
 8003db2:	4639      	mov	r1, r7
 8003db4:	f7fc fa0c 	bl	80001d0 <__aeabi_dsub>
 8003db8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	460f      	mov	r7, r1
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	f7fc fa04 	bl	80001d0 <__aeabi_dsub>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003dd0:	f7fc f9fe 	bl	80001d0 <__aeabi_dsub>
 8003dd4:	465a      	mov	r2, fp
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	f7fc fbb2 	bl	8000540 <__aeabi_dmul>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4630      	mov	r0, r6
 8003de2:	4639      	mov	r1, r7
 8003de4:	f7fc f9f4 	bl	80001d0 <__aeabi_dsub>
 8003de8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003dec:	f7fc fba8 	bl	8000540 <__aeabi_dmul>
 8003df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003df4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f7fc fba0 	bl	8000540 <__aeabi_dmul>
 8003e00:	a37d      	add	r3, pc, #500	@ (adr r3, 8003ff8 <__ieee754_pow+0x730>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	4604      	mov	r4, r0
 8003e08:	460d      	mov	r5, r1
 8003e0a:	f7fc fb99 	bl	8000540 <__aeabi_dmul>
 8003e0e:	a37c      	add	r3, pc, #496	@ (adr r3, 8004000 <__ieee754_pow+0x738>)
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f7fc f9de 	bl	80001d4 <__adddf3>
 8003e18:	4622      	mov	r2, r4
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	f7fc fb90 	bl	8000540 <__aeabi_dmul>
 8003e20:	a379      	add	r3, pc, #484	@ (adr r3, 8004008 <__ieee754_pow+0x740>)
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f7fc f9d5 	bl	80001d4 <__adddf3>
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	f7fc fb87 	bl	8000540 <__aeabi_dmul>
 8003e32:	a377      	add	r3, pc, #476	@ (adr r3, 8004010 <__ieee754_pow+0x748>)
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f7fc f9cc 	bl	80001d4 <__adddf3>
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	462b      	mov	r3, r5
 8003e40:	f7fc fb7e 	bl	8000540 <__aeabi_dmul>
 8003e44:	a374      	add	r3, pc, #464	@ (adr r3, 8004018 <__ieee754_pow+0x750>)
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f7fc f9c3 	bl	80001d4 <__adddf3>
 8003e4e:	4622      	mov	r2, r4
 8003e50:	462b      	mov	r3, r5
 8003e52:	f7fc fb75 	bl	8000540 <__aeabi_dmul>
 8003e56:	a372      	add	r3, pc, #456	@ (adr r3, 8004020 <__ieee754_pow+0x758>)
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f7fc f9ba 	bl	80001d4 <__adddf3>
 8003e60:	4622      	mov	r2, r4
 8003e62:	4606      	mov	r6, r0
 8003e64:	460f      	mov	r7, r1
 8003e66:	462b      	mov	r3, r5
 8003e68:	4620      	mov	r0, r4
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	f7fc fb68 	bl	8000540 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4630      	mov	r0, r6
 8003e76:	4639      	mov	r1, r7
 8003e78:	f7fc fb62 	bl	8000540 <__aeabi_dmul>
 8003e7c:	465a      	mov	r2, fp
 8003e7e:	4604      	mov	r4, r0
 8003e80:	460d      	mov	r5, r1
 8003e82:	464b      	mov	r3, r9
 8003e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e88:	f7fc f9a4 	bl	80001d4 <__adddf3>
 8003e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e90:	f7fc fb56 	bl	8000540 <__aeabi_dmul>
 8003e94:	4622      	mov	r2, r4
 8003e96:	462b      	mov	r3, r5
 8003e98:	f7fc f99c 	bl	80001d4 <__adddf3>
 8003e9c:	465a      	mov	r2, fp
 8003e9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	4658      	mov	r0, fp
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	f7fc fb4a 	bl	8000540 <__aeabi_dmul>
 8003eac:	4b6a      	ldr	r3, [pc, #424]	@ (8004058 <__ieee754_pow+0x790>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	460f      	mov	r7, r1
 8003eb4:	f7fc f98e 	bl	80001d4 <__adddf3>
 8003eb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ebc:	f7fc f98a 	bl	80001d4 <__adddf3>
 8003ec0:	46d8      	mov	r8, fp
 8003ec2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8003ec6:	460d      	mov	r5, r1
 8003ec8:	465a      	mov	r2, fp
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4640      	mov	r0, r8
 8003ece:	4649      	mov	r1, r9
 8003ed0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8003ed4:	f7fc fb34 	bl	8000540 <__aeabi_dmul>
 8003ed8:	465c      	mov	r4, fp
 8003eda:	4680      	mov	r8, r0
 8003edc:	4689      	mov	r9, r1
 8003ede:	4b5e      	ldr	r3, [pc, #376]	@ (8004058 <__ieee754_pow+0x790>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	f7fc f973 	bl	80001d0 <__aeabi_dsub>
 8003eea:	4632      	mov	r2, r6
 8003eec:	463b      	mov	r3, r7
 8003eee:	f7fc f96f 	bl	80001d0 <__aeabi_dsub>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003efa:	f7fc f969 	bl	80001d0 <__aeabi_dsub>
 8003efe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f02:	f7fc fb1d 	bl	8000540 <__aeabi_dmul>
 8003f06:	4622      	mov	r2, r4
 8003f08:	4606      	mov	r6, r0
 8003f0a:	460f      	mov	r7, r1
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f12:	f7fc fb15 	bl	8000540 <__aeabi_dmul>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	4639      	mov	r1, r7
 8003f1e:	f7fc f959 	bl	80001d4 <__adddf3>
 8003f22:	4606      	mov	r6, r0
 8003f24:	460f      	mov	r7, r1
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	4649      	mov	r1, r9
 8003f2e:	f7fc f951 	bl	80001d4 <__adddf3>
 8003f32:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8003f36:	a33c      	add	r3, pc, #240	@ (adr r3, 8004028 <__ieee754_pow+0x760>)
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	4658      	mov	r0, fp
 8003f3e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8003f42:	460d      	mov	r5, r1
 8003f44:	f7fc fafc 	bl	8000540 <__aeabi_dmul>
 8003f48:	465c      	mov	r4, fp
 8003f4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f4e:	4642      	mov	r2, r8
 8003f50:	464b      	mov	r3, r9
 8003f52:	4620      	mov	r0, r4
 8003f54:	4629      	mov	r1, r5
 8003f56:	f7fc f93b 	bl	80001d0 <__aeabi_dsub>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4630      	mov	r0, r6
 8003f60:	4639      	mov	r1, r7
 8003f62:	f7fc f935 	bl	80001d0 <__aeabi_dsub>
 8003f66:	a332      	add	r3, pc, #200	@ (adr r3, 8004030 <__ieee754_pow+0x768>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc fae8 	bl	8000540 <__aeabi_dmul>
 8003f70:	a331      	add	r3, pc, #196	@ (adr r3, 8004038 <__ieee754_pow+0x770>)
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	4606      	mov	r6, r0
 8003f78:	460f      	mov	r7, r1
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	f7fc fadf 	bl	8000540 <__aeabi_dmul>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4630      	mov	r0, r6
 8003f88:	4639      	mov	r1, r7
 8003f8a:	f7fc f923 	bl	80001d4 <__adddf3>
 8003f8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003f90:	4b32      	ldr	r3, [pc, #200]	@ (800405c <__ieee754_pow+0x794>)
 8003f92:	4413      	add	r3, r2
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f7fc f91c 	bl	80001d4 <__adddf3>
 8003f9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003fa0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003fa2:	f7fc fa63 	bl	800046c <__aeabi_i2d>
 8003fa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <__ieee754_pow+0x798>)
 8003faa:	4413      	add	r3, r2
 8003fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fb6:	460f      	mov	r7, r1
 8003fb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fbc:	f7fc f90a 	bl	80001d4 <__adddf3>
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	f7fc f906 	bl	80001d4 <__adddf3>
 8003fc8:	4632      	mov	r2, r6
 8003fca:	463b      	mov	r3, r7
 8003fcc:	f7fc f902 	bl	80001d4 <__adddf3>
 8003fd0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	4658      	mov	r0, fp
 8003fda:	460d      	mov	r5, r1
 8003fdc:	f7fc f8f8 	bl	80001d0 <__aeabi_dsub>
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	f7fc f8f4 	bl	80001d0 <__aeabi_dsub>
 8003fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fec:	f7fc f8f0 	bl	80001d0 <__aeabi_dsub>
 8003ff0:	465c      	mov	r4, fp
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	e036      	b.n	8004064 <__ieee754_pow+0x79c>
 8003ff6:	bf00      	nop
 8003ff8:	4a454eef 	.word	0x4a454eef
 8003ffc:	3fca7e28 	.word	0x3fca7e28
 8004000:	93c9db65 	.word	0x93c9db65
 8004004:	3fcd864a 	.word	0x3fcd864a
 8004008:	a91d4101 	.word	0xa91d4101
 800400c:	3fd17460 	.word	0x3fd17460
 8004010:	518f264d 	.word	0x518f264d
 8004014:	3fd55555 	.word	0x3fd55555
 8004018:	db6fabff 	.word	0xdb6fabff
 800401c:	3fdb6db6 	.word	0x3fdb6db6
 8004020:	33333303 	.word	0x33333303
 8004024:	3fe33333 	.word	0x3fe33333
 8004028:	e0000000 	.word	0xe0000000
 800402c:	3feec709 	.word	0x3feec709
 8004030:	dc3a03fd 	.word	0xdc3a03fd
 8004034:	3feec709 	.word	0x3feec709
 8004038:	145b01f5 	.word	0x145b01f5
 800403c:	be3e2fe0 	.word	0xbe3e2fe0
 8004040:	7ff00000 	.word	0x7ff00000
 8004044:	43400000 	.word	0x43400000
 8004048:	0003988e 	.word	0x0003988e
 800404c:	000bb679 	.word	0x000bb679
 8004050:	080046d8 	.word	0x080046d8
 8004054:	3ff00000 	.word	0x3ff00000
 8004058:	40080000 	.word	0x40080000
 800405c:	080046b8 	.word	0x080046b8
 8004060:	080046c8 	.word	0x080046c8
 8004064:	460b      	mov	r3, r1
 8004066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800406a:	e5d7      	b.n	8003c1c <__ieee754_pow+0x354>
 800406c:	f04f 0a01 	mov.w	sl, #1
 8004070:	e65e      	b.n	8003d30 <__ieee754_pow+0x468>
 8004072:	a3b4      	add	r3, pc, #720	@ (adr r3, 8004344 <__ieee754_pow+0xa7c>)
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	4630      	mov	r0, r6
 800407a:	4639      	mov	r1, r7
 800407c:	f7fc f8aa 	bl	80001d4 <__adddf3>
 8004080:	4642      	mov	r2, r8
 8004082:	e9cd 0100 	strd	r0, r1, [sp]
 8004086:	464b      	mov	r3, r9
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	f7fc f8a0 	bl	80001d0 <__aeabi_dsub>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004098:	f7fc fce2 	bl	8000a60 <__aeabi_dcmpgt>
 800409c:	2800      	cmp	r0, #0
 800409e:	f47f ae00 	bne.w	8003ca2 <__ieee754_pow+0x3da>
 80040a2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80040a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80040aa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80040ae:	fa43 fa0a 	asr.w	sl, r3, sl
 80040b2:	44da      	add	sl, fp
 80040b4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80040b8:	489d      	ldr	r0, [pc, #628]	@ (8004330 <__ieee754_pow+0xa68>)
 80040ba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80040be:	4108      	asrs	r0, r1
 80040c0:	ea00 030a 	and.w	r3, r0, sl
 80040c4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80040c8:	f1c1 0114 	rsb	r1, r1, #20
 80040cc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80040d0:	fa4a fa01 	asr.w	sl, sl, r1
 80040d4:	f1bb 0f00 	cmp.w	fp, #0
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	bfb8      	it	lt
 80040e2:	f1ca 0a00 	rsblt	sl, sl, #0
 80040e6:	f7fc f873 	bl	80001d0 <__aeabi_dsub>
 80040ea:	4680      	mov	r8, r0
 80040ec:	4689      	mov	r9, r1
 80040ee:	4632      	mov	r2, r6
 80040f0:	463b      	mov	r3, r7
 80040f2:	4640      	mov	r0, r8
 80040f4:	4649      	mov	r1, r9
 80040f6:	f7fc f86d 	bl	80001d4 <__adddf3>
 80040fa:	2400      	movs	r4, #0
 80040fc:	a37c      	add	r3, pc, #496	@ (adr r3, 80042f0 <__ieee754_pow+0xa28>)
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	4620      	mov	r0, r4
 8004104:	460d      	mov	r5, r1
 8004106:	f7fc fa1b 	bl	8000540 <__aeabi_dmul>
 800410a:	4642      	mov	r2, r8
 800410c:	e9cd 0100 	strd	r0, r1, [sp]
 8004110:	464b      	mov	r3, r9
 8004112:	4620      	mov	r0, r4
 8004114:	4629      	mov	r1, r5
 8004116:	f7fc f85b 	bl	80001d0 <__aeabi_dsub>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4630      	mov	r0, r6
 8004120:	4639      	mov	r1, r7
 8004122:	f7fc f855 	bl	80001d0 <__aeabi_dsub>
 8004126:	a374      	add	r3, pc, #464	@ (adr r3, 80042f8 <__ieee754_pow+0xa30>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f7fc fa08 	bl	8000540 <__aeabi_dmul>
 8004130:	a373      	add	r3, pc, #460	@ (adr r3, 8004300 <__ieee754_pow+0xa38>)
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	4680      	mov	r8, r0
 8004138:	4689      	mov	r9, r1
 800413a:	4620      	mov	r0, r4
 800413c:	4629      	mov	r1, r5
 800413e:	f7fc f9ff 	bl	8000540 <__aeabi_dmul>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4640      	mov	r0, r8
 8004148:	4649      	mov	r1, r9
 800414a:	f7fc f843 	bl	80001d4 <__adddf3>
 800414e:	4604      	mov	r4, r0
 8004150:	460d      	mov	r5, r1
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800415a:	f7fc f83b 	bl	80001d4 <__adddf3>
 800415e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004162:	4680      	mov	r8, r0
 8004164:	4689      	mov	r9, r1
 8004166:	f7fc f833 	bl	80001d0 <__aeabi_dsub>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4620      	mov	r0, r4
 8004170:	4629      	mov	r1, r5
 8004172:	f7fc f82d 	bl	80001d0 <__aeabi_dsub>
 8004176:	4642      	mov	r2, r8
 8004178:	4606      	mov	r6, r0
 800417a:	460f      	mov	r7, r1
 800417c:	464b      	mov	r3, r9
 800417e:	4640      	mov	r0, r8
 8004180:	4649      	mov	r1, r9
 8004182:	f7fc f9dd 	bl	8000540 <__aeabi_dmul>
 8004186:	a360      	add	r3, pc, #384	@ (adr r3, 8004308 <__ieee754_pow+0xa40>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	4604      	mov	r4, r0
 800418e:	460d      	mov	r5, r1
 8004190:	f7fc f9d6 	bl	8000540 <__aeabi_dmul>
 8004194:	a35e      	add	r3, pc, #376	@ (adr r3, 8004310 <__ieee754_pow+0xa48>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f7fc f819 	bl	80001d0 <__aeabi_dsub>
 800419e:	4622      	mov	r2, r4
 80041a0:	462b      	mov	r3, r5
 80041a2:	f7fc f9cd 	bl	8000540 <__aeabi_dmul>
 80041a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8004318 <__ieee754_pow+0xa50>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc f812 	bl	80001d4 <__adddf3>
 80041b0:	4622      	mov	r2, r4
 80041b2:	462b      	mov	r3, r5
 80041b4:	f7fc f9c4 	bl	8000540 <__aeabi_dmul>
 80041b8:	a359      	add	r3, pc, #356	@ (adr r3, 8004320 <__ieee754_pow+0xa58>)
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f7fc f807 	bl	80001d0 <__aeabi_dsub>
 80041c2:	4622      	mov	r2, r4
 80041c4:	462b      	mov	r3, r5
 80041c6:	f7fc f9bb 	bl	8000540 <__aeabi_dmul>
 80041ca:	a357      	add	r3, pc, #348	@ (adr r3, 8004328 <__ieee754_pow+0xa60>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f7fc f800 	bl	80001d4 <__adddf3>
 80041d4:	4622      	mov	r2, r4
 80041d6:	462b      	mov	r3, r5
 80041d8:	f7fc f9b2 	bl	8000540 <__aeabi_dmul>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4640      	mov	r0, r8
 80041e2:	4649      	mov	r1, r9
 80041e4:	f7fb fff4 	bl	80001d0 <__aeabi_dsub>
 80041e8:	4604      	mov	r4, r0
 80041ea:	460d      	mov	r5, r1
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4640      	mov	r0, r8
 80041f2:	4649      	mov	r1, r9
 80041f4:	f7fc f9a4 	bl	8000540 <__aeabi_dmul>
 80041f8:	2200      	movs	r2, #0
 80041fa:	e9cd 0100 	strd	r0, r1, [sp]
 80041fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004202:	4620      	mov	r0, r4
 8004204:	4629      	mov	r1, r5
 8004206:	f7fb ffe3 	bl	80001d0 <__aeabi_dsub>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004212:	f7fc fabf 	bl	8000794 <__aeabi_ddiv>
 8004216:	4632      	mov	r2, r6
 8004218:	4604      	mov	r4, r0
 800421a:	460d      	mov	r5, r1
 800421c:	463b      	mov	r3, r7
 800421e:	4640      	mov	r0, r8
 8004220:	4649      	mov	r1, r9
 8004222:	f7fc f98d 	bl	8000540 <__aeabi_dmul>
 8004226:	4632      	mov	r2, r6
 8004228:	463b      	mov	r3, r7
 800422a:	f7fb ffd3 	bl	80001d4 <__adddf3>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4620      	mov	r0, r4
 8004234:	4629      	mov	r1, r5
 8004236:	f7fb ffcb 	bl	80001d0 <__aeabi_dsub>
 800423a:	4642      	mov	r2, r8
 800423c:	464b      	mov	r3, r9
 800423e:	f7fb ffc7 	bl	80001d0 <__aeabi_dsub>
 8004242:	460b      	mov	r3, r1
 8004244:	4602      	mov	r2, r0
 8004246:	493b      	ldr	r1, [pc, #236]	@ (8004334 <__ieee754_pow+0xa6c>)
 8004248:	2000      	movs	r0, #0
 800424a:	f7fb ffc1 	bl	80001d0 <__aeabi_dsub>
 800424e:	ec41 0b10 	vmov	d0, r0, r1
 8004252:	ee10 3a90 	vmov	r3, s1
 8004256:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800425a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800425e:	da30      	bge.n	80042c2 <__ieee754_pow+0x9fa>
 8004260:	4650      	mov	r0, sl
 8004262:	f000 f87d 	bl	8004360 <scalbn>
 8004266:	ec51 0b10 	vmov	r0, r1, d0
 800426a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800426e:	f7ff bbd2 	b.w	8003a16 <__ieee754_pow+0x14e>
 8004272:	4c31      	ldr	r4, [pc, #196]	@ (8004338 <__ieee754_pow+0xa70>)
 8004274:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004278:	42a3      	cmp	r3, r4
 800427a:	d91a      	bls.n	80042b2 <__ieee754_pow+0x9ea>
 800427c:	4b2f      	ldr	r3, [pc, #188]	@ (800433c <__ieee754_pow+0xa74>)
 800427e:	440b      	add	r3, r1
 8004280:	4303      	orrs	r3, r0
 8004282:	d009      	beq.n	8004298 <__ieee754_pow+0x9d0>
 8004284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004288:	2200      	movs	r2, #0
 800428a:	2300      	movs	r3, #0
 800428c:	f7fc fbca 	bl	8000a24 <__aeabi_dcmplt>
 8004290:	3800      	subs	r0, #0
 8004292:	bf18      	it	ne
 8004294:	2001      	movne	r0, #1
 8004296:	e42b      	b.n	8003af0 <__ieee754_pow+0x228>
 8004298:	4642      	mov	r2, r8
 800429a:	464b      	mov	r3, r9
 800429c:	f7fb ff98 	bl	80001d0 <__aeabi_dsub>
 80042a0:	4632      	mov	r2, r6
 80042a2:	463b      	mov	r3, r7
 80042a4:	f7fc fbd2 	bl	8000a4c <__aeabi_dcmpge>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d1eb      	bne.n	8004284 <__ieee754_pow+0x9bc>
 80042ac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800434c <__ieee754_pow+0xa84>
 80042b0:	e6f7      	b.n	80040a2 <__ieee754_pow+0x7da>
 80042b2:	469a      	mov	sl, r3
 80042b4:	4b22      	ldr	r3, [pc, #136]	@ (8004340 <__ieee754_pow+0xa78>)
 80042b6:	459a      	cmp	sl, r3
 80042b8:	f63f aef3 	bhi.w	80040a2 <__ieee754_pow+0x7da>
 80042bc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80042c0:	e715      	b.n	80040ee <__ieee754_pow+0x826>
 80042c2:	ec51 0b10 	vmov	r0, r1, d0
 80042c6:	4619      	mov	r1, r3
 80042c8:	e7cf      	b.n	800426a <__ieee754_pow+0x9a2>
 80042ca:	491a      	ldr	r1, [pc, #104]	@ (8004334 <__ieee754_pow+0xa6c>)
 80042cc:	2000      	movs	r0, #0
 80042ce:	f7ff bb18 	b.w	8003902 <__ieee754_pow+0x3a>
 80042d2:	2000      	movs	r0, #0
 80042d4:	2100      	movs	r1, #0
 80042d6:	f7ff bb14 	b.w	8003902 <__ieee754_pow+0x3a>
 80042da:	4630      	mov	r0, r6
 80042dc:	4639      	mov	r1, r7
 80042de:	f7ff bb10 	b.w	8003902 <__ieee754_pow+0x3a>
 80042e2:	460c      	mov	r4, r1
 80042e4:	f7ff bb5e 	b.w	80039a4 <__ieee754_pow+0xdc>
 80042e8:	2400      	movs	r4, #0
 80042ea:	f7ff bb49 	b.w	8003980 <__ieee754_pow+0xb8>
 80042ee:	bf00      	nop
 80042f0:	00000000 	.word	0x00000000
 80042f4:	3fe62e43 	.word	0x3fe62e43
 80042f8:	fefa39ef 	.word	0xfefa39ef
 80042fc:	3fe62e42 	.word	0x3fe62e42
 8004300:	0ca86c39 	.word	0x0ca86c39
 8004304:	be205c61 	.word	0xbe205c61
 8004308:	72bea4d0 	.word	0x72bea4d0
 800430c:	3e663769 	.word	0x3e663769
 8004310:	c5d26bf1 	.word	0xc5d26bf1
 8004314:	3ebbbd41 	.word	0x3ebbbd41
 8004318:	af25de2c 	.word	0xaf25de2c
 800431c:	3f11566a 	.word	0x3f11566a
 8004320:	16bebd93 	.word	0x16bebd93
 8004324:	3f66c16c 	.word	0x3f66c16c
 8004328:	5555553e 	.word	0x5555553e
 800432c:	3fc55555 	.word	0x3fc55555
 8004330:	fff00000 	.word	0xfff00000
 8004334:	3ff00000 	.word	0x3ff00000
 8004338:	4090cbff 	.word	0x4090cbff
 800433c:	3f6f3400 	.word	0x3f6f3400
 8004340:	3fe00000 	.word	0x3fe00000
 8004344:	652b82fe 	.word	0x652b82fe
 8004348:	3c971547 	.word	0x3c971547
 800434c:	4090cc00 	.word	0x4090cc00

08004350 <fabs>:
 8004350:	ec51 0b10 	vmov	r0, r1, d0
 8004354:	4602      	mov	r2, r0
 8004356:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800435a:	ec43 2b10 	vmov	d0, r2, r3
 800435e:	4770      	bx	lr

08004360 <scalbn>:
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	ec55 4b10 	vmov	r4, r5, d0
 8004366:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800436a:	4606      	mov	r6, r0
 800436c:	462b      	mov	r3, r5
 800436e:	b991      	cbnz	r1, 8004396 <scalbn+0x36>
 8004370:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004374:	4323      	orrs	r3, r4
 8004376:	d03d      	beq.n	80043f4 <scalbn+0x94>
 8004378:	4b35      	ldr	r3, [pc, #212]	@ (8004450 <scalbn+0xf0>)
 800437a:	4620      	mov	r0, r4
 800437c:	4629      	mov	r1, r5
 800437e:	2200      	movs	r2, #0
 8004380:	f7fc f8de 	bl	8000540 <__aeabi_dmul>
 8004384:	4b33      	ldr	r3, [pc, #204]	@ (8004454 <scalbn+0xf4>)
 8004386:	429e      	cmp	r6, r3
 8004388:	4604      	mov	r4, r0
 800438a:	460d      	mov	r5, r1
 800438c:	da0f      	bge.n	80043ae <scalbn+0x4e>
 800438e:	a328      	add	r3, pc, #160	@ (adr r3, 8004430 <scalbn+0xd0>)
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	e01e      	b.n	80043d4 <scalbn+0x74>
 8004396:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800439a:	4291      	cmp	r1, r2
 800439c:	d10b      	bne.n	80043b6 <scalbn+0x56>
 800439e:	4622      	mov	r2, r4
 80043a0:	4620      	mov	r0, r4
 80043a2:	4629      	mov	r1, r5
 80043a4:	f7fb ff16 	bl	80001d4 <__adddf3>
 80043a8:	4604      	mov	r4, r0
 80043aa:	460d      	mov	r5, r1
 80043ac:	e022      	b.n	80043f4 <scalbn+0x94>
 80043ae:	460b      	mov	r3, r1
 80043b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80043b4:	3936      	subs	r1, #54	@ 0x36
 80043b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80043ba:	4296      	cmp	r6, r2
 80043bc:	dd0d      	ble.n	80043da <scalbn+0x7a>
 80043be:	2d00      	cmp	r5, #0
 80043c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8004438 <scalbn+0xd8>)
 80043c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043c6:	da02      	bge.n	80043ce <scalbn+0x6e>
 80043c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8004440 <scalbn+0xe0>)
 80043ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8004438 <scalbn+0xd8>)
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f7fc f8b4 	bl	8000540 <__aeabi_dmul>
 80043d8:	e7e6      	b.n	80043a8 <scalbn+0x48>
 80043da:	1872      	adds	r2, r6, r1
 80043dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80043e0:	428a      	cmp	r2, r1
 80043e2:	dcec      	bgt.n	80043be <scalbn+0x5e>
 80043e4:	2a00      	cmp	r2, #0
 80043e6:	dd08      	ble.n	80043fa <scalbn+0x9a>
 80043e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80043ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80043f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80043f4:	ec45 4b10 	vmov	d0, r4, r5
 80043f8:	bd70      	pop	{r4, r5, r6, pc}
 80043fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80043fe:	da08      	bge.n	8004412 <scalbn+0xb2>
 8004400:	2d00      	cmp	r5, #0
 8004402:	a10b      	add	r1, pc, #44	@ (adr r1, 8004430 <scalbn+0xd0>)
 8004404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004408:	dac1      	bge.n	800438e <scalbn+0x2e>
 800440a:	a10f      	add	r1, pc, #60	@ (adr r1, 8004448 <scalbn+0xe8>)
 800440c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004410:	e7bd      	b.n	800438e <scalbn+0x2e>
 8004412:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004416:	3236      	adds	r2, #54	@ 0x36
 8004418:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800441c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004420:	4620      	mov	r0, r4
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <scalbn+0xf8>)
 8004424:	4629      	mov	r1, r5
 8004426:	2200      	movs	r2, #0
 8004428:	e7d4      	b.n	80043d4 <scalbn+0x74>
 800442a:	bf00      	nop
 800442c:	f3af 8000 	nop.w
 8004430:	c2f8f359 	.word	0xc2f8f359
 8004434:	01a56e1f 	.word	0x01a56e1f
 8004438:	8800759c 	.word	0x8800759c
 800443c:	7e37e43c 	.word	0x7e37e43c
 8004440:	8800759c 	.word	0x8800759c
 8004444:	fe37e43c 	.word	0xfe37e43c
 8004448:	c2f8f359 	.word	0xc2f8f359
 800444c:	81a56e1f 	.word	0x81a56e1f
 8004450:	43500000 	.word	0x43500000
 8004454:	ffff3cb0 	.word	0xffff3cb0
 8004458:	3c900000 	.word	0x3c900000

0800445c <with_errno>:
 800445c:	b510      	push	{r4, lr}
 800445e:	ed2d 8b02 	vpush	{d8}
 8004462:	eeb0 8a40 	vmov.f32	s16, s0
 8004466:	eef0 8a60 	vmov.f32	s17, s1
 800446a:	4604      	mov	r4, r0
 800446c:	f7ff f986 	bl	800377c <__errno>
 8004470:	eeb0 0a48 	vmov.f32	s0, s16
 8004474:	eef0 0a68 	vmov.f32	s1, s17
 8004478:	ecbd 8b02 	vpop	{d8}
 800447c:	6004      	str	r4, [r0, #0]
 800447e:	bd10      	pop	{r4, pc}

08004480 <xflow>:
 8004480:	4603      	mov	r3, r0
 8004482:	b507      	push	{r0, r1, r2, lr}
 8004484:	ec51 0b10 	vmov	r0, r1, d0
 8004488:	b183      	cbz	r3, 80044ac <xflow+0x2c>
 800448a:	4602      	mov	r2, r0
 800448c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004490:	e9cd 2300 	strd	r2, r3, [sp]
 8004494:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004498:	f7fc f852 	bl	8000540 <__aeabi_dmul>
 800449c:	ec41 0b10 	vmov	d0, r0, r1
 80044a0:	2022      	movs	r0, #34	@ 0x22
 80044a2:	b003      	add	sp, #12
 80044a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044a8:	f7ff bfd8 	b.w	800445c <with_errno>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	e7ee      	b.n	8004490 <xflow+0x10>
 80044b2:	0000      	movs	r0, r0
 80044b4:	0000      	movs	r0, r0
	...

080044b8 <__math_uflow>:
 80044b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80044c0 <__math_uflow+0x8>
 80044bc:	f7ff bfe0 	b.w	8004480 <xflow>
 80044c0:	00000000 	.word	0x00000000
 80044c4:	10000000 	.word	0x10000000

080044c8 <__math_oflow>:
 80044c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80044d0 <__math_oflow+0x8>
 80044cc:	f7ff bfd8 	b.w	8004480 <xflow>
 80044d0:	00000000 	.word	0x00000000
 80044d4:	70000000 	.word	0x70000000

080044d8 <__ieee754_sqrt>:
 80044d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	4a68      	ldr	r2, [pc, #416]	@ (8004680 <__ieee754_sqrt+0x1a8>)
 80044de:	ec55 4b10 	vmov	r4, r5, d0
 80044e2:	43aa      	bics	r2, r5
 80044e4:	462b      	mov	r3, r5
 80044e6:	4621      	mov	r1, r4
 80044e8:	d110      	bne.n	800450c <__ieee754_sqrt+0x34>
 80044ea:	4622      	mov	r2, r4
 80044ec:	4620      	mov	r0, r4
 80044ee:	4629      	mov	r1, r5
 80044f0:	f7fc f826 	bl	8000540 <__aeabi_dmul>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4620      	mov	r0, r4
 80044fa:	4629      	mov	r1, r5
 80044fc:	f7fb fe6a 	bl	80001d4 <__adddf3>
 8004500:	4604      	mov	r4, r0
 8004502:	460d      	mov	r5, r1
 8004504:	ec45 4b10 	vmov	d0, r4, r5
 8004508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450c:	2d00      	cmp	r5, #0
 800450e:	dc0e      	bgt.n	800452e <__ieee754_sqrt+0x56>
 8004510:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004514:	4322      	orrs	r2, r4
 8004516:	d0f5      	beq.n	8004504 <__ieee754_sqrt+0x2c>
 8004518:	b19d      	cbz	r5, 8004542 <__ieee754_sqrt+0x6a>
 800451a:	4622      	mov	r2, r4
 800451c:	4620      	mov	r0, r4
 800451e:	4629      	mov	r1, r5
 8004520:	f7fb fe56 	bl	80001d0 <__aeabi_dsub>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	f7fc f934 	bl	8000794 <__aeabi_ddiv>
 800452c:	e7e8      	b.n	8004500 <__ieee754_sqrt+0x28>
 800452e:	152a      	asrs	r2, r5, #20
 8004530:	d115      	bne.n	800455e <__ieee754_sqrt+0x86>
 8004532:	2000      	movs	r0, #0
 8004534:	e009      	b.n	800454a <__ieee754_sqrt+0x72>
 8004536:	0acb      	lsrs	r3, r1, #11
 8004538:	3a15      	subs	r2, #21
 800453a:	0549      	lsls	r1, r1, #21
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0fa      	beq.n	8004536 <__ieee754_sqrt+0x5e>
 8004540:	e7f7      	b.n	8004532 <__ieee754_sqrt+0x5a>
 8004542:	462a      	mov	r2, r5
 8004544:	e7fa      	b.n	800453c <__ieee754_sqrt+0x64>
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	3001      	adds	r0, #1
 800454a:	02dc      	lsls	r4, r3, #11
 800454c:	d5fb      	bpl.n	8004546 <__ieee754_sqrt+0x6e>
 800454e:	1e44      	subs	r4, r0, #1
 8004550:	1b12      	subs	r2, r2, r4
 8004552:	f1c0 0420 	rsb	r4, r0, #32
 8004556:	fa21 f404 	lsr.w	r4, r1, r4
 800455a:	4323      	orrs	r3, r4
 800455c:	4081      	lsls	r1, r0
 800455e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004562:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800456a:	07d2      	lsls	r2, r2, #31
 800456c:	bf5c      	itt	pl
 800456e:	005b      	lslpl	r3, r3, #1
 8004570:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004574:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004578:	bf58      	it	pl
 800457a:	0049      	lslpl	r1, r1, #1
 800457c:	2600      	movs	r6, #0
 800457e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004582:	106d      	asrs	r5, r5, #1
 8004584:	0049      	lsls	r1, r1, #1
 8004586:	2016      	movs	r0, #22
 8004588:	4632      	mov	r2, r6
 800458a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800458e:	1917      	adds	r7, r2, r4
 8004590:	429f      	cmp	r7, r3
 8004592:	bfde      	ittt	le
 8004594:	193a      	addle	r2, r7, r4
 8004596:	1bdb      	suble	r3, r3, r7
 8004598:	1936      	addle	r6, r6, r4
 800459a:	0fcf      	lsrs	r7, r1, #31
 800459c:	3801      	subs	r0, #1
 800459e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80045a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80045a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80045aa:	d1f0      	bne.n	800458e <__ieee754_sqrt+0xb6>
 80045ac:	4604      	mov	r4, r0
 80045ae:	2720      	movs	r7, #32
 80045b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80045b4:	429a      	cmp	r2, r3
 80045b6:	eb00 0e0c 	add.w	lr, r0, ip
 80045ba:	db02      	blt.n	80045c2 <__ieee754_sqrt+0xea>
 80045bc:	d113      	bne.n	80045e6 <__ieee754_sqrt+0x10e>
 80045be:	458e      	cmp	lr, r1
 80045c0:	d811      	bhi.n	80045e6 <__ieee754_sqrt+0x10e>
 80045c2:	f1be 0f00 	cmp.w	lr, #0
 80045c6:	eb0e 000c 	add.w	r0, lr, ip
 80045ca:	da42      	bge.n	8004652 <__ieee754_sqrt+0x17a>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	db40      	blt.n	8004652 <__ieee754_sqrt+0x17a>
 80045d0:	f102 0801 	add.w	r8, r2, #1
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	458e      	cmp	lr, r1
 80045d8:	bf88      	it	hi
 80045da:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80045de:	eba1 010e 	sub.w	r1, r1, lr
 80045e2:	4464      	add	r4, ip
 80045e4:	4642      	mov	r2, r8
 80045e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80045ea:	3f01      	subs	r7, #1
 80045ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80045f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80045f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80045f8:	d1dc      	bne.n	80045b4 <__ieee754_sqrt+0xdc>
 80045fa:	4319      	orrs	r1, r3
 80045fc:	d01b      	beq.n	8004636 <__ieee754_sqrt+0x15e>
 80045fe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004684 <__ieee754_sqrt+0x1ac>
 8004602:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004688 <__ieee754_sqrt+0x1b0>
 8004606:	e9da 0100 	ldrd	r0, r1, [sl]
 800460a:	e9db 2300 	ldrd	r2, r3, [fp]
 800460e:	f7fb fddf 	bl	80001d0 <__aeabi_dsub>
 8004612:	e9da 8900 	ldrd	r8, r9, [sl]
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4640      	mov	r0, r8
 800461c:	4649      	mov	r1, r9
 800461e:	f7fc fa0b 	bl	8000a38 <__aeabi_dcmple>
 8004622:	b140      	cbz	r0, 8004636 <__ieee754_sqrt+0x15e>
 8004624:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8004628:	e9da 0100 	ldrd	r0, r1, [sl]
 800462c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004630:	d111      	bne.n	8004656 <__ieee754_sqrt+0x17e>
 8004632:	3601      	adds	r6, #1
 8004634:	463c      	mov	r4, r7
 8004636:	1072      	asrs	r2, r6, #1
 8004638:	0863      	lsrs	r3, r4, #1
 800463a:	07f1      	lsls	r1, r6, #31
 800463c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004640:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004644:	bf48      	it	mi
 8004646:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800464a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800464e:	4618      	mov	r0, r3
 8004650:	e756      	b.n	8004500 <__ieee754_sqrt+0x28>
 8004652:	4690      	mov	r8, r2
 8004654:	e7be      	b.n	80045d4 <__ieee754_sqrt+0xfc>
 8004656:	f7fb fdbd 	bl	80001d4 <__adddf3>
 800465a:	e9da 8900 	ldrd	r8, r9, [sl]
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4640      	mov	r0, r8
 8004664:	4649      	mov	r1, r9
 8004666:	f7fc f9dd 	bl	8000a24 <__aeabi_dcmplt>
 800466a:	b120      	cbz	r0, 8004676 <__ieee754_sqrt+0x19e>
 800466c:	1ca0      	adds	r0, r4, #2
 800466e:	bf08      	it	eq
 8004670:	3601      	addeq	r6, #1
 8004672:	3402      	adds	r4, #2
 8004674:	e7df      	b.n	8004636 <__ieee754_sqrt+0x15e>
 8004676:	1c63      	adds	r3, r4, #1
 8004678:	f023 0401 	bic.w	r4, r3, #1
 800467c:	e7db      	b.n	8004636 <__ieee754_sqrt+0x15e>
 800467e:	bf00      	nop
 8004680:	7ff00000 	.word	0x7ff00000
 8004684:	20000068 	.word	0x20000068
 8004688:	20000060 	.word	0x20000060

0800468c <_init>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr

08004698 <_fini>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr
